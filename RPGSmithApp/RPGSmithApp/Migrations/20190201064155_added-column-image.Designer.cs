// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace RPGSmithApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190201064155_added-column-image")]
    partial class addedcolumnimage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.Ability", b =>
                {
                    b.Property<int>("AbilityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Command");

                    b.Property<string>("CommandName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CurrentNumberOfUses");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Level");

                    b.Property<int>("MaxNumberOfUses");

                    b.Property<string>("Metatags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentAbilityId");

                    b.Property<int>("RuleSetId");

                    b.Property<string>("Stats")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AbilityId");

                    b.HasIndex("ParentAbilityId");

                    b.HasIndex("RuleSetId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("DAL.Models.AbilityCommand", b =>
                {
                    b.Property<int>("AbilityCommandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbilityId");

                    b.Property<string>("Command");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("AbilityCommandId");

                    b.HasIndex("AbilityId");

                    b.ToTable("AbilityCommands");
                });

            modelBuilder.Entity("DAL.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Configuration");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(150);

                    b.Property<bool>("HasSubscribedNewsletter");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsSocialLogin");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(150);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(2048);

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("TempUserName");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CharacterDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4000);

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<decimal>("InventoryWeight");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("LastCommand");

                    b.Property<string>("LastCommandResult");

                    b.Property<int>("LastCommandTotal");

                    b.Property<string>("LastCommandValues");

                    b.Property<int?>("ParentCharacterId");

                    b.Property<int?>("RuleSetId")
                        .IsRequired();

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(2048);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CharacterId");

                    b.HasIndex("ParentCharacterId");

                    b.HasIndex("RuleSetId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("DAL.Models.CharacterAbility", b =>
                {
                    b.Property<int>("CharacterAbilityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AbilityId")
                        .IsRequired();

                    b.Property<int?>("CharacterId")
                        .IsRequired();

                    b.Property<int?>("CurrentNumberOfUses");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsEnabled")
                        .IsRequired();

                    b.Property<int?>("MaxNumberOfUses");

                    b.HasKey("CharacterAbilityId");

                    b.HasIndex("AbilityId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAbilities");
                });

            modelBuilder.Entity("DAL.Models.CharacterCommand", b =>
                {
                    b.Property<int>("CharacterCommandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterId");

                    b.Property<string>("Command");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("CharacterCommandId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterCommands");
                });

            modelBuilder.Entity("DAL.Models.CharacterCustomToggle", b =>
                {
                    b.Property<int>("CustomToggleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharactersCharacterStatId");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ToggleText");

                    b.HasKey("CustomToggleId");

                    b.HasIndex("CharactersCharacterStatId");

                    b.ToTable("CharacterCustomToggle");
                });

            modelBuilder.Entity("DAL.Models.CharacterDashboardLayout", b =>
                {
                    b.Property<int>("CharacterDashboardLayoutId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId")
                        .IsRequired();

                    b.Property<int?>("DefaultPageId");

                    b.Property<bool>("IsDefaultLayout");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LayoutHeight");

                    b.Property<int>("LayoutWidth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SortOrder");

                    b.HasKey("CharacterDashboardLayoutId");

                    b.ToTable("CharacterDashboardLayouts");
                });

            modelBuilder.Entity("DAL.Models.CharacterDashboardPage", b =>
                {
                    b.Property<int>("CharacterDashboardPageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CharacterDashboardLayoutId")
                        .IsRequired();

                    b.Property<int?>("CharacterId")
                        .IsRequired();

                    b.Property<int>("ContainerHeight");

                    b.Property<int>("ContainerWidth");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SortOrder");

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CharacterDashboardPageId");

                    b.HasIndex("CharacterDashboardLayoutId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterDashboardPages");
                });

            modelBuilder.Entity("DAL.Models.CharactersCharacterStat", b =>
                {
                    b.Property<int>("CharactersCharacterStatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalculationResult");

                    b.Property<int?>("CharacterId")
                        .IsRequired();

                    b.Property<int?>("CharacterStatId")
                        .IsRequired();

                    b.Property<string>("Choice")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ComboText");

                    b.Property<string>("Command")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Current");

                    b.Property<int>("DefaultValue");

                    b.Property<bool>("Display");

                    b.Property<bool>("IsCustom");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOn");

                    b.Property<bool>("IsYes");

                    b.Property<string>("LinkType")
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Maximum");

                    b.Property<int>("Minimum");

                    b.Property<string>("MultiChoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number");

                    b.Property<bool>("OnOff");

                    b.Property<string>("RichText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowCheckbox");

                    b.Property<int>("SubValue");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Value");

                    b.Property<bool>("YesNo");

                    b.HasKey("CharactersCharacterStatId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CharacterStatId");

                    b.ToTable("CharactersCharacterStats");
                });

            modelBuilder.Entity("DAL.Models.CharacterSpell", b =>
                {
                    b.Property<int>("CharacterSpellId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId")
                        .IsRequired();

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsMemorized")
                        .IsRequired();

                    b.Property<int?>("SpellId")
                        .IsRequired();

                    b.HasKey("CharacterSpellId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SpellId");

                    b.ToTable("CharacterSpells");
                });

            modelBuilder.Entity("DAL.Models.CharacterStat", b =>
                {
                    b.Property<int>("CharacterStatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CharacterStatTypeId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ParentCharacterStatId");

                    b.Property<int>("RuleSetId");

                    b.Property<short>("SortOrder");

                    b.Property<string>("StatDesc")
                        .HasMaxLength(4000);

                    b.Property<Guid?>("StatIdentifier")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(100);

                    b.Property<bool>("isActive");

                    b.Property<bool>("isMultiSelect");

                    b.HasKey("CharacterStatId");

                    b.HasIndex("CharacterStatTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentCharacterStatId");

                    b.HasIndex("RuleSetId");

                    b.ToTable("CharacterStats");
                });

            modelBuilder.Entity("DAL.Models.CharacterStatCalc", b =>
                {
                    b.Property<int>("CharacterStatCalcId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterStatId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("StatCalculation")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("StatCalculationIds");

                    b.HasKey("CharacterStatCalcId");

                    b.HasIndex("CharacterStatId");

                    b.ToTable("CharacterStatCalcs");
                });

            modelBuilder.Entity("DAL.Models.CharacterStatChoice", b =>
                {
                    b.Property<int>("CharacterStatChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterStatId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("StatChoiceValue")
                        .HasMaxLength(100);

                    b.HasKey("CharacterStatChoiceId");

                    b.HasIndex("CharacterStatId");

                    b.ToTable("CharacterStatChoices");
                });

            modelBuilder.Entity("DAL.Models.CharacterStatCombo", b =>
                {
                    b.Property<int>("CharacterStatComboId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterStatId");

                    b.Property<int>("DefaultValue");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Maximum");

                    b.Property<int?>("Minimum");

                    b.HasKey("CharacterStatComboId");

                    b.HasIndex("CharacterStatId")
                        .IsUnique();

                    b.ToTable("CharacterStatCombos");
                });

            modelBuilder.Entity("DAL.Models.CharacterStatCondition", b =>
                {
                    b.Property<int>("CharacterStatConditionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterStatId");

                    b.Property<string>("CompareValue")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ConditionOperatorID");

                    b.Property<string>("IfClauseStatText");

                    b.Property<bool>("IsNumeric");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SortOrder");

                    b.HasKey("CharacterStatConditionId");

                    b.HasIndex("CharacterStatId");

                    b.HasIndex("ConditionOperatorID");

                    b.ToTable("CharacterStatConditions");
                });

            modelBuilder.Entity("DAL.Models.CharacterStatDefaultValue", b =>
                {
                    b.Property<int>("CharacterStatDefaultValueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterStatId");

                    b.Property<string>("DefaultValue");

                    b.Property<int?>("Maximum");

                    b.Property<int?>("Minimum");

                    b.Property<int>("Type");

                    b.HasKey("CharacterStatDefaultValueId");

                    b.HasIndex("CharacterStatId");

                    b.ToTable("CharacterStatDefaultValues");
                });

            modelBuilder.Entity("DAL.Models.CharacterStatToggle", b =>
                {
                    b.Property<int>("CharacterStatToggleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterStatId");

                    b.Property<bool>("Display");

                    b.Property<bool>("IsCustom");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("OnOff");

                    b.Property<bool>("ShowCheckbox");

                    b.Property<bool>("YesNo");

                    b.HasKey("CharacterStatToggleId");

                    b.HasIndex("CharacterStatId")
                        .IsUnique();

                    b.ToTable("CharacterStatToggle");
                });

            modelBuilder.Entity("DAL.Models.CharacterStatType", b =>
                {
                    b.Property<short>("CharacterStatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatTypeDesc")
                        .HasMaxLength(4000);

                    b.Property<string>("StatTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<short>("TypeId");

                    b.Property<bool>("isNumeric");

                    b.HasKey("CharacterStatTypeId");

                    b.ToTable("CharacterStatTypes");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterCharacterStatTile", b =>
                {
                    b.Property<int>("CharacterStatTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterTileId");

                    b.Property<int?>("CharactersCharacterStatId");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Shape");

                    b.Property<bool>("ShowTitle");

                    b.Property<int>("SortOrder");

                    b.Property<string>("bodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("bodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("titleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("titleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CharacterStatTileId");

                    b.HasIndex("CharacterTileId")
                        .IsUnique()
                        .HasFilter("[CharacterTileId] IS NOT NULL");

                    b.HasIndex("CharactersCharacterStatId");

                    b.ToTable("CharacterCharacterStatTiles");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterCommandTile", b =>
                {
                    b.Property<int>("CommandTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CharacterTileId");

                    b.Property<string>("Command")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CommandTileId");

                    b.HasIndex("CharacterTileId")
                        .IsUnique()
                        .HasFilter("[CharacterTileId] IS NOT NULL");

                    b.ToTable("CharacterCommandTiles");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterCounterTile", b =>
                {
                    b.Property<int>("CounterTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CharacterTileId");

                    b.Property<int>("CurrentValue");

                    b.Property<int>("DefaultValue");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Maximum");

                    b.Property<int?>("Minimum");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<int>("Step");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CounterTileId");

                    b.HasIndex("CharacterTileId")
                        .IsUnique()
                        .HasFilter("[CharacterTileId] IS NOT NULL");

                    b.ToTable("CharacterCounterTiles");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterExecuteTile", b =>
                {
                    b.Property<int>("ExecuteTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AbilityId");

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CharacterTileId");

                    b.Property<int?>("CommandId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ItemId");

                    b.Property<string>("LinkType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(50);

                    b.Property<int>("Shape");

                    b.Property<bool>("ShowTitle");

                    b.Property<int>("SortOrder");

                    b.Property<int?>("SpellId");

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ExecuteTileId");

                    b.HasIndex("AbilityId");

                    b.HasIndex("CharacterTileId")
                        .IsUnique()
                        .HasFilter("[CharacterTileId] IS NOT NULL");

                    b.HasIndex("ItemId");

                    b.HasIndex("SpellId");

                    b.ToTable("CharacterExecuteTiles");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterImageTile", b =>
                {
                    b.Property<int>("ImageTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CharacterTileId");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ImageTileId");

                    b.HasIndex("CharacterTileId")
                        .IsUnique()
                        .HasFilter("[CharacterTileId] IS NOT NULL");

                    b.ToTable("CharacterImageTiles");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterLinkTile", b =>
                {
                    b.Property<int>("LinkTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AbilityId");

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CharacterTileId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ItemId");

                    b.Property<string>("LinkType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(50);

                    b.Property<int>("Shape");

                    b.Property<bool>("ShowTitle");

                    b.Property<int>("SortOrder");

                    b.Property<int?>("SpellId");

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LinkTileId");

                    b.HasIndex("AbilityId");

                    b.HasIndex("CharacterTileId")
                        .IsUnique()
                        .HasFilter("[CharacterTileId] IS NOT NULL");

                    b.HasIndex("ItemId");

                    b.HasIndex("SpellId");

                    b.ToTable("CharacterLinkTiles");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterNoteTile", b =>
                {
                    b.Property<int>("NoteTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CharacterTileId");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("NoteTileId");

                    b.HasIndex("CharacterTileId")
                        .IsUnique()
                        .HasFilter("[CharacterTileId] IS NOT NULL");

                    b.ToTable("CharacterNoteTiles");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterTextTile", b =>
                {
                    b.Property<int>("TextTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CharacterTileId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("TextTileId");

                    b.HasIndex("CharacterTileId")
                        .IsUnique()
                        .HasFilter("[CharacterTileId] IS NOT NULL");

                    b.ToTable("CharacterTextTiles");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterTile", b =>
                {
                    b.Property<int>("CharacterTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterDashboardPageId");

                    b.Property<int>("CharacterId");

                    b.Property<int>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LocationX");

                    b.Property<int>("LocationY");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<int>("TileTypeId");

                    b.Property<int>("Width");

                    b.HasKey("CharacterTileId");

                    b.HasIndex("CharacterDashboardPageId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("TileTypeId");

                    b.ToTable("CharacterTiles");
                });

            modelBuilder.Entity("DAL.Models.ConditionOperator", b =>
                {
                    b.Property<int>("ConditionOperatorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsNumeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ConditionOperatorId");

                    b.ToTable("ConditionOperators");
                });

            modelBuilder.Entity("DAL.Models.CustomDice", b =>
                {
                    b.Property<int>("CustomDiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsNumeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RuleSetId");

                    b.HasKey("CustomDiceId");

                    b.HasIndex("RuleSetId");

                    b.ToTable("CustomDices");
                });

            modelBuilder.Entity("DAL.Models.CustomDiceResult", b =>
                {
                    b.Property<int>("CustomDiceResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomDiceId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomDiceResultId");

                    b.HasIndex("CustomDiceId");

                    b.ToTable("CustomDiceResults");
                });

            modelBuilder.Entity("DAL.Models.CustomToggle", b =>
                {
                    b.Property<int>("CustomToggleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterStatToggleId");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ToggleText");

                    b.HasKey("CustomToggleId");

                    b.HasIndex("CharacterStatToggleId");

                    b.ToTable("CustomToggle");
                });

            modelBuilder.Entity("DAL.Models.DefaultDice", b =>
                {
                    b.Property<int>("DefaultDiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DefaultDiceId");

                    b.ToTable("DefaultDices");
                });

            modelBuilder.Entity("DAL.Models.DiceTray", b =>
                {
                    b.Property<int>("DiceTrayId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomDiceId");

                    b.Property<int?>("DefaultDiceId");

                    b.Property<bool>("IsCustomDice");

                    b.Property<bool>("IsDefaultDice");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RuleSetId");

                    b.Property<int>("SortOrder");

                    b.HasKey("DiceTrayId");

                    b.HasIndex("CustomDiceId");

                    b.HasIndex("DefaultDiceId");

                    b.HasIndex("RuleSetId");

                    b.ToTable("DiceTrays");
                });

            modelBuilder.Entity("DAL.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId")
                        .IsRequired();

                    b.Property<string>("Command");

                    b.Property<string>("CommandName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ContainedIn");

                    b.Property<decimal>("ContainerVolumeMax")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("ContainerWeightMax")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("ContainerWeightModifier")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConsumable");

                    b.Property<bool>("IsContainer");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsEquipped");

                    b.Property<bool?>("IsIdentified");

                    b.Property<bool>("IsMagical");

                    b.Property<bool?>("IsVisible");

                    b.Property<string>("ItemCalculation")
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ItemImage")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<int?>("ItemMasterId")
                        .IsRequired();

                    b.Property<string>("ItemStats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metatags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ParentItemId");

                    b.Property<decimal>("PercentReduced")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("Rarity")
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("TotalWeight")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("TotalWeightWithContents")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("ItemId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemMasterId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DAL.Models.ItemAbility", b =>
                {
                    b.Property<int>("AbilityId");

                    b.Property<int>("ItemId");

                    b.Property<bool?>("IsDeleted");

                    b.HasKey("AbilityId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemAbilities");
                });

            modelBuilder.Entity("DAL.Models.ItemCommand", b =>
                {
                    b.Property<int>("ItemCommandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Command");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("ItemId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ItemCommandId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemCommands");
                });

            modelBuilder.Entity("DAL.Models.ItemMaster", b =>
                {
                    b.Property<int>("ItemMasterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Command");

                    b.Property<string>("CommandName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ContainerVolumeMax")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("ContainerWeightMax")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("ContainerWeightModifier")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsConsumable");

                    b.Property<bool>("IsContainer");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsMagical");

                    b.Property<string>("ItemCalculation")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ItemImage")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ItemStats")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemVisibleDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metatags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentItemMasterId");

                    b.Property<decimal>("PercentReduced")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("Rarity")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RuleSetId");

                    b.Property<decimal>("TotalWeightWithContents")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("ItemMasterId");

                    b.HasIndex("ParentItemMasterId");

                    b.HasIndex("RuleSetId");

                    b.ToTable("ItemMasters");
                });

            modelBuilder.Entity("DAL.Models.ItemMasterAbility", b =>
                {
                    b.Property<int>("AbilityId");

                    b.Property<int>("ItemMasterId");

                    b.Property<bool?>("IsDeleted");

                    b.HasKey("AbilityId", "ItemMasterId");

                    b.HasIndex("ItemMasterId");

                    b.ToTable("ItemMaster_Abilities");
                });

            modelBuilder.Entity("DAL.Models.ItemMasterCommand", b =>
                {
                    b.Property<int>("ItemMasterCommandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Command");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("ItemMasterId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ItemMasterCommandId");

                    b.HasIndex("ItemMasterId");

                    b.ToTable("ItemMasterCommands");
                });

            modelBuilder.Entity("DAL.Models.ItemMasterPlayer", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemMasterId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("isVisable");

                    b.HasKey("PlayerId", "ItemMasterId");

                    b.HasIndex("ItemMasterId");

                    b.ToTable("ItemMaster_Players");
                });

            modelBuilder.Entity("DAL.Models.ItemMasterSpell", b =>
                {
                    b.Property<int>("SpellId");

                    b.Property<int>("ItemMasterId");

                    b.Property<bool?>("IsDeleted");

                    b.HasKey("SpellId", "ItemMasterId");

                    b.HasIndex("ItemMasterId");

                    b.ToTable("ItemMaster_Spells");
                });

            modelBuilder.Entity("DAL.Models.ItemSpell", b =>
                {
                    b.Property<int>("SpellId");

                    b.Property<int>("ItemId");

                    b.Property<bool?>("IsDeleted");

                    b.HasKey("SpellId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemSpells");
                });

            modelBuilder.Entity("DAL.Models.PageLastView", b =>
                {
                    b.Property<int>("PageLastViewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PageName")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<string>("ViewType")
                        .IsRequired();

                    b.HasKey("PageLastViewId");

                    b.ToTable("PageLastViews");
                });

            modelBuilder.Entity("DAL.Models.RPGCoreColor", b =>
                {
                    b.Property<int>("RPGCoreColorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RPGCoreColorId");

                    b.ToTable("RPGCoreColors");
                });

            modelBuilder.Entity("DAL.Models.RuleSet", b =>
                {
                    b.Property<int>("RuleSetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CurrencyLabel");

                    b.Property<string>("DefaultDice");

                    b.Property<string>("DistanceLabel");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<bool>("IsAbilityEnabled");

                    b.Property<bool>("IsAllowSharing");

                    b.Property<bool>("IsCoreRuleset");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsItemEnabled");

                    b.Property<bool>("IsSpellEnabled");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ParentRuleSetId");

                    b.Property<string>("RuleSetDesc")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4000);

                    b.Property<short?>("RuleSetGenreId");

                    b.Property<string>("RuleSetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("ShareCode")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("SortOrder");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<string>("VolumeLabel");

                    b.Property<string>("WeightLabel");

                    b.Property<bool>("isActive");

                    b.HasKey("RuleSetId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentRuleSetId");

                    b.HasIndex("RuleSetGenreId");

                    b.HasIndex("ShareCode")
                        .IsUnique()
                        .HasFilter("[ShareCode] IS NOT NULL");

                    b.ToTable("RuleSets");
                });

            modelBuilder.Entity("DAL.Models.RuleSetGenre", b =>
                {
                    b.Property<short>("RuleSetGenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(100);

                    b.HasKey("RuleSetGenreId");

                    b.ToTable("RuleSetGenres");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetCharacterStatTile", b =>
                {
                    b.Property<int>("CharacterStatTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterStatId");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("RulesetTileId");

                    b.Property<int>("Shape");

                    b.Property<bool>("ShowTitle");

                    b.Property<int>("SortOrder");

                    b.Property<string>("bodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("bodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("titleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("titleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CharacterStatTileId");

                    b.HasIndex("CharacterStatId");

                    b.HasIndex("RulesetTileId")
                        .IsUnique()
                        .HasFilter("[RulesetTileId] IS NOT NULL");

                    b.ToTable("RulesetCharacterStatTiles");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetCommandTile", b =>
                {
                    b.Property<int>("CommandTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Command")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("RulesetTileId");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CommandTileId");

                    b.HasIndex("RulesetTileId")
                        .IsUnique()
                        .HasFilter("[RulesetTileId] IS NOT NULL");

                    b.ToTable("RulesetCommandTiles");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetCounterTile", b =>
                {
                    b.Property<int>("CounterTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CurrentValue");

                    b.Property<int>("DefaultValue");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Maximum");

                    b.Property<int?>("Minimum");

                    b.Property<int?>("RulesetTileId");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<int>("Step");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CounterTileId");

                    b.HasIndex("RulesetTileId")
                        .IsUnique()
                        .HasFilter("[RulesetTileId] IS NOT NULL");

                    b.ToTable("RulesetCounterTiles");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetDashboardLayout", b =>
                {
                    b.Property<int>("RulesetDashboardLayoutId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultPageId");

                    b.Property<bool>("IsDefaultLayout");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LayoutHeight");

                    b.Property<int>("LayoutWidth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RulesetId")
                        .IsRequired();

                    b.Property<int>("SortOrder");

                    b.HasKey("RulesetDashboardLayoutId");

                    b.ToTable("RulesetDashboardLayouts");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetDashboardPage", b =>
                {
                    b.Property<int>("RulesetDashboardPageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ContainerHeight");

                    b.Property<int>("ContainerWidth");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RulesetDashboardLayoutId")
                        .IsRequired();

                    b.Property<int?>("RulesetId")
                        .IsRequired();

                    b.Property<int>("SortOrder");

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RulesetDashboardPageId");

                    b.HasIndex("RulesetDashboardLayoutId");

                    b.HasIndex("RulesetId");

                    b.ToTable("RulesetDashboardPages");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetImageTile", b =>
                {
                    b.Property<int>("ImageTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("RulesetTileId");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ImageTileId");

                    b.HasIndex("RulesetTileId")
                        .IsUnique()
                        .HasFilter("[RulesetTileId] IS NOT NULL");

                    b.ToTable("RulesetImageTiles");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetNoteTile", b =>
                {
                    b.Property<int>("NoteTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("RulesetTileId");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("NoteTileId");

                    b.HasIndex("RulesetTileId")
                        .IsUnique()
                        .HasFilter("[RulesetTileId] IS NOT NULL");

                    b.ToTable("RulesetNoteTiles");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetTextTile", b =>
                {
                    b.Property<int>("TextTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("RulesetTileId");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("TextTileId");

                    b.HasIndex("RulesetTileId")
                        .IsUnique()
                        .HasFilter("[RulesetTileId] IS NOT NULL");

                    b.ToTable("RulesetTextTiles");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetTile", b =>
                {
                    b.Property<int>("RulesetTileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LocationX");

                    b.Property<int>("LocationY");

                    b.Property<int>("RulesetDashboardPageId");

                    b.Property<int>("RulesetId");

                    b.Property<int>("Shape");

                    b.Property<int>("SortOrder");

                    b.Property<int>("TileTypeId");

                    b.Property<int>("Width");

                    b.HasKey("RulesetTileId");

                    b.HasIndex("RulesetDashboardPageId");

                    b.HasIndex("RulesetId");

                    b.HasIndex("TileTypeId");

                    b.ToTable("RulesetTiles");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetTileColor", b =>
                {
                    b.Property<int>("TileColorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RulesetTileId");

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserId");

                    b.HasKey("TileColorId");

                    b.HasIndex("UserId");

                    b.ToTable("RulesetTileColors");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetTileConfig", b =>
                {
                    b.Property<int>("TileConfigId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Col");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Payload");

                    b.Property<int>("Row");

                    b.Property<int>("RulesetTileId");

                    b.Property<int>("SizeX");

                    b.Property<int>("SizeY");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UniqueId");

                    b.HasKey("TileConfigId");

                    b.HasIndex("RulesetTileId")
                        .IsUnique();

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasFilter("[UniqueId] IS NOT NULL");

                    b.ToTable("RulesetTileConfig");
                });

            modelBuilder.Entity("DAL.Models.Spell", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CastingTime");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Command");

                    b.Property<string>("CommandName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EffectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HitEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsMaterialComponent");

                    b.Property<bool>("IsSomaticComponent");

                    b.Property<bool>("IsVerbalComponent");

                    b.Property<string>("Levels")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MaterialComponent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Memorized");

                    b.Property<string>("Metatags")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("MissEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ParentSpellId");

                    b.Property<int>("RuleSetId");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("ShouldCast");

                    b.Property<string>("Stats");

                    b.HasKey("SpellId");

                    b.HasIndex("ParentSpellId");

                    b.HasIndex("RuleSetId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("DAL.Models.SpellCommand", b =>
                {
                    b.Property<int>("SpellCommandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Command");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SpellId");

                    b.HasKey("SpellCommandId");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellCommands");
                });

            modelBuilder.Entity("DAL.Models.TileColor", b =>
                {
                    b.Property<int>("TileColorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CharacterTileId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TitleBgColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TitleTextColor")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserId");

                    b.HasKey("TileColorId");

                    b.HasIndex("UserId");

                    b.ToTable("TileColors");
                });

            modelBuilder.Entity("DAL.Models.TileConfig", b =>
                {
                    b.Property<int>("TileConfigId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterTileId");

                    b.Property<int>("Col");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Payload");

                    b.Property<int>("Row");

                    b.Property<int>("SizeX");

                    b.Property<int>("SizeY");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UniqueId");

                    b.HasKey("TileConfigId");

                    b.HasIndex("CharacterTileId")
                        .IsUnique();

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasFilter("[UniqueId] IS NOT NULL");

                    b.ToTable("TileConfig");
                });

            modelBuilder.Entity("DAL.Models.TileType", b =>
                {
                    b.Property<int>("TileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("TileTypeId");

                    b.ToTable("TileTypes");
                });

            modelBuilder.Entity("DAL.Models.UserRuleSet", b =>
                {
                    b.Property<int>("RuleSetId");

                    b.Property<string>("UserId");

                    b.HasKey("RuleSetId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Users_RuleSets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<string>("ClientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("ConsentType");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Permissions");

                    b.Property<string>("PostLogoutRedirectUris");

                    b.Property<string>("Properties");

                    b.Property<string>("RedirectUris");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Properties");

                    b.Property<string>("Scopes");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Properties");

                    b.Property<string>("Resources");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("AuthorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset?>("CreationDate");

                    b.Property<DateTimeOffset?>("ExpirationDate");

                    b.Property<string>("Payload");

                    b.Property<string>("Properties");

                    b.Property<string>("ReferenceId");

                    b.Property<string>("Status");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("DAL.Models.Ability", b =>
                {
                    b.HasOne("DAL.Models.Ability", "Ability1")
                        .WithMany("Abilities1")
                        .HasForeignKey("ParentAbilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.RuleSet", "RuleSet")
                        .WithMany("Abilities")
                        .HasForeignKey("RuleSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.AbilityCommand", b =>
                {
                    b.HasOne("DAL.Models.Ability", "Abilitiy")
                        .WithMany("AbilityCommand")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Character", b =>
                {
                    b.HasOne("DAL.Models.Character", "Character1")
                        .WithMany("Characters1")
                        .HasForeignKey("ParentCharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.RuleSet", "RuleSet")
                        .WithMany("Characters")
                        .HasForeignKey("RuleSetId")
                        .HasConstraintName("FK_Characters_RuleSets")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.ApplicationUser", "AspNetUser")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Characters_AspNetUsers")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DAL.Models.CharacterAbility", b =>
                {
                    b.HasOne("DAL.Models.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Character", "Character")
                        .WithMany("CharacterAbilities")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharacterCommand", b =>
                {
                    b.HasOne("DAL.Models.Character", "character")
                        .WithMany("CharacterCommands")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharacterCustomToggle", b =>
                {
                    b.HasOne("DAL.Models.CharactersCharacterStat", "CharactersCharacterStat")
                        .WithMany("CharacterCustomToggles")
                        .HasForeignKey("CharactersCharacterStatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharacterDashboardPage", b =>
                {
                    b.HasOne("DAL.Models.CharacterDashboardLayout", "Layout")
                        .WithMany("CharacterDashboardPages")
                        .HasForeignKey("CharacterDashboardLayoutId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Character", "Character")
                        .WithMany("CharacterDashboardPages")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharactersCharacterStat", b =>
                {
                    b.HasOne("DAL.Models.Character", "Character")
                        .WithMany("CharactersCharacterStats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.CharacterStat", "CharacterStat")
                        .WithMany("CharactersCharacterStats")
                        .HasForeignKey("CharacterStatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharacterSpell", b =>
                {
                    b.HasOne("DAL.Models.Character", "Character")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharacterStat", b =>
                {
                    b.HasOne("DAL.Models.CharacterStatType", "CharacterStatType")
                        .WithMany("CharacterStats")
                        .HasForeignKey("CharacterStatTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.ApplicationUser", "AspNetUser1")
                        .WithMany("CharacterStat1")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.ApplicationUser", "AspNetUser2")
                        .WithMany("CharacterStat2")
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("DAL.Models.ApplicationUser", "AspNetUser")
                        .WithMany("CharacterStat")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.CharacterStat", "CharacterStat1")
                        .WithMany("CharacterStats1")
                        .HasForeignKey("ParentCharacterStatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.RuleSet", "RuleSet")
                        .WithMany("CharacterStats")
                        .HasForeignKey("RuleSetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DAL.Models.CharacterStatCalc", b =>
                {
                    b.HasOne("DAL.Models.CharacterStat", "CharacterStat")
                        .WithMany("CharacterStatCalcs")
                        .HasForeignKey("CharacterStatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharacterStatChoice", b =>
                {
                    b.HasOne("DAL.Models.CharacterStat", "CharacterStat")
                        .WithMany("CharacterStatChoices")
                        .HasForeignKey("CharacterStatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharacterStatCombo", b =>
                {
                    b.HasOne("DAL.Models.CharacterStat", "CharacterStat")
                        .WithOne("CharacterStatCombos")
                        .HasForeignKey("DAL.Models.CharacterStatCombo", "CharacterStatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharacterStatCondition", b =>
                {
                    b.HasOne("DAL.Models.CharacterStat", "CharacterStat")
                        .WithMany("CharacterStatConditions")
                        .HasForeignKey("CharacterStatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.ConditionOperator", "ConditionOperator")
                        .WithMany()
                        .HasForeignKey("ConditionOperatorID");
                });

            modelBuilder.Entity("DAL.Models.CharacterStatDefaultValue", b =>
                {
                    b.HasOne("DAL.Models.CharacterStat", "CharacterStat")
                        .WithMany("CharacterStatDefaultValues")
                        .HasForeignKey("CharacterStatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharacterStatToggle", b =>
                {
                    b.HasOne("DAL.Models.CharacterStat", "CharacterStat")
                        .WithOne("CharacterStatToggles")
                        .HasForeignKey("DAL.Models.CharacterStatToggle", "CharacterStatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterCharacterStatTile", b =>
                {
                    b.HasOne("DAL.Models.CharacterTileModels.CharacterTile", "CharacterTile")
                        .WithOne("CharacterStatTiles")
                        .HasForeignKey("DAL.Models.CharacterTileModels.CharacterCharacterStatTile", "CharacterTileId");

                    b.HasOne("DAL.Models.CharactersCharacterStat", "CharactersCharacterStat")
                        .WithMany("CharacterStatTiles")
                        .HasForeignKey("CharactersCharacterStatId");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterCommandTile", b =>
                {
                    b.HasOne("DAL.Models.CharacterTileModels.CharacterTile", "CharacterTile")
                        .WithOne("CommandTiles")
                        .HasForeignKey("DAL.Models.CharacterTileModels.CharacterCommandTile", "CharacterTileId");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterCounterTile", b =>
                {
                    b.HasOne("DAL.Models.CharacterTileModels.CharacterTile", "CharacterTile")
                        .WithOne("CounterTiles")
                        .HasForeignKey("DAL.Models.CharacterTileModels.CharacterCounterTile", "CharacterTileId");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterExecuteTile", b =>
                {
                    b.HasOne("DAL.Models.CharacterAbility", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId");

                    b.HasOne("DAL.Models.CharacterTileModels.CharacterTile", "CharacterTile")
                        .WithOne("ExecuteTiles")
                        .HasForeignKey("DAL.Models.CharacterTileModels.CharacterExecuteTile", "CharacterTileId");

                    b.HasOne("DAL.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("DAL.Models.CharacterSpell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterImageTile", b =>
                {
                    b.HasOne("DAL.Models.CharacterTileModels.CharacterTile", "CharacterTile")
                        .WithOne("ImageTiles")
                        .HasForeignKey("DAL.Models.CharacterTileModels.CharacterImageTile", "CharacterTileId");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterLinkTile", b =>
                {
                    b.HasOne("DAL.Models.CharacterAbility", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId");

                    b.HasOne("DAL.Models.CharacterTileModels.CharacterTile", "CharacterTile")
                        .WithOne("LinkTiles")
                        .HasForeignKey("DAL.Models.CharacterTileModels.CharacterLinkTile", "CharacterTileId");

                    b.HasOne("DAL.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("DAL.Models.CharacterSpell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterNoteTile", b =>
                {
                    b.HasOne("DAL.Models.CharacterTileModels.CharacterTile", "CharacterTile")
                        .WithOne("NoteTiles")
                        .HasForeignKey("DAL.Models.CharacterTileModels.CharacterNoteTile", "CharacterTileId");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterTextTile", b =>
                {
                    b.HasOne("DAL.Models.CharacterTileModels.CharacterTile", "CharacterTile")
                        .WithOne("TextTiles")
                        .HasForeignKey("DAL.Models.CharacterTileModels.CharacterTextTile", "CharacterTileId");
                });

            modelBuilder.Entity("DAL.Models.CharacterTileModels.CharacterTile", b =>
                {
                    b.HasOne("DAL.Models.CharacterDashboardPage", "CharacterDashboardPage")
                        .WithMany("Tiles")
                        .HasForeignKey("CharacterDashboardPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Character", "Character")
                        .WithMany("CharacterTiles")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.TileType", "TileType")
                        .WithMany("Tiles")
                        .HasForeignKey("TileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CustomDice", b =>
                {
                    b.HasOne("DAL.Models.RuleSet", "RuleSet")
                        .WithMany()
                        .HasForeignKey("RuleSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CustomDiceResult", b =>
                {
                    b.HasOne("DAL.Models.CustomDice", "CustomDice")
                        .WithMany("CustomDiceResults")
                        .HasForeignKey("CustomDiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.CustomToggle", b =>
                {
                    b.HasOne("DAL.Models.CharacterStatToggle", "CharacterStatToggle")
                        .WithMany("CustomToggles")
                        .HasForeignKey("CharacterStatToggleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.DiceTray", b =>
                {
                    b.HasOne("DAL.Models.CustomDice", "CustomDice")
                        .WithMany()
                        .HasForeignKey("CustomDiceId");

                    b.HasOne("DAL.Models.DefaultDice", "DefaultDice")
                        .WithMany()
                        .HasForeignKey("DefaultDiceId");

                    b.HasOne("DAL.Models.RuleSet", "RuleSet")
                        .WithMany()
                        .HasForeignKey("RuleSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Item", b =>
                {
                    b.HasOne("DAL.Models.Character", "Character")
                        .WithMany("Items")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.ItemMaster", "ItemMaster")
                        .WithMany("Items")
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.ItemAbility", b =>
                {
                    b.HasOne("DAL.Models.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Item", "Item")
                        .WithMany("ItemAbilities")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.ItemCommand", b =>
                {
                    b.HasOne("DAL.Models.Item", "Item")
                        .WithMany("ItemCommandVM")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.ItemMaster", b =>
                {
                    b.HasOne("DAL.Models.ItemMaster", "ItemMaster1")
                        .WithMany("ItemMasters1")
                        .HasForeignKey("ParentItemMasterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.RuleSet", "RuleSet")
                        .WithMany("ItemMasters")
                        .HasForeignKey("RuleSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.ItemMasterAbility", b =>
                {
                    b.HasOne("DAL.Models.Ability", "Abilitiy")
                        .WithMany("ItemMasterAbilities")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.ItemMaster", "ItemMaster")
                        .WithMany("ItemMasterAbilities")
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.ItemMasterCommand", b =>
                {
                    b.HasOne("DAL.Models.ItemMaster", "ItemMaster")
                        .WithMany("ItemMasterCommand")
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.ItemMasterPlayer", b =>
                {
                    b.HasOne("DAL.Models.ItemMaster", "ItemMaster")
                        .WithMany("ItemMasterPlayers")
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.ApplicationUser", "Player")
                        .WithMany("ItemMasterPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DAL.Models.ItemMasterSpell", b =>
                {
                    b.HasOne("DAL.Models.ItemMaster", "ItemMaster")
                        .WithMany("ItemMasterSpell")
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Spell", "Spell")
                        .WithMany("ItemMasterSpells")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.ItemSpell", b =>
                {
                    b.HasOne("DAL.Models.Item", "Item")
                        .WithMany("ItemSpells")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.RuleSet", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "AspNetUser1")
                        .WithMany("RuleSets1")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.ApplicationUser", "AspNetUser2")
                        .WithMany("RuleSets2")
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("DAL.Models.ApplicationUser", "AspNetUser")
                        .WithMany("RuleSets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.RuleSet", "RuleSet1")
                        .WithMany("RuleSets1")
                        .HasForeignKey("ParentRuleSetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.RuleSetGenre", "RuleSetGenre")
                        .WithMany("RuleSets")
                        .HasForeignKey("RuleSetGenreId");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetCharacterStatTile", b =>
                {
                    b.HasOne("DAL.Models.CharacterStat", "CharacterStat")
                        .WithMany()
                        .HasForeignKey("CharacterStatId");

                    b.HasOne("DAL.Models.RulesetTileModels.RulesetTile", "RulesetTile")
                        .WithOne("CharacterStatTiles")
                        .HasForeignKey("DAL.Models.RulesetTileModels.RulesetCharacterStatTile", "RulesetTileId");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetCommandTile", b =>
                {
                    b.HasOne("DAL.Models.RulesetTileModels.RulesetTile", "RulesetTile")
                        .WithOne("CommandTiles")
                        .HasForeignKey("DAL.Models.RulesetTileModels.RulesetCommandTile", "RulesetTileId");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetCounterTile", b =>
                {
                    b.HasOne("DAL.Models.RulesetTileModels.RulesetTile", "RulesetTile")
                        .WithOne("CounterTiles")
                        .HasForeignKey("DAL.Models.RulesetTileModels.RulesetCounterTile", "RulesetTileId");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetDashboardPage", b =>
                {
                    b.HasOne("DAL.Models.RulesetTileModels.RulesetDashboardLayout", "Layout")
                        .WithMany("RulesetDashboardPages")
                        .HasForeignKey("RulesetDashboardLayoutId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.RuleSet", "Ruleset")
                        .WithMany()
                        .HasForeignKey("RulesetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetImageTile", b =>
                {
                    b.HasOne("DAL.Models.RulesetTileModels.RulesetTile", "RulesetTile")
                        .WithOne("ImageTiles")
                        .HasForeignKey("DAL.Models.RulesetTileModels.RulesetImageTile", "RulesetTileId");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetNoteTile", b =>
                {
                    b.HasOne("DAL.Models.RulesetTileModels.RulesetTile", "RulesetTile")
                        .WithOne("NoteTiles")
                        .HasForeignKey("DAL.Models.RulesetTileModels.RulesetNoteTile", "RulesetTileId");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetTextTile", b =>
                {
                    b.HasOne("DAL.Models.RulesetTileModels.RulesetTile", "RulesetTile")
                        .WithOne("TextTiles")
                        .HasForeignKey("DAL.Models.RulesetTileModels.RulesetTextTile", "RulesetTileId");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetTile", b =>
                {
                    b.HasOne("DAL.Models.RulesetTileModels.RulesetDashboardPage", "RulesetDashboardPage")
                        .WithMany("Tiles")
                        .HasForeignKey("RulesetDashboardPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.RuleSet", "Ruleset")
                        .WithMany()
                        .HasForeignKey("RulesetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.TileType", "TileType")
                        .WithMany()
                        .HasForeignKey("TileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetTileColor", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Models.RulesetTileModels.RulesetTileConfig", b =>
                {
                    b.HasOne("DAL.Models.RulesetTileModels.RulesetTile", "RulesetTile")
                        .WithOne("Config")
                        .HasForeignKey("DAL.Models.RulesetTileModels.RulesetTileConfig", "RulesetTileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Spell", b =>
                {
                    b.HasOne("DAL.Models.Spell", "Spell1")
                        .WithMany("Spells1")
                        .HasForeignKey("ParentSpellId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DAL.Models.RuleSet", "RuleSet")
                        .WithMany("Spells")
                        .HasForeignKey("RuleSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.SpellCommand", b =>
                {
                    b.HasOne("DAL.Models.Spell", "Spell")
                        .WithMany("SpellCommand")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.TileColor", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Models.TileConfig", b =>
                {
                    b.HasOne("DAL.Models.CharacterTileModels.CharacterTile", "CharacterTile")
                        .WithOne("Config")
                        .HasForeignKey("DAL.Models.TileConfig", "CharacterTileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.UserRuleSet", b =>
                {
                    b.HasOne("DAL.Models.RuleSet", "RuleSet")
                        .WithMany("UserRuleSets")
                        .HasForeignKey("RuleSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.ApplicationUser", "AppUser")
                        .WithMany("UserRuleSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationRole")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.Models.OpenIddictAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");
                });
#pragma warning restore 612, 618
        }
    }
}
