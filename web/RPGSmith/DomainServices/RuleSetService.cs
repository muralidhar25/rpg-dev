using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using RPGSmith.Data;
using RPGSmith.Data.Models;
using RPGSmith.Web.ViewModels;
using RPGSmith.Web;
using RPGSmith.Web.Utilities;
using System.Xml;
using RPGSmith.Utilities.RPGSmithTypes;
using RPGSmith.Utilities;
using RPGSmith.ViewModels;
using System.IO;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using Ionic.Zip;


namespace RPGSmith.DomainServices
{
    public class RuleSetService
    {
        ServiceResponseModel _serviceResponseModel = new ServiceResponseModel();
        private readonly RPGSmithContext _context;
        #region RuleSet
        public RuleSetService()
        {
            RPGSmithContext dbContext = new RPGSmithContext();
            _context = dbContext;
        }
        public IEnumerable<RuleSet> GetRuleSetsByUserID(string UserID)
        {
            if (UserID != null)
            {
                IEnumerable<RuleSet> _ruleset = _context.RuleSets.Where(x => x.UserId == UserID).ToList();
                return _ruleset;
            }
            return null;
        }
        public List<RuleSetProperty> GetRuleSetPropertyByRuleSetId(int? RuleSetId)
        {
            List<RuleSetProperty> _ruleSetProperties = new List<RuleSetProperty>();
            var _dataQueryRuleSetProperty = (from rulesetprop in _context.RulesetProperties
                                             join rpgType in _context.RPGSmithTypes on rulesetprop.TypeId equals rpgType.TypeID
                                             join rulesetpropval in _context.RulesetPropertyValues on rulesetprop.PropertyId equals rulesetpropval.PropertyId into ps
                                             from rulesetpropval in ps.DefaultIfEmpty()
                                             where rulesetprop.IsActive == 1 && rulesetpropval.RulesetID == RuleSetId
                                             select new { Id = rulesetprop.PropertyId, Name = rulesetprop.Name, TypeId = rulesetprop.TypeId, Units = rpgType.Units, unitvalue = rulesetpropval.Value, RuleSetPropertyValueRuleSetId = rulesetpropval.RulesetID }).ToList();
            if (_dataQueryRuleSetProperty.Count == 0) return _ruleSetProperties;
            foreach (var val in _dataQueryRuleSetProperty)
            {
                RuleSetProperty _ruleSetProperty = new RuleSetProperty();
                _ruleSetProperty.Units = new Utilities.RPGSmithTypes.Units();
                _ruleSetProperty.Id = val.Id;
                _ruleSetProperty.Name = val.Name;
                _ruleSetProperty.TypeId = val.TypeId;
                _ruleSetProperty.Value = Utility.ConvertTypeValueXMLtoClass(val.TypeId, val.unitvalue, val.Units);
                _ruleSetProperty.Units = Utility.ConvertUnitsXMLtoClass(val.TypeId, val.Units, val.unitvalue);
                _ruleSetProperties.Add(_ruleSetProperty);

            }
            return _ruleSetProperties;
        }
        public List<RuleSetProperty> GetRuleSetPropertyByRuleSetId2(int? RuleSetId)
        {
            List<RuleSetProperty> _ruleSetProperties = new List<RuleSetProperty>();
            var _dataQueryRuleSetProperty = (from rulesetprop in _context.RulesetProperties
                                             join rpgType in _context.RPGSmithTypes on rulesetprop.TypeId equals rpgType.TypeID
                                             join rulesetpropval in _context.RulesetPropertyValues on rulesetprop.PropertyId equals rulesetpropval.PropertyId into ps
                                             from rulesetpropval in ps.DefaultIfEmpty()
                                             where rulesetprop.IsActive == 1 && rulesetpropval.RulesetID == RuleSetId
                                             select new { Id = rulesetprop.PropertyId, Name = rulesetprop.Name, TypeId = rulesetprop.TypeId, Units = rpgType.Units, unitvalue = rulesetpropval.Value, RuleSetPropertyValueRuleSetId = rulesetpropval.RulesetID }).ToList();

            foreach (var val in _dataQueryRuleSetProperty)
            {

                RuleSetProperty _ruleSetProperty = new RuleSetProperty();
                _ruleSetProperty.Units = new Utilities.RPGSmithTypes.Units();
                _ruleSetProperty.Id = val.Id;
                _ruleSetProperty.Name = val.Name;
                _ruleSetProperty.TypeId = val.TypeId;
                _ruleSetProperty.Value = Utility.ConvertTypeValueXMLtoClass(val.TypeId, val.unitvalue, val.Units);
                _ruleSetProperty.Units = Utility.ConvertUnitsXMLtoClass(val.TypeId, val.Units, val.unitvalue);
                _ruleSetProperties.Add(_ruleSetProperty);

            }
            if (_ruleSetProperties.Count == 0)
            {
                var _DefaultdataQueryRuleSetProperty = (from rulesetprop in _context.RulesetProperties
                                                        join rpgType in _context.RPGSmithTypes
                                                        on rulesetprop.TypeId equals rpgType.TypeID
                                                        where rulesetprop.IsActive == 1
                                                        select new { Id = rulesetprop.PropertyId, Name = rulesetprop.Name, TypeId = rulesetprop.TypeId, Units = rpgType.Units, Mandatory = rulesetprop.Mandatory }).ToList();

                foreach (var val in _DefaultdataQueryRuleSetProperty)
                {
                    RuleSetProperty _ruleSetProperty = new RuleSetProperty();

                    _ruleSetProperty.Id = val.Id;
                    _ruleSetProperty.Name = val.Name;
                    _ruleSetProperty.TypeId = val.TypeId;
                    _ruleSetProperty.IsMandotary = val.Mandatory == true ? val.Mandatory : false;
                    _ruleSetProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                    var selectedUnit = String.Empty;
                    if (val.Units != null && val.Units != "")
                    {
                        _ruleSetProperty.Units = Utility.ConvertUnitsXMLtoClass(val.TypeId, val.Units, selectedUnit);
                    }
                    _ruleSetProperties.Add(_ruleSetProperty);
                }
            }
            return _ruleSetProperties;

        }
        public RuleSetViewModel GetNewRuleset(string UserID)
        {
            RuleSetViewModel _ruleSetViewModel = new RuleSetViewModel();

            List<RuleSetProperty> _ruleSetProperties = new List<RuleSetProperty>();

            var _dataQueryRuleSetProperty = (from rulesetprop in _context.RulesetProperties
                                             join rpgType in _context.RPGSmithTypes
                                             on rulesetprop.TypeId equals rpgType.TypeID
                                             where rulesetprop.IsActive == 1
                                             select new { Id = rulesetprop.PropertyId, Name = rulesetprop.Name, TypeId = rulesetprop.TypeId, Units = rpgType.Units, Mandatory = rulesetprop.Mandatory }).ToList();

            foreach (var val in _dataQueryRuleSetProperty)
            {
                RuleSetProperty _ruleSetProperty = new RuleSetProperty();

                _ruleSetProperty.Id = val.Id;
                _ruleSetProperty.Name = val.Name;
                _ruleSetProperty.TypeId = val.TypeId;
                _ruleSetProperty.IsMandotary = val.Mandatory == true ? val.Mandatory : false;
                _ruleSetProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                var selectedUnit = String.Empty;
                if (val.Units != null && val.Units != "")
                {
                    _ruleSetProperty.Units = Utility.ConvertUnitsXMLtoClass(val.TypeId, val.Units, selectedUnit);
                }
                _ruleSetProperties.Add(_ruleSetProperty);
            }

            _ruleSetViewModel.Rulesetproperty = _ruleSetProperties;

            Items _ruleSetItem = new Items();
            _ruleSetItem.ItemProperties = new List<ItemProperties>();

            var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 1 && x.IsActive == true && x.IsRuleSet == true).Select(
             x => new
             {
                 Id = x.Id,
                 Name = x.Name,
                 Description = x.Description,
                 TypeId = x.TypeId,
                 Metadata = x.Metadata,
                 Mandatory = x.Mandatory,
                 IsFormula = x.IsFormula,
                 Formula = x.Formula,

             }
             ).ToList();

            var _dataQueryTileTypes = _context.TileTypes.ToList();

            //Setting Tile View Model and Tile Types in Item Lavel
            for (var i = 0; i < _dataQueryTileTypes.Count(); i++)
            {
                _ruleSetViewModel.RuleSetMetaData.TileTypes.Add(new ViewModels.TileTypes()
                {
                    TileId = _dataQueryTileTypes[i].TileTypeId,
                    TileType = _dataQueryTileTypes[i].TileTypeName,
                    Value = Utility.GetTileTypeClassMetaData(_dataQueryTileTypes[i].TileTypeId)
                });
            }
            _ruleSetViewModel.RuleSetMetaData.Tile.Styles = new Style();
            foreach (var val in _dataQuery)
            {
                ItemProperties _ruleSetItemProperty = new ItemProperties();



                _ruleSetItemProperty.Id = val.Id;
                _ruleSetItemProperty.Name = val.Name;
                _ruleSetItemProperty.Description = val.Description;
                _ruleSetItemProperty.TypeId = val.TypeId;
                _ruleSetItemProperty.IsStatic = true;
                _ruleSetItemProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
                if (val.Metadata != null && val.Metadata != "")
                {
                    _ruleSetItemProperty.Value = Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata);
                }
                else
                {
                    _ruleSetItemProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                    if (val.Formula != null && val.Formula != "")
                    {
                        _ruleSetItemProperty.Value.Calculation.formulae = val.Formula;
                    }
                }
              
                _ruleSetViewModel.RuleSetMetaData.ItemProperties.Add(_ruleSetItemProperty);


            }

            _ruleSetViewModel.Items = new List<Items>();
          
            Spells _ruleSetSpell = new Spells();
            _ruleSetSpell.SpellProperties = new List<SpellProperties>();

            _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 2).Select(
              x => new
              {
                  Id = x.Id,
                  Name = x.Name,
                  Description = x.Description,
                  TypeId = x.TypeId,
                  Metadata = x.Metadata,
                  Mandatory = x.Mandatory,
                  IsFormula = x.IsFormula,
                  Formula = x.Formula

              }
              ).ToList();

            foreach (var val in _dataQuery)
            {
                SpellProperties _ruleSetSpellProperty = new SpellProperties();
                _ruleSetSpellProperty.Id = val.Id;
                _ruleSetSpellProperty.Name = val.Name;
                _ruleSetSpellProperty.Description = val.Description;
                _ruleSetSpellProperty.TypeId = val.TypeId;
                _ruleSetSpellProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
                if (val.Metadata != null && val.Metadata != "")
                {
                    _ruleSetSpellProperty.Value = Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata);
                }
                else
                {
                    _ruleSetSpellProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                }
                _ruleSetViewModel.RuleSetMetaData.SpellProperties.Add(_ruleSetSpellProperty);
            }

            _ruleSetViewModel.Spells = new List<Spells>();
          
            Abilities _ruleSetAbility = new Abilities();
            _ruleSetAbility.AbilityProperties = new List<AbilityProperties>();

            _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 3).Select(
              x => new
              {
                  Id = x.Id,
                  Name = x.Name,
                  Description = x.Description,
                  TypeId = x.TypeId,
                  Metadata = x.Metadata,
                  Mandatory = x.Mandatory,
                  IsFormula = x.IsFormula,
                  Formula = x.Formula
              }
              ).ToList();

            foreach (var val in _dataQuery)
            {
                AbilityProperties _ruleSetAbilityProperty = new AbilityProperties();
                _ruleSetAbilityProperty.Id = val.Id;
                _ruleSetAbilityProperty.Name = val.Name;
                _ruleSetAbilityProperty.Description = val.Description;
                _ruleSetAbilityProperty.TypeId = val.TypeId;
                _ruleSetAbilityProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
                if (val.Metadata != null && val.Metadata != "")
                {
                    _ruleSetAbilityProperty.Value = Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata);
                }
                else
                {
                    _ruleSetAbilityProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                }
                _ruleSetViewModel.RuleSetMetaData.AbilityProperties.Add(_ruleSetAbilityProperty);
            }

            _ruleSetViewModel.Abilities = new List<Abilities>();

            _ruleSetViewModel.RuleSetMetaData.Corestats = new Corestats();
            var _tempCustomeTypeValue = new CustomTypes();
            _tempCustomeTypeValue = Utility.GetTypeClassMetaData(16);
            _ruleSetViewModel.RuleSetMetaData.Corestats.Value = _tempCustomeTypeValue;
            _ruleSetViewModel.Rulesetproperty = _ruleSetProperties;
            _ruleSetViewModel.UserId = UserID;
          
            return _ruleSetViewModel;
        }
        public IEnumerable<RuleSetProperty> GetRuleSetProperty()
        {
            RuleSetViewModel viewmodel = new RuleSetViewModel();
            var Rulesetproperties = _context.RulesetProperties.Where(x => x.IsActive == 1).ToList();
            foreach (var property in Rulesetproperties)
            {
                viewmodel.Rulesetproperty.Add(new RuleSetProperty
                {
                    Id = property.PropertyId,
                    Name = property.Name,
                    IsMandotary = property.Mandatory
                });

            }
            return viewmodel.Rulesetproperty;
        }
        public ServiceResponseModel AddOrCopyRuleset(RuleSetViewModel RulesetModel, List<HttpPostedFileBase> ClientImages, string userId, bool isCopy)
        {
            try
            {
                Hashtable clientImagesPath = new Hashtable();

                List<string> clientImagesPathForDelete = new List<string>();

                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForNewRuleset(RulesetModel, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        RuleSet _ruleSet = new RuleSet();
                        RulesetPropertyValue _rulesetPropertyValue;
                        CoreStat _coreStat;
                        RuleSetItemsContent _ruleSetItemsContent;

                        //_ruleSet.RulesetID = RulesetModel.Id;
                        _ruleSet.UserId = RulesetModel.UserId;
                        _ruleSet.Name = RulesetModel.Name;
                        _ruleSet.Authored = Convert.ToDateTime(DateTime.UtcNow.ToString());
                        _ruleSet.Edited = Convert.ToDateTime(DateTime.UtcNow.ToString());

                        var message = string.Empty;
                        //For null Exception 
                        RulesetModel.Rulesetproperty = RulesetModel.Rulesetproperty == null ? new List<RuleSetProperty>() : RulesetModel.Rulesetproperty;
                        RulesetModel.Corestats = RulesetModel.Corestats == null ? new List<Corestats>() : RulesetModel.Corestats;
                        RulesetModel.Items = RulesetModel.Items == null ? new List<Items>() : RulesetModel.Items;
                        RulesetModel.Spells = RulesetModel.Spells == null ? new List<Spells>() : RulesetModel.Spells;
                        RulesetModel.Abilities = RulesetModel.Abilities == null ? new List<Abilities>() : RulesetModel.Abilities;
                        var virtualPathForRuleSet = string.Empty;
                        foreach (var _rulesetproperty in RulesetModel.Rulesetproperty)
                        {

                            CustomTypes _temprulesetPropertyValueForImagePath = _rulesetproperty.Value;
                            SetPathforClientImages(1, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                            _rulesetproperty.Value = _temprulesetPropertyValueForImagePath;

                            XmlDocument _temprulesetPropertyValue = Utility.ConvertRuleSetPropertyValueClasstoXML(_rulesetproperty.TypeId, _rulesetproperty.Value, _rulesetproperty.Units);
                            if (_temprulesetPropertyValue != null)
                            {
                                _rulesetPropertyValue = new RulesetPropertyValue();
                                _rulesetPropertyValue.RulesetID = _ruleSet.RulesetID;
                                _rulesetPropertyValue.PropertyId = _rulesetproperty.Id;
                                _rulesetPropertyValue.Value = _temprulesetPropertyValue.OuterXml;
                                _ruleSet.RulesetPropertyValues.Add(_rulesetPropertyValue);
                            }


                        }

                        foreach (var item in RulesetModel.Corestats)
                        {
                            XmlDocument _tempCoreStatPropertyValue = new XmlDocument();
                            if (item.Value != null)
                            {
                                _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(item.TypeId), item.Value);
                            }
                            if (_tempCoreStatPropertyValue != null)
                            {
                                _coreStat = new CoreStat();
                                _coreStat.TypeId = item.TypeId;
                                _coreStat.Name = item.Name;
                                _coreStat.Description = item.Description;
                                _coreStat.Metadata = _tempCoreStatPropertyValue.OuterXml;
                                _ruleSet.CoreStats.Add(_coreStat);
                            }
                        }

                        if (RulesetModel.Items != null)
                        {
                            var VirtualPath = string.Empty;
                            foreach (var item in RulesetModel.Items)
                            {
                                if (item.ItemProperties != null)
                                {

                                    _ruleSetItemsContent = new RuleSetItemsContent();
                                    _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                                    _ruleSet.RuleSetItemsContents.Add(_ruleSetItemsContent);
                                    foreach (var _itemProperties in item.ItemProperties)
                                    {
                                        Item _item = new Item();
                                        XmlDocument _tempitemPropertyValue = new XmlDocument();
                                        if (_itemProperties.Id != 0)
                                        {
                                            _item.ContentTypeId = isCopy ? _itemProperties.ContentTypeId : _itemProperties.Id;
                                            _item.ContentId = 0;
                                            _item.IsStatic = true;
                                            if (_itemProperties.Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = _itemProperties.Value;
                                                SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                                _itemProperties.Value = _temprulesetPropertyValueForImagePath;

                                                _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperties.TypeId, _itemProperties.Value, "");

                                                if (_tempitemPropertyValue != null)
                                                {
                                                    _item.value = _tempitemPropertyValue.OuterXml;
                                                }
                                            }

                                            _ruleSetItemsContent.Items.Add(_item);
                                        }
                                    }
                                }
                            }
                        }

                        if (RulesetModel.Spells != null)
                        {
                            var VirtualPath = string.Empty;
                            foreach (var spell in RulesetModel.Spells)
                            {
                                if (spell.SpellProperties != null)
                                {

                                    _ruleSetItemsContent = new RuleSetItemsContent();

                                    _ruleSetItemsContent.Type = 2; // Type 2 for Spells.

                                    _ruleSet.RuleSetItemsContents.Add(_ruleSetItemsContent);

                                    foreach (var _spellProperties in spell.SpellProperties)
                                    {
                                        Spell _spell = new Spell();
                                        XmlDocument _tempspellPropertyValue = new XmlDocument();
                                        if (_spellProperties.Id != 0)
                                        {
                                            _spell.ContentTypeId = isCopy ? _spellProperties.ContentTypeId : _spellProperties.Id;
                                            _spell.ContentId = 0;
                                            _spell.IsStatic = true;
                                            if (_spellProperties.Value != null)
                                            {

                                                CustomTypes _temprulesetPropertyValueForImagePath = _spellProperties.Value;
                                                SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                                _spellProperties.Value = _temprulesetPropertyValueForImagePath;

                                                _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(_spellProperties.TypeId, _spellProperties.Value, "");

                                                if (_tempspellPropertyValue != null)
                                                {
                                                    _spell.value = _tempspellPropertyValue.OuterXml;
                                                }
                                            }

                                            _ruleSetItemsContent.Spells.Add(_spell);
                                        }
                                    }
                                }
                            }
                        }

                        if (RulesetModel.Abilities != null)
                        {
                            var VirtualPath = string.Empty;
                            foreach (var ability in RulesetModel.Abilities)
                            {
                                if (ability.AbilityProperties != null)
                                {
                                    _ruleSetItemsContent = new RuleSetItemsContent();

                                    _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.

                                    _ruleSet.RuleSetItemsContents.Add(_ruleSetItemsContent);

                                    foreach (var _abilityProperties in ability.AbilityProperties)
                                    {
                                        Ability _ability = new Ability();
                                        XmlDocument _tempabilityPropertyValue = new XmlDocument();
                                        if (_abilityProperties.Id != 0)
                                        {
                                            _ability.ContentTypeId = isCopy ? _abilityProperties.ContentTypeId : _abilityProperties.Id;
                                            _ability.ContentId = 0;
                                            _ability.IsStatic = true;
                                            if (_abilityProperties.Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = _abilityProperties.Value;
                                                SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                                _abilityProperties.Value = _temprulesetPropertyValueForImagePath;

                                                _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(_abilityProperties.TypeId, _abilityProperties.Value, "");


                                                if (_tempabilityPropertyValue != null)
                                                {
                                                    _ability.value = _tempabilityPropertyValue.OuterXml;
                                                }
                                            }

                                            _ruleSetItemsContent.Abilities.Add(_ability);
                                        }
                                    }
                                }
                            }
                        }
                        _context.RuleSets.Add(_ruleSet);
                        int _rowseffected = _context.SaveChanges();

                        //Adding the associated spells to the items in the rule set.
                        foreach (var ruleSetItemViewModel in RulesetModel.Items)
                        {
                            ItemSpell _itemSpellContext = new ItemSpell();
                            if (ruleSetItemViewModel.AssociatedSpells != null)
                            {
                                foreach (var ruleSetItemViewModelAssociatedSpell in ruleSetItemViewModel.AssociatedSpells)
                                {

                                    var _itemsContext = _ruleSet.RuleSetItemsContents.Where(x => x.Type == 1).Select(x => x.Items);

                                    foreach (var _itemContext in _itemsContext)
                                    {

                                        int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                        int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                        string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                        CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                        CustomTypes _tempItemNameClient = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                        if (_tempItemNameClient.Text.value == _tempItemName.Text.value)
                                        {
                                            _itemSpellContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                        }
                                    }

                                    var _tempSpells = _ruleSet.RuleSetItemsContents.Where(x => x.Type == 2).Select(x => x.Spells);

                                    foreach (var _tempSpell in _tempSpells)
                                    {

                                        int? _spellContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(y => y.Id).FirstOrDefault();

                                        int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(x => x.TypeId).FirstOrDefault();

                                        string _spellContentTypeValueXML = _tempSpell.Where(x => x.ContentTypeId == _spellContentTypeId).Select(x => x.value).FirstOrDefault();

                                        CustomTypes _tempSpellName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _spellContentTypeValueXML, null);

                                        string _tempSpellNameStr = ruleSetItemViewModelAssociatedSpell.SpellProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                        if (_tempSpellNameStr == _tempSpellName.Text.value)
                                        {
                                            _itemSpellContext.SpellId = _tempSpell.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                        }
                                    }

                                    _context.ItemSpells.Add(_itemSpellContext);
                                }
                            }
                        }
                        //Adding the associated abilities to the items in the rule set.
                        foreach (var ruleSetItemViewModel in RulesetModel.Items)
                        {
                            ItemAbility _itemAbilityContext = new ItemAbility();
                            if (ruleSetItemViewModel.AssociatedAbilities != null)
                            {
                                foreach (var ruleSetItemViewModelAssociatedAbility in ruleSetItemViewModel.AssociatedAbilities)
                                {

                                    var _itemsContext = _ruleSet.RuleSetItemsContents.Where(x => x.Type == 1).Select(x => x.Items);

                                    foreach (var _itemContext in _itemsContext)
                                    {

                                        int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                        int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                        string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                        CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                        CustomTypes _tempItemNameViewModel = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                        if (_tempItemNameViewModel.Text.value == _tempItemName.Text.value)
                                        {
                                            _itemAbilityContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                        }
                                    }

                                    var _tempAbilities = _ruleSet.RuleSetItemsContents.Where(x => x.Type == 3).Select(x => x.Abilities);

                                    foreach (var _tempAbility in _tempAbilities)
                                    {

                                        int? _abilityContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(y => y.Id).FirstOrDefault();

                                        int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(x => x.TypeId).FirstOrDefault();

                                        string _abilityContentTypeValueXML = _tempAbility.Where(x => x.ContentTypeId == _abilityContentTypeId).Select(x => x.value).FirstOrDefault();

                                        CustomTypes _tempAbilityName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _abilityContentTypeValueXML, null);

                                        string _tempabilityNameStr = ruleSetItemViewModelAssociatedAbility.AbilityProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                        if (_tempabilityNameStr == _tempAbilityName.Text.value)
                                        {
                                            _itemAbilityContext.AbilityId = _tempAbility.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                        }
                                    }

                                    _context.ItemAbilities.Add(_itemAbilityContext);
                                }
                            }
                        }

                        int _rowseffecteditemspell = _context.SaveChanges();
                        //Saving All 7 Type of Tiles For Items,Spells,Abilities
                        SaveRuleSetContentsTiles(RulesetModel, _ruleSet, userId);

                        SaveRuleSetClientImages(clientImagesPath, ClientImages);

                        _serviceResponseModel.Result = "RuleSet Added Successfully";
                        _serviceResponseModel.StatusCode = 200;
                    }

                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }
            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;
        }
        public ServiceResponseModel DeleteRuleSet(int? RuleSetID, string userId)
        {
            try
            {
                RuleSetViewModel ruleSetModel = new RuleSetViewModel();
                ruleSetModel.Id = Convert.ToInt32(RuleSetID);

                //CharacterViewModel charactermodel = new CharacterViewModel();
                //charactermodel.Id = Convert.ToInt32(CharacterID);

                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";
                    Errors = ValidationForDeleteRuleset(ruleSetModel, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        //Deleting  Ruleset Relationship  tables data
                        var CoreStatlst = _context.CoreStats.Where(r => r.RulesetID == RuleSetID).ToList();
                        foreach (var _corestats in CoreStatlst)
                        {
                            _context.CoreStats.Remove(_corestats);
                            _context.SaveChanges();
                        }
                        var RuleSetItemsContentlst = _context.RuleSetItemsContents.Where(r => r.RulesetID == RuleSetID).ToList();
                        foreach (var _ruleSetItemsContent in RuleSetItemsContentlst)
                        {
                            var Itemlst = _context.Items.Where(r => r.ContentId == _ruleSetItemsContent.ContentId).ToList();

                            foreach (var _item in Itemlst)
                            {

                                //Deleting the Associated Spells in the Items.

                                _context.ItemSpells.RemoveRange(_context.ItemSpells.Where(x => x.ItemId == _item.ItemId));
                                _context.SaveChanges();

                                _context.ItemAbilities.RemoveRange(_context.ItemAbilities.Where(x => x.ItemId == _item.ItemId));
                                _context.SaveChanges();

                                _context.Items.Remove(_item);
                                _context.SaveChanges();
                            }
                            var Spellslst = _context.Spells.Where(r => r.ContentId == _ruleSetItemsContent.ContentId).ToList();
                            foreach (var _spells in Spellslst)
                            {
                                _context.Spells.Remove(_spells);
                                _context.SaveChanges();
                            }
                            var Abilitylst = _context.Abilities.Where(r => r.ContentId == _ruleSetItemsContent.ContentId).ToList();
                            foreach (var _ability in Abilitylst)
                            {
                                _context.Abilities.Remove(_ability);
                                _context.SaveChanges();
                            }
                            var ItemSpellslst = _context.ItemSpells.Where(r => r.ItemId == _ruleSetItemsContent.ContentId).ToList();
                            foreach (var _itemspells in ItemSpellslst)
                            {
                                _context.ItemSpells.Remove(_itemspells);
                                _context.SaveChanges();
                            }
                            var ItemAbilitylst = _context.ItemAbilities.Where(r => r.ItemId == _ruleSetItemsContent.ContentId).ToList();
                            foreach (var _itemability in ItemAbilitylst)
                            {
                                _context.ItemAbilities.Remove(_itemability);
                                _context.SaveChanges();
                            }
                            _context.RuleSetItemsContents.Remove(_ruleSetItemsContent);
                            _context.SaveChanges();
                        }
                        var RulesetPropertyValuelst = _context.RulesetPropertyValues.Where(r => r.RulesetID == RuleSetID).ToList();
                        foreach (var _rulePropertyvalue in RulesetPropertyValuelst)
                        {
                            _context.RulesetPropertyValues.Remove(_rulePropertyvalue);
                            _context.SaveChanges();
                        }
                        //Deleting RuleSet 
                        var deleteruleset = _context.RuleSets.Where(r => r.RulesetID == RuleSetID).FirstOrDefault();
                        var message = string.Empty;
                        _context.RuleSets.Remove(deleteruleset);
                        _context.SaveChanges();
                        _serviceResponseModel.Result = "RuleSet Deleted Successfully";
                        _serviceResponseModel.StatusCode = 200;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }
            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;


        }
        public ServiceResponseModel UpdateRuleset(RuleSetViewModel UpdateModel, List<HttpPostedFileBase> ClientImages, string userId)
        {
            try
            {

                Hashtable clientImagesPath = new Hashtable();
                List<string> rulesetpropertyDeleteImage = new List<string>();

                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";
                    Errors = ValidationForUpdateRuleset(UpdateModel, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        //Declared Models
                        RuleSet _ruleSet = new RuleSet();
                        CoreStat _coreStat;
                        RuleSetItemsContent _ruleSetItemsContent;
                        _ruleSet = _context.RuleSets.Where(r => r.RulesetID == UpdateModel.Id).FirstOrDefault();
                        var message = string.Empty;
                        if (_ruleSet != null)
                        {
                            //Updating Ruleset Details
                            _ruleSet.RulesetID = UpdateModel.Id;
                            _ruleSet.UserId = UpdateModel.UserId;
                            _ruleSet.Name = UpdateModel.Name;
                            _ruleSet.Authored = Convert.ToDateTime(DateTime.Now.ToString());
                            _ruleSet.Edited = Convert.ToDateTime(DateTime.Now.ToString());
                            _context.SaveChanges();
                            var virtualPathForRuleSet = string.Empty;
                            //Updating RulesetPropertyValues Details
                            for (var i = 0; i < UpdateModel.Rulesetproperty.Count; i++)
                            {
                                var value = UpdateModel.Rulesetproperty[i];
                                XmlDocument _tempRulesetPropertyValue = Utility.ConvertRuleSetPropertyValueClasstoXML(value.TypeId, value.Value, value.Units);
                                if (_tempRulesetPropertyValue != null)
                                {
                                    var _rulesetPropertyValues = _context.RulesetPropertyValues.Where(r => r.RulesetID == UpdateModel.Id).ToList();
                                    var rulesetPropertyValueid = _rulesetPropertyValues[i].Id;
                                    var _UpdaterulesetPropertyValues = _context.RulesetPropertyValues.Where(r => r.RulesetID == UpdateModel.Id && r.Id == rulesetPropertyValueid).SingleOrDefault();

                                    CustomTypes _temprulesetPropertyValueForImagePath = value.Value;
                                    SetPathforClientImages(1, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, rulesetPropertyValueid);
                                    value.Value = _temprulesetPropertyValueForImagePath;

                                    _tempRulesetPropertyValue = Utility.ConvertRuleSetPropertyValueClasstoXML(value.TypeId, value.Value, value.Units);

                                    _UpdaterulesetPropertyValues.RulesetID = _ruleSet.RulesetID;
                                    _UpdaterulesetPropertyValues.PropertyId = value.Id;
                                    _UpdaterulesetPropertyValues.Value = _tempRulesetPropertyValue.OuterXml;
                                    _context.SaveChanges();

                                }
                            }
                            //Updating and Adding CoreStat Details
                            var _deleteCorestatId = new List<int>();

                            if (UpdateModel.Corestats != null)
                            {
                                XmlDocument _tempCoreStatPropertyValue = new XmlDocument();
                                foreach (var corestat in UpdateModel.Corestats)
                                {
                                    _coreStat = new CoreStat();
                                    switch (corestat.Id)
                                    {
                                        case 0:

                                            if (corestat.Value != null)
                                            {
                                                _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(corestat.TypeId), corestat.Value);
                                            }
                                            if (_tempCoreStatPropertyValue != null)
                                            {
                                                _coreStat.Name = corestat.Name;
                                                _coreStat.Description = corestat.Description;
                                                _coreStat.TypeId = corestat.TypeId;
                                                _coreStat.RulesetID = UpdateModel.Id;
                                                _coreStat.Metadata = _tempCoreStatPropertyValue.OuterXml;
                                            }


                                            _context.CoreStats.Add(_coreStat);
                                            _context.SaveChanges();
                                            break;
                                        default:
                                            _coreStat = _context.CoreStats.Where(p => p.CorestatID == corestat.Id && p.RulesetID == UpdateModel.Id).SingleOrDefault();
                                            if (corestat.Value != null)
                                            {
                                                _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(corestat.TypeId), corestat.Value);
                                            }
                                            if (_coreStat != null)
                                            {
                                                _coreStat.Name = corestat.Name;
                                                _coreStat.TypeId = corestat.TypeId;
                                                _coreStat.Description = corestat.Description;
                                                _coreStat.RulesetID = UpdateModel.Id;
                                                _coreStat.CorestatID = corestat.Id;
                                                _coreStat.Metadata = _tempCoreStatPropertyValue.OuterXml;
                                                _context.SaveChanges();
                                            }
                                            break;
                                    }
                                    _deleteCorestatId.Add(_coreStat.CorestatID);
                                }
                            }

                            var deletecorestats = _context.CoreStats.Where(w => w.RulesetID == _ruleSet.RulesetID).ToList().RemoveAll(r => !_deleteCorestatId.Any(a => a == r.CorestatID));
                            var _deleteRuleSetItemId = new List<int>();
                            //Updating and Adding Spells Details
                            var deletespells = new List<int>();
                            if (UpdateModel.Spells != null)
                            {
                                var virtualPath = string.Empty;
                                for (var j = 0; j < UpdateModel.Spells.Count; j++)
                                {
                                    var spell = UpdateModel.Spells[j];
                                    _ruleSetItemsContent = new RuleSetItemsContent();
                                    if (spell.SpellProperties != null)
                                    {
                                        //spell.SpellProperties = spell.SpellProperties.Where(p => p.tile == null).ToList();
                                        switch (spell.SpellProperties[0].ContentId)
                                        {
                                            case 0:
                                            case null:
                                                _ruleSetItemsContent.Type = 2; // Type 2 for Spells.
                                                _ruleSetItemsContent.RulesetID = UpdateModel.Id;
                                                _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                                                var SpellPropertiesExceptTiles = spell.SpellProperties[0].tile != null ? spell.SpellProperties.Where(p => p.tile.Value == null).ToList() : spell.SpellProperties.Where(p => p.tile == null).ToList();
                                                foreach (var _spellProperties in SpellPropertiesExceptTiles)
                                                {
                                                    Spell _spell = new Spell();
                                                    XmlDocument _tempspellPropertyValue = new XmlDocument();
                                                    var VirtualPath = string.Empty;
                                                    _spell.IsStatic = true;
                                                    _spell.ContentTypeId = (_spellProperties.ContentId == null || _spellProperties.ContentTypeId == null)
                                                                         ? _spellProperties.Id : _spellProperties.ContentTypeId;
                                                  
                                                    if (_spellProperties.Value != null)
                                                    {
                                                        CustomTypes _temprulesetPropertyValueForImagePath = _spellProperties.Value;
                                                        SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, -1);
                                                        _spellProperties.Value = _temprulesetPropertyValueForImagePath;

                                                        _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(_spellProperties.TypeId, _spellProperties.Value, "");


                                                        if (_tempspellPropertyValue != null)
                                                        {
                                                            _spell.value = _tempspellPropertyValue.OuterXml;
                                                        }
                                                    }
                                                    _ruleSetItemsContent.Spells.Add(_spell);
                                                }
                                                _context.SaveChanges();
                                                break;
                                            default:
                                                int? _rulesetSpellContentId = UpdateModel.Spells[j].SpellProperties[0].ContentId;
                                                _ruleSetItemsContent = _context.RuleSetItemsContents.Where(p => p.RulesetID == UpdateModel.Id && p.Type == 2 && p.ContentId == _rulesetSpellContentId).FirstOrDefault();

                                                _ruleSetItemsContent.Type = 2; // Type 2 for Spells.
                                                _ruleSetItemsContent.RulesetID = UpdateModel.Id;
                                                _ruleSetItemsContent.ContentId = _ruleSetItemsContent.ContentId;
                                                var SpellContentId = _ruleSetItemsContent.ContentId;
                                                var Spells = _context.Spells.Where(p => p.ContentId == SpellContentId).ToList();
                                                Spells = Spells.Where(p => p.ContentTypeId != null).ToList();
                                                for (var k = 0; k < Spells.Count; k++)
                                                {
                                                    //Spell _spell = new Spell();
                                                    XmlDocument _tempspellPropertyValue = new XmlDocument();
                                                   
                                                    var SpellImagePath = string.Empty;
                                                    if (spell.SpellProperties[k].Value != null)
                                                    {
                                                        CustomTypes _temprulesetPropertyValueForImagePath = spell.SpellProperties[k].Value;
                                                        SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, Spells[k].SpellId);
                                                        spell.SpellProperties[k].Value = _temprulesetPropertyValueForImagePath;

                                                        _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(spell.SpellProperties[k].TypeId, spell.SpellProperties[k].Value, "");



                                                        if (_tempspellPropertyValue != null)
                                                        {
                                                            Spells[k].value = _tempspellPropertyValue.OuterXml;
                                                        }

                                                    }
                                                  
                                                }

                                                _context.SaveChanges();
                                                break;
                                        }
                                    }
                                    deletespells.Add(_ruleSetItemsContent.ContentId);
                                }


                                var deleterulesetspells1 = _context.RuleSetItemsContents.Where(W => !deletespells.Any(a => a == W.ContentId) && W.RulesetID == _ruleSet.RulesetID && W.Type == 2).ToList();

                                var spells = deleterulesetspells1.Select(w => w.ContentId).ToList();

                                var deleterulesetspells2 = _context.Spells.Where(W => spells.Any(a => a == W.ContentId)).ToList();

                                foreach (var _spell in deleterulesetspells2)
                                {
                                    _context.Spells.Remove(_spell);

                                }

                                foreach (var rulesetspellcontent in deleterulesetspells1)
                                {
                                    _context.RuleSetItemsContents.Remove(rulesetspellcontent);

                                }

                                _context.SaveChanges();
                            }
                            //Updating and Adding Abilities Details
                            var deleteability = new List<int>();
                            if (UpdateModel.Abilities != null)
                            {
                                var virtualPath = string.Empty;
                                for (var j = 0; j < UpdateModel.Abilities.Count; j++)
                                {
                                    var ability = UpdateModel.Abilities[j];
                                    _ruleSetItemsContent = new RuleSetItemsContent();
                                    if (ability.AbilityProperties != null)
                                    {
                                        var AbilityPropertiesExceptTiles = ability.AbilityProperties[0].tile != null ? ability.AbilityProperties.Where(p => p.tile.Value == null).ToList() : ability.AbilityProperties.Where(p => p.tile == null).ToList();
                                        switch (ability.AbilityProperties[0].ContentId)
                                        {
                                            case 0:
                                            case null:
                                                _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.
                                                _ruleSetItemsContent.RulesetID = UpdateModel.Id;
                                                _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                                                foreach (var _abilityProperties in AbilityPropertiesExceptTiles)
                                                {
                                                    Ability _ability = new Ability();
                                                    XmlDocument _tempabilityPropertyValue = new XmlDocument();
                                                    _ability.IsStatic = true;
                                                    _ability.ContentTypeId = (_abilityProperties.ContentId == null || _abilityProperties.ContentTypeId == null)
                                                                    ? _abilityProperties.Id : _abilityProperties.ContentTypeId;
                                                   
                                                    if (_abilityProperties.Value != null)
                                                    {
                                                        CustomTypes _temprulesetPropertyValueForImagePath = _abilityProperties.Value;
                                                        SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, -1);
                                                        _abilityProperties.Value = _temprulesetPropertyValueForImagePath;

                                                        _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(_abilityProperties.TypeId, _abilityProperties.Value, "");


                                                        if (_tempabilityPropertyValue != null)
                                                        {
                                                            _ability.value = _tempabilityPropertyValue.OuterXml;
                                                        }
                                                    }
                                                    _ruleSetItemsContent.Abilities.Add(_ability);
                                                }
                                                _context.SaveChanges();
                                                break;
                                            default:
                                                int? _rulesetabilityContentId = UpdateModel.Abilities[j].AbilityProperties[0].ContentId;
                                                _ruleSetItemsContent = _context.RuleSetItemsContents.Where(p => p.RulesetID == UpdateModel.Id && p.Type == 3 && p.ContentId == _rulesetabilityContentId).FirstOrDefault();

                                                _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.
                                                _ruleSetItemsContent.RulesetID = UpdateModel.Id;
                                                _ruleSetItemsContent.ContentId = _ruleSetItemsContent.ContentId;
                                                var AbilityContentId = _ruleSetItemsContent.ContentId;
                                                var Abilities = _context.Abilities.Where(p => p.ContentId == AbilityContentId).ToList();
                                                Abilities = Abilities.Where(p => p.ContentTypeId != null).ToList();
                                                for (var k = 0; k < Abilities.Count; k++)
                                                {
                                                    Ability _ability = new Ability();
                                                    XmlDocument _tempabilityPropertyValue = new XmlDocument();
                                                
                                                    var AbilityImagePath = string.Empty;
                                                    if (ability.AbilityProperties[k].Value != null)
                                                    {
                                                        CustomTypes _temprulesetPropertyValueForImagePath = ability.AbilityProperties[k].Value;
                                                        SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, Abilities[k].AbilityId);
                                                        ability.AbilityProperties[k].Value = _temprulesetPropertyValueForImagePath;

                                                        _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(ability.AbilityProperties[k].TypeId, ability.AbilityProperties[k].Value, "");



                                                        if (_tempabilityPropertyValue != null)
                                                        {
                                                            Abilities[k].value = _tempabilityPropertyValue.OuterXml;
                                                        }
                                                     
                                                      
                                                    }
                                                  
                                                }

                                                _context.SaveChanges();
                                                break;
                                        }
                                    }
                                    deleteability.Add(_ruleSetItemsContent.ContentId);
                                }
                                var deleterulesetabilities1 = _context.RuleSetItemsContents.Where(W => !deleteability.Any(a => a == W.ContentId) && W.RulesetID == _ruleSet.RulesetID && W.Type == 3).ToList();

                                var abilities = deleterulesetabilities1.Select(w => w.ContentId).ToList();

                                var deleterulesetabilities2 = _context.Abilities.Where(W => abilities.Any(a => a == W.ContentId)).ToList();

                                foreach (var _ability in deleterulesetabilities2)
                                {
                                    _context.Abilities.Remove(_ability);

                                }

                                foreach (var rulesetabilitycontent in deleterulesetabilities1)
                                {
                                    _context.RuleSetItemsContents.Remove(rulesetabilitycontent);

                                }

                                _context.SaveChanges();
                            }

                            //Updating and Adding Items Details
                            if (UpdateModel.Items != null)
                            {

                                var virtualPath = string.Empty;
                                for (var j = 0; j < UpdateModel.Items.Count; j++)
                                {
                                    var item = UpdateModel.Items[j];
                                    _ruleSetItemsContent = new RuleSetItemsContent();
                                    if (item.ItemProperties != null)
                                    {
                                        var ItemPropertiesExceptTiles = item.ItemProperties[0].tile != null ? item.ItemProperties.Where(p => p.tile.Value == null).ToList() : item.ItemProperties.Where(p => p.tile == null).ToList();
                                        switch (item.ItemProperties[0].ContentId)
                                        {
                                            case 0:
                                            case null:
                                                _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                                                _ruleSetItemsContent.RulesetID = UpdateModel.Id;
                                                _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                                                foreach (var _itemProperties in ItemPropertiesExceptTiles)
                                                {
                                                    Item _item = new Item();
                                                    XmlDocument _tempitemPropertyValue = new XmlDocument();
                                                    var VirtualPath = string.Empty;
                                                    _item.IsStatic = true;
                                                    _item.ContentTypeId = (_itemProperties.ContentId == null || _itemProperties.ContentTypeId == null)
                                                                           ? _itemProperties.Id : _itemProperties.ContentTypeId;

                                                    if (_itemProperties.Value != null)
                                                    {
                                                        CustomTypes _temprulesetPropertyValueForImagePath = _itemProperties.Value;
                                                        SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, -1);
                                                        _itemProperties.Value = _temprulesetPropertyValueForImagePath;

                                                        _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperties.TypeId, _itemProperties.Value, "");


                                                        if (_tempitemPropertyValue != null)
                                                        {
                                                            _item.value = _tempitemPropertyValue.OuterXml;
                                                        }
                                                    }
                                                    _ruleSetItemsContent.Items.Add(_item);
                                                }
                                                _context.SaveChanges();
                                                break;
                                            default:

                                                int? _rulesetItemContentId = UpdateModel.Items[j].ItemProperties[0].ContentId;

                                                _ruleSetItemsContent = _context.RuleSetItemsContents.Where(p => p.RulesetID == UpdateModel.Id && p.Type == 1 && p.ContentId == _rulesetItemContentId).FirstOrDefault();

                                                _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                                                _ruleSetItemsContent.RulesetID = UpdateModel.Id;
                                                _ruleSetItemsContent.ContentId = _ruleSetItemsContent.ContentId;
                                                var ItemContentId = _ruleSetItemsContent.ContentId;
                                                var Items = _context.Items.Where(p => p.ContentId == ItemContentId).ToList();
                                                Items = Items.Where(p => p.ContentTypeId != null).ToList();
                                                for (var k = 0; k < Items.Count; k++)
                                                {
                                                    Item _item = new Item();
                                                    XmlDocument _tempitemPropertyValue = new XmlDocument();
                                                
                                                    var ItemImagePath = string.Empty;

                                                    CustomTypes _temprulesetPropertyValueForImagePath = item.ItemProperties[k].Value;
                                                    SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, Items[k].ItemId);
                                                    item.ItemProperties[k].Value = _temprulesetPropertyValueForImagePath;

                                                    _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(item.ItemProperties[k].TypeId, item.ItemProperties[k].Value, "");


                                                    if (item.ItemProperties[k].Value != null)
                                                    {
                                                        if (_tempitemPropertyValue != null)
                                                        {
                                                            Items[k].value = _tempitemPropertyValue.OuterXml;
                                                        }
                                                    }
                                                    
                                                }

                                                _context.SaveChanges();
                                                break;
                                        }
                                    }

                                    _deleteRuleSetItemId.Add(_ruleSetItemsContent.ContentId);

                                }


                                var deleterulesetitems1 = _context.RuleSetItemsContents.Where(W => !_deleteRuleSetItemId.Any(a => a == W.ContentId) && W.RulesetID == _ruleSet.RulesetID && W.Type == 1).ToList();

                                var d = deleterulesetitems1.Select(w => w.ContentId).ToList();

                                var deleterulesetitems2 = _context.Items.Where(W => d.Any(a => a == W.ContentId)).ToList();

                                var deleterulesetitemspells = _context.ItemSpells.Where(W => d.Any(a => a == W.ItemId)).ToList();

                                foreach (var itemspell in deleterulesetitemspells)
                                {
                                    _context.ItemSpells.Remove(itemspell);

                                }

                                var deleterulesetitemabilities = _context.ItemAbilities.Where(W => d.Any(a => a == W.ItemId)).ToList();

                                foreach (var itemability in deleterulesetitemabilities)
                                {
                                    _context.ItemAbilities.Remove(itemability);

                                }

                                foreach (var item in deleterulesetitems2)
                                {
                                    _context.Items.Remove(item);

                                }

                                foreach (var item in deleterulesetitems1)
                                {
                                    _context.RuleSetItemsContents.Remove(item);

                                }


                                _context.SaveChanges();
                                //Deleting the Associated Spells in the Items.

                                var _itemSpells = (from ruleset in _context.RuleSets
                                                   join rulesetitemcontent in _context.RuleSetItemsContents on ruleset.RulesetID equals rulesetitemcontent.RulesetID
                                                   join rulesetitemspell in _context.ItemSpells on rulesetitemcontent.ContentId equals rulesetitemspell.ItemId
                                                   where ruleset.RulesetID == UpdateModel.Id
                                                   select new { ItemId = rulesetitemspell.ItemId }).ToList();

                                foreach (var val in _itemSpells)
                                {
                                    _context.ItemSpells.RemoveRange(_context.ItemSpells.Where(x => x.ItemId == val.ItemId));
                                    _context.SaveChanges();
                                }



                                //Adding the associated spells to the items in the rule set.
                                foreach (var ruleSetItemViewModel in UpdateModel.Items)
                                {
                                    ItemSpell _itemSpellContext = new ItemSpell();
                                    if (ruleSetItemViewModel.AssociatedSpells != null)
                                    {
                                        foreach (var ruleSetItemViewModelAssociatedSpell in ruleSetItemViewModel.AssociatedSpells)
                                        {

                                            var _itemsContext = _ruleSet.RuleSetItemsContents.Where(x => x.Type == 1).Select(x => x.Items);

                                            foreach (var _itemContext in _itemsContext)
                                            {

                                                int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                                string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                                CustomTypes _tempItemNameClient = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                                if (_tempItemNameClient.Text.value == _tempItemName.Text.value)
                                                {
                                                    _itemSpellContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                }
                                            }

                                            var _tempSpells = _ruleSet.RuleSetItemsContents.Where(x => x.Type == 2).Select(x => x.Spells);

                                            foreach (var _tempSpell in _tempSpells)
                                            {

                                                int? _spellContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(x => x.TypeId).FirstOrDefault();

                                                string _spellContentTypeValueXML = _tempSpell.Where(x => x.ContentTypeId == _spellContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempSpellName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _spellContentTypeValueXML, null);

                                                string _tempSpellNameStr = ruleSetItemViewModelAssociatedSpell.SpellProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                                if (_tempSpellNameStr == _tempSpellName.Text.value)
                                                {
                                                    _itemSpellContext.SpellId = _tempSpell.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                }
                                            }

                                            _context.ItemSpells.Add(_itemSpellContext);
                                        }
                                    }
                                }

                                //Deleting the Associated Abilities in the Items.
                                var _itemAbilities = (from ruleset in _context.RuleSets
                                                      join rulesetitemcontent in _context.RuleSetItemsContents on ruleset.RulesetID equals rulesetitemcontent.RulesetID
                                                      join rulesetitemability in _context.ItemSpells on rulesetitemcontent.ContentId equals rulesetitemability.ItemId
                                                      where ruleset.RulesetID == UpdateModel.Id
                                                      select new { ItemId = rulesetitemability.ItemId }).ToList();

                                foreach (var val in _itemAbilities)
                                {
                                    _context.ItemAbilities.RemoveRange(_context.ItemAbilities.Where(x => x.ItemId == val.ItemId));
                                    _context.SaveChanges();
                                }

                                //Adding the associated abilities to the items in the rule set.
                                foreach (var ruleSetItemViewModel in UpdateModel.Items)
                                {
                                    ItemAbility _itemAbilityContext = new ItemAbility();
                                    if (ruleSetItemViewModel.AssociatedAbilities != null)
                                    {
                                        foreach (var ruleSetItemViewModelAssociatedAbility in ruleSetItemViewModel.AssociatedAbilities)
                                        {

                                            var _itemsContext = _ruleSet.RuleSetItemsContents.Where(x => x.Type == 1).Select(x => x.Items);

                                            foreach (var _itemContext in _itemsContext)
                                            {

                                                int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                                string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                                CustomTypes _tempItemNameViewModel = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                                if (_tempItemNameViewModel.Text.value == _tempItemName.Text.value)
                                                {
                                                    _itemAbilityContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                }
                                            }

                                            var _tempAbilities = _ruleSet.RuleSetItemsContents.Where(x => x.Type == 3).Select(x => x.Abilities);

                                            foreach (var _tempAbility in _tempAbilities)
                                            {

                                                int? _abilityContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(x => x.TypeId).FirstOrDefault();

                                                string _abilityContentTypeValueXML = _tempAbility.Where(x => x.ContentTypeId == _abilityContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempAbilityName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _abilityContentTypeValueXML, null);

                                                string _tempabilityNameStr = ruleSetItemViewModelAssociatedAbility.AbilityProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                                if (_tempabilityNameStr == _tempAbilityName.Text.value)
                                                {
                                                    _itemAbilityContext.AbilityId = _tempAbility.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                }
                                            }

                                            _context.ItemAbilities.Add(_itemAbilityContext);
                                        }
                                    }
                                }
                            }
                        }


                        //Saving All 7 Type of Tiles For Items,Spells,Abilities
                        SaveRuleSetContentsTiles(UpdateModel, _ruleSet, userId);

                        SaveRuleSetClientImages(clientImagesPath, ClientImages);

                        DeleteOldRuleSetClientImages(rulesetpropertyDeleteImage);

                        _serviceResponseModel.Result = "Ruleset Updated Successfully";
                        _serviceResponseModel.StatusCode = 200;
                    }
                }
            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;
        }
        public string ValidationForNewRuleset(RuleSetViewModel ruleSetModel, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0; // 0-NoError   1-Error

            if (ruleSetModel.Name != null && ruleSetModel.Name != "")
            {
                IEnumerable<RuleSet> _ruleSet = _context.RuleSets.Where(x => x.UserId == userId && x.Name.ToLower() == ruleSetModel.Name.ToLower()).ToList();
                if (_ruleSet.Count() > 0)
                {
                    Errors = Errors + "Ruleset Name Already Exist";
                    resultStatus = 1;
                }
            }
            else
            {
                Errors = Errors + "Please Enter RulesetName";
                resultStatus = 1;
            }

            ruleSetModel.Rulesetproperty = ruleSetModel.Rulesetproperty == null ? new List<RuleSetProperty>() : ruleSetModel.Rulesetproperty;
            ruleSetModel.Corestats = ruleSetModel.Corestats == null ? new List<Corestats>() : ruleSetModel.Corestats;
            ruleSetModel.Items = ruleSetModel.Items == null ? new List<Items>() : ruleSetModel.Items;
            ruleSetModel.Spells = ruleSetModel.Spells == null ? new List<Spells>() : ruleSetModel.Spells;
            ruleSetModel.Abilities = ruleSetModel.Abilities == null ? new List<Abilities>() : ruleSetModel.Abilities;



            // General Settings
            if (ruleSetModel.Rulesetproperty != null)
            {
                foreach (var rulesetproperty in ruleSetModel.Rulesetproperty)
                {
                    if (rulesetproperty != null)
                    {
                        if (rulesetproperty.IsMandotary == true && rulesetproperty.Value != null)
                        {
                            switch (rulesetproperty.TypeId)
                            {
                                case 1:
                                    if (rulesetproperty.Value.Text.value == "" || rulesetproperty.Value.Text.value == null)
                                    {
                                        Errors = Errors + rulesetproperty.Name + " Required,";
                                        resultStatus = 1;
                                    }
                                    break;
                                case 7:
                                    if (rulesetproperty.Units.selectedUnit == "" || rulesetproperty.Units.selectedUnit == null)
                                    {
                                        Errors = Errors + rulesetproperty.Name + " Required,";
                                        resultStatus = 1;
                                    }
                                    break;
                                case 8:
                                    if (rulesetproperty.Value.Image.image == "" || rulesetproperty.Value.Image.image == null)
                                    {
                                        Errors = Errors + rulesetproperty.Name + " Required,";
                                        resultStatus = 1;
                                    }
                                    break;
                                case 15:
                                    if (rulesetproperty.Value.DefaultDice.value == "" || rulesetproperty.Value.DefaultDice.value == null)
                                    {
                                        Errors = Errors + rulesetproperty.Name + " Required,";
                                        resultStatus = 1;
                                    }
                                    break;
                            }
                        }
                        else if (rulesetproperty.IsMandotary == false && rulesetproperty.Value == null)
                        {
                            Errors = Errors + rulesetproperty.Name + " Required";
                            resultStatus = 1;
                        }

                    }

                }
            }

            //CoreStats
            if (ruleSetModel.Corestats != null)
            {
                List<string> myCorestatCollection = new List<string>();
                foreach (var _Corestat in ruleSetModel.Corestats)
                {
                    myCorestatCollection.Add(_Corestat.Name);
                }

                var RepeatItems = myCorestatCollection.GroupBy(x => x).Where(g => g.Count() > 1).Select(y => y.Key).ToList();

                if (RepeatItems.Count() > 0)
                {
                    Errors = Errors + " Corestats Name should not be same <br/>";
                    resultStatus = 1;
                }
            }

            if (ruleSetModel.Items != null)
            {

                List<string> myItemCollection = new List<string>();
                foreach (var _Item in ruleSetModel.Items)
                {
                    
                    var itemData = _Item.ItemProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();
                    foreach (var Item in itemData)
                    {
                        myItemCollection.Add(Item.Value.Text.value);
                    }
                }

                var RepeatItems = myItemCollection.GroupBy(x => x).Where(g => g.Count() > 1).Select(y => y.Key).ToList();

                if (RepeatItems.Count() > 0)
                {
                    Errors = Errors + " Item Name should not be same";
                    resultStatus = 1;
                }

                foreach (var item in ruleSetModel.Items)
                {
                    string ItemName = "";

                    if (item.ItemProperties != null)
                    {

                      
                        var itemData = item.ItemProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();

                        foreach (var _itemData in itemData)
                        {
                            ItemName = _itemData.Value.Text.value;
                        }

                        foreach (var _itemProperties in item.ItemProperties)
                        {
                          
                            if (_itemProperties.IsMandatory == true && _itemProperties.Value != null)
                            {
                                switch (_itemProperties.TypeId)
                                {
                                    case 1:
                                        if (_itemProperties.Value.Text.value == "" || _itemProperties.Value.Text.value == null)
                                        {
                                            Errors = Errors + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            ItemName = _itemProperties.Value.Text.value;
                                        }
                                        break;
                                    case 2:
                                        if (_itemProperties.Value.Choices.selectedchoice == "" || _itemProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_itemProperties.Value.OnOrOff.value == "" || _itemProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_itemProperties.Value.YesOrNo.value == "" || _itemProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_itemProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _itemProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_itemProperties.Value.YesOrNo.value == "" || _itemProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_itemProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero <br/>";
                                           
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_itemProperties.Value.Image.image == "" || _itemProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_itemProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                           
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_itemProperties.Value.Volume.units.selectedUnit == "" || _itemProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_itemProperties.Value.Number.value < 0)
                                        {
                                            //bool result = _itemProperties.Value.DefaultDice.value.Any(x => !char.IsLetter(x));
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                           
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_itemProperties.Value.DefaultDice.value == "" || _itemProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_itemProperties.Value.Calculation.formulae == "" || _itemProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_itemProperties.Value.Text.value == "" || _itemProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_itemProperties.IsMandatory == true && _itemProperties.Value == null)
                            {
                                Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                resultStatus = 1;
                            }

                            if ((_itemProperties.TypeId == 7 || _itemProperties.TypeId == 12 || _itemProperties.TypeId == 14) && _itemProperties.IsMandatory == false && _itemProperties.Value != null)
                            {

                                switch (_itemProperties.TypeId)
                                {
                                    case 7:
                                        if (_itemProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_itemProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_itemProperties.Value.Number.value < 0)
                                        {

                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }

                        }
                    }
                }


            }

            if (ruleSetModel.Spells != null)
            {
                

                List<string> mySpellCollection = new List<string>();
                foreach (var _Spells in ruleSetModel.Spells)
                {
                    
                    var SpellData = _Spells.SpellProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();
                    foreach (var _SpellData in SpellData)
                    {
                        mySpellCollection.Add(_SpellData.Value.Text.value);
                    }
                }

                var RepeatItems = mySpellCollection.GroupBy(x => x).Where(g => g.Count() > 1).Select(y => y.Key).ToList();

                if (RepeatItems.Count() > 0)
                {
                    Errors = Errors + "Spell Name should not be same <br/>";
                    resultStatus = 1;
                }

                foreach (var Spell in ruleSetModel.Spells)
                {
                    string SpellName = "";

                    if (Spell.SpellProperties != null)
                    {

                      
                        var SpellData = Spell.SpellProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();
                        foreach (var _Spell in SpellData)
                        {
                            SpellName = _Spell.Value.Text.value;
                        }

                        foreach (var _spellProperties in Spell.SpellProperties)
                        {
                           

                            if (_spellProperties.IsMandatory == true && _spellProperties.Value != null)
                            {
                                switch (_spellProperties.TypeId)
                                {
                                    case 1:
                                        if (_spellProperties.Value.Text.value == "" || _spellProperties.Value.Text.value == null)
                                        {
                                            Errors = Errors + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            SpellName = _spellProperties.Value.Text.value;
                                        }

                                        break;
                                    case 2:
                                        if (_spellProperties.Value.Choices.selectedchoice == "" || _spellProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_spellProperties.Value.OnOrOff.value == "" || _spellProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_spellProperties.Value.YesOrNo.value == "" || _spellProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_spellProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _spellProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_spellProperties.Value.YesOrNo.value == "" || _spellProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_spellProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                           
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_spellProperties.Value.Image.image == "" || _spellProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_spellProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_spellProperties.Value.Volume.units.selectedUnit == "" || _spellProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_spellProperties.Value.Number.value < 0)
                                        {

                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_spellProperties.Value.DefaultDice.value == "" || _spellProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_spellProperties.Value.Calculation.formulae == "" || _spellProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_spellProperties.Value.Text.value == "" || _spellProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_spellProperties.IsMandatory == true && _spellProperties.Value == null)
                            {
                                Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                resultStatus = 1;
                            }

                            else if ((_spellProperties.TypeId == 7 || _spellProperties.TypeId == 12 || _spellProperties.TypeId == 14) && _spellProperties.IsMandatory == false && _spellProperties.Value != null)
                            {
                                switch (_spellProperties.TypeId)
                                {
                                    case 7:
                                        if (_spellProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_spellProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_spellProperties.Value.Number.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }

                        }
                    }
                }


            }

            if (ruleSetModel.Abilities != null)
            {
                

                List<string> myAbilitieCollection = new List<string>();
                foreach (var _Abilitie in ruleSetModel.Abilities)
                {
                   
                    var AbilitieData = _Abilitie.AbilityProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();
                    foreach (var Abilitie in AbilitieData)
                    {
                        myAbilitieCollection.Add(Abilitie.Value.Text.value);
                    }

                }

                var RepeatAbilitie = myAbilitieCollection.GroupBy(x => x).Where(g => g.Count() > 1).Select(y => y.Key).ToList();

                if (RepeatAbilitie.Count() > 0)
                {
                    Errors = Errors + "Ability Name should not be same <br/>";
                    resultStatus = 1;
                }

                foreach (var Abilitie in ruleSetModel.Abilities)
                {
                    string AbilityName = "";

                    if (Abilitie.AbilityProperties != null)
                    {

                        
                        var AbilitieData = Abilitie.AbilityProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();
                        foreach (var _AbilitieData in AbilitieData)
                        {
                            AbilityName = _AbilitieData.Value.Text.value;
                        }

                        foreach (var _AbilityProperties in Abilitie.AbilityProperties)
                        {
                           

                            if (_AbilityProperties.IsMandatory == true && _AbilityProperties.Value != null)
                            {
                                switch (_AbilityProperties.TypeId)
                                {
                                    case 1:
                                        if (_AbilityProperties.Value.Text.value == "" || _AbilityProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            AbilityName = _AbilityProperties.Value.Text.value;
                                        }

                                        break;
                                    case 2:
                                        if (_AbilityProperties.Value.Choices.selectedchoice == "" || _AbilityProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_AbilityProperties.Value.OnOrOff.value == "" || _AbilityProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_AbilityProperties.Value.YesOrNo.value == "" || _AbilityProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_AbilityProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _AbilityProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_AbilityProperties.Value.YesOrNo.value == "" || _AbilityProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_AbilityProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                           
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_AbilityProperties.Value.Image.image == "" || _AbilityProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_AbilityProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                          
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_AbilityProperties.Value.Volume.units.selectedUnit == "" || _AbilityProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_AbilityProperties.Value.Number.value < 0)
                                        {

                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                           
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_AbilityProperties.Value.DefaultDice.value == "" || _AbilityProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_AbilityProperties.Value.Calculation.formulae == "" || _AbilityProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_AbilityProperties.Value.Text.value == "" || _AbilityProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_AbilityProperties.IsMandatory == true && _AbilityProperties.Value == null)
                            {
                                Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                resultStatus = 1;
                            }
                            else if ((_AbilityProperties.TypeId == 7 || _AbilityProperties.TypeId == 12 || _AbilityProperties.TypeId == 14) && _AbilityProperties.IsMandatory == false && _AbilityProperties.Value != null)
                            {
                                switch (_AbilityProperties.TypeId)
                                {
                                    case 7:
                                        if (_AbilityProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_AbilityProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_AbilityProperties.Value.Number.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }

                        }
                    }
                }


            }

            return Errors;
        }
        public string ValidationForDeleteRuleset(RuleSetViewModel ruleSetModel, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            IEnumerable<RuleSet> _ruleSet;
            _ruleSet = _context.RuleSets.Where(c => c.RulesetID == ruleSetModel.Id && c.UserId == userId).ToList();
            if (_ruleSet.Count() == 0)
            {
                Errors = Errors + "Please Select Valid Ruleset \\n";
                resultStatus = 1;
            }

            return Errors;
        }
        public string ValidationForUpdateRuleset(RuleSetViewModel ruleSetModel, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            if (ruleSetModel.Id != 0)
            {
                IEnumerable<RuleSet> _ruleSet = _context.RuleSets.Where(x => x.UserId == userId && x.RulesetID == ruleSetModel.Id).ToList();
                if (_ruleSet.Count() == 0)
                {
                    Errors = Errors + "Please Select Valid Ruleset,";
                    resultStatus = 1;
                }
            }
            else
            {
                Errors = Errors + "Please Select Ruleset";
            }


            ruleSetModel.Rulesetproperty = ruleSetModel.Rulesetproperty == null ? new List<RuleSetProperty>() : ruleSetModel.Rulesetproperty;
            ruleSetModel.Corestats = ruleSetModel.Corestats == null ? new List<Corestats>() : ruleSetModel.Corestats;
            ruleSetModel.Items = ruleSetModel.Items == null ? new List<Items>() : ruleSetModel.Items;
            ruleSetModel.Spells = ruleSetModel.Spells == null ? new List<Spells>() : ruleSetModel.Spells;
            ruleSetModel.Abilities = ruleSetModel.Abilities == null ? new List<Abilities>() : ruleSetModel.Abilities;

            // General Settings
            if (ruleSetModel.Rulesetproperty != null)
            {
                foreach (var rulesetproperty in ruleSetModel.Rulesetproperty)
                {
                    if (rulesetproperty != null)
                    {
                        if (rulesetproperty.IsMandotary == true && rulesetproperty.Value != null)
                        {
                            switch (rulesetproperty.TypeId)
                            {
                                case 1:
                                    if (rulesetproperty.Value.Text.value == "" || rulesetproperty.Value.Text.value == null)
                                    {
                                        Errors = Errors + rulesetproperty.Name + " Required,";
                                        resultStatus = 1;
                                    }
                                    break;
                                case 7:
                                    if (rulesetproperty.Units.selectedUnit == "" || rulesetproperty.Units.selectedUnit == null)
                                    {
                                        Errors = Errors + rulesetproperty.Name + " Required,";
                                        resultStatus = 1;
                                    }
                                    break;
                                case 8:
                                    if (rulesetproperty.Value.Image.image == "" || rulesetproperty.Value.Image.image == null)
                                    {
                                        Errors = Errors + rulesetproperty.Name + " Required,";
                                        resultStatus = 1;
                                    }
                                    break;
                                case 15:
                                    if (rulesetproperty.Value.DefaultDice.value == "" || rulesetproperty.Value.DefaultDice.value == null)
                                    {
                                        Errors = Errors + rulesetproperty.Name + " Required,";
                                        resultStatus = 1;
                                    }
                                    break;
                            }
                        }
                        else if (rulesetproperty.IsMandotary == false && rulesetproperty.Value == null)
                        {
                            Errors = Errors + rulesetproperty.Name + " Required,";
                            resultStatus = 1;
                        }

                    }

                }
            }

            //CoreStats
            if (ruleSetModel.Corestats != null)
            {
                List<string> myCorestatCollection = new List<string>();
                foreach (var _Corestat in ruleSetModel.Corestats)
                {
                    myCorestatCollection.Add(_Corestat.Name);
                }

                var RepeatItems = myCorestatCollection.GroupBy(x => x).Where(g => g.Count() > 1).Select(y => y.Key).ToList();

                if (RepeatItems.Count() > 0)
                {
                    Errors = Errors + " Corestats Name should not be same <br/>";
                    resultStatus = 1;
                }
            }


            if (ruleSetModel.Items != null)
            {

                List<string> myItemCollection = new List<string>();
                foreach (var _Item in ruleSetModel.Items)
                {
                   
                    var itemData = _Item.ItemProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();

                    foreach (var Item in itemData)
                    {
                        myItemCollection.Add(Item.Value.Text.value);
                    }
                }

                var RepeatItems = myItemCollection.GroupBy(x => x).Where(g => g.Count() > 1).Select(y => y.Key).ToList();

                if (RepeatItems.Count() > 0)
                {
                    Errors = Errors + "Item Name should not be same,";
                    resultStatus = 1;
                }

                foreach (var item in ruleSetModel.Items)
                {
                    string ItemName = "";

                    if (item.ItemProperties != null)
                    {
                        foreach (var _itemProperties in item.ItemProperties)
                        {
                          
                            var itemData = item.ItemProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();
                            foreach (var _itemData in itemData)
                            {
                                ItemName = _itemData.Value.Text.value;
                            }

                            if (_itemProperties.IsMandatory == true && _itemProperties.Value != null)
                            {
                                switch (_itemProperties.TypeId)
                                {
                                    case 1:
                                        if (_itemProperties.Value.Text.value == "" || _itemProperties.Value.Text.value == null)
                                        {
                                            Errors = Errors + _itemProperties.Name + "Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            ItemName = _itemProperties.Value.Text.value;
                                        }
                                        break;
                                    case 2:
                                        if (_itemProperties.Value.Choices.selectedchoice == "" || _itemProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_itemProperties.Value.OnOrOff.value == "" || _itemProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_itemProperties.Value.YesOrNo.value == "" || _itemProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_itemProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _itemProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_itemProperties.Value.YesOrNo.value == "" || _itemProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_itemProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                           
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_itemProperties.Value.Image.image == "" || _itemProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_itemProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                         
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_itemProperties.Value.Volume.units.selectedUnit == "" || _itemProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_itemProperties.Value.Number.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 15:
                                        if (_itemProperties.Value.DefaultDice.value == "" || _itemProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_itemProperties.Value.Calculation.formulae == "" || _itemProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_itemProperties.Value.Text.value == "" || _itemProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_itemProperties.IsMandatory == true && _itemProperties.Value == null)
                            {
                                Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                resultStatus = 1;
                            }
                            else if ((_itemProperties.TypeId == 7 || _itemProperties.TypeId == 12 || _itemProperties.TypeId == 14) && _itemProperties.IsMandatory == false && _itemProperties.Value != null)
                            {
                                switch (_itemProperties.TypeId)
                                {
                                    case 7:
                                        if (_itemProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_itemProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_itemProperties.Value.Number.value < 0)
                                        {

                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }
                        }
                    }
                }


            }

            if (ruleSetModel.Spells != null)
            {
               
                List<string> mySpellCollection = new List<string>();
                foreach (var _Spells in ruleSetModel.Spells)
                {
                    
                    var SpellData = _Spells.SpellProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();
                    foreach (var Spell in SpellData)
                    {
                        mySpellCollection.Add(Spell.Value.Text.value);
                    }
                }

                var RepeatItems = mySpellCollection.GroupBy(x => x).Where(g => g.Count() > 1).Select(y => y.Key).ToList();

                if (RepeatItems.Count() > 0)
                {
                    Errors = Errors + "Spell Name should not be same";
                    resultStatus = 1;
                }

                foreach (var Spell in ruleSetModel.Spells)
                {
                    string SpellName = "";

                    if (Spell.SpellProperties != null)
                    {
                        foreach (var _spellProperties in Spell.SpellProperties)
                        {
                          
                            var SpellData = Spell.SpellProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();
                            foreach (var _SpellData in SpellData)
                            {
                                SpellName = _SpellData.Value.Text.value;
                            }
                            if (_spellProperties.IsMandatory == true && _spellProperties.Value != null)
                            {
                                switch (_spellProperties.TypeId)
                                {
                                    case 1:
                                        if (_spellProperties.Value.Text.value == "" || _spellProperties.Value.Text.value == null)
                                        {
                                            Errors = Errors + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            SpellName = _spellProperties.Value.Text.value;
                                        }

                                        break;
                                    case 2:
                                        if (_spellProperties.Value.Choices.selectedchoice == "" || _spellProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_spellProperties.Value.OnOrOff.value == "" || _spellProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_spellProperties.Value.YesOrNo.value == "" || _spellProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_spellProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _spellProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_spellProperties.Value.YesOrNo.value == "" || _spellProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_spellProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                         
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_spellProperties.Value.Image.image == "" || _spellProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_spellProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                          
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_spellProperties.Value.Volume.units.selectedUnit == "" || _spellProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_spellProperties.Value.Number.value < 0)
                                        {
                                            
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_spellProperties.Value.DefaultDice.value == "" || _spellProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_spellProperties.Value.Calculation.formulae == "" || _spellProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_spellProperties.Value.Text.value == "" || _spellProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + "Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_spellProperties.IsMandatory == true && _spellProperties.Value == null)
                            {
                                Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                resultStatus = 1;
                            }

                            if ((_spellProperties.TypeId == 7 || _spellProperties.TypeId == 12 || _spellProperties.TypeId == 14) && _spellProperties.IsMandatory == false && _spellProperties.Value != null)
                            {
                                switch (_spellProperties.TypeId)
                                {
                                    case 7:
                                        if (_spellProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_spellProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_spellProperties.Value.Number.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }
                        }
                    }
                }


            }

            if (ruleSetModel.Abilities != null)
            {
            
                List<string> myAbilitieCollection = new List<string>();
                foreach (var _Abilitie in ruleSetModel.Abilities)
                {

                    var AbilitieData = _Abilitie.AbilityProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();

                    foreach (var Abilitie in AbilitieData)
                    {
                        myAbilitieCollection.Add(Abilitie.Value.Text.value);
                    }
                }

                var RepeatAbilitie = myAbilitieCollection.GroupBy(x => x).Where(g => g.Count() > 1).Select(y => y.Key).ToList();

                if (RepeatAbilitie.Count() > 0)
                {
                    Errors = Errors + "Ability Name should not be same";
                    resultStatus = 1;
                }

                foreach (var Abilitie in ruleSetModel.Abilities)
                {
                    string AbilityName = "";

                    if (Abilitie.AbilityProperties != null)
                    {

                      
                        var AbilitieData = Abilitie.AbilityProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();

                        foreach (var _AbilitieData in AbilitieData)
                        {
                            AbilityName = _AbilitieData.Value.Text.value;
                        }

                        foreach (var _AbilityProperties in Abilitie.AbilityProperties)
                        {
                            
                            if (_AbilityProperties.IsMandatory == true && _AbilityProperties.Value != null)
                            {
                                switch (_AbilityProperties.TypeId)
                                {
                                    case 1:
                                        if (_AbilityProperties.Value.Text.value == "" || _AbilityProperties.Value.Text.value == null)
                                        {
                                            Errors = Errors + _AbilityProperties.Name + "Required";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            AbilityName = _AbilityProperties.Value.Text.value;
                                        }

                                        break;
                                    case 2:
                                        if (_AbilityProperties.Value.Choices.selectedchoice == "" || _AbilityProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_AbilityProperties.Value.OnOrOff.value == "" || _AbilityProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_AbilityProperties.Value.YesOrNo.value == "" || _AbilityProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_AbilityProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _AbilityProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_AbilityProperties.Value.YesOrNo.value == "" || _AbilityProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_AbilityProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                          
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_AbilityProperties.Value.Image.image == "" || _AbilityProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_AbilityProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                          
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_AbilityProperties.Value.Volume.units.selectedUnit == "" || _AbilityProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_AbilityProperties.Value.Number.value < 0)
                                        {
                                           
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                          
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_AbilityProperties.Value.DefaultDice.value == "" || _AbilityProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_AbilityProperties.Value.Calculation.formulae == "" || _AbilityProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_AbilityProperties.Value.Text.value == "" || _AbilityProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_AbilityProperties.IsMandatory == true && _AbilityProperties.Value == null)
                            {
                                Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                resultStatus = 1;
                            }

                            if ((_AbilityProperties.TypeId == 7 || _AbilityProperties.TypeId == 12 || _AbilityProperties.TypeId == 14) && _AbilityProperties.IsMandatory == false && _AbilityProperties.Value != null)
                            {
                                switch (_AbilityProperties.TypeId)
                                {
                                    case 7:
                                        if (_AbilityProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_AbilityProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_AbilityProperties.Value.Number.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }
                        }
                    }
                }


            }

            return Errors;

        }
        public RuleSetViewModel GetRuleSetByRuleSetId(int? RuleSetId)
        {
            RuleSetViewModel _ruleSetViewModel = new RuleSetViewModel();
            List<RuleSetProperty> _ruleSetProperties = new List<RuleSetProperty>();
            //Getting RuleSet Data from Database by RulesetId
            var _dataQueryRuleSet = _context.RuleSets.Where(p => p.RulesetID == RuleSetId).SingleOrDefault();
            _ruleSetViewModel.Id = _dataQueryRuleSet.RulesetID;
            _ruleSetViewModel.UserId = _dataQueryRuleSet.UserId;
            _ruleSetViewModel.Name = _dataQueryRuleSet.Name;

            var _dataQueryRuleSetProperty = (from rulesetprop in _context.RulesetProperties
                                             join rpgType in _context.RPGSmithTypes on rulesetprop.TypeId equals rpgType.TypeID
                                             join rulesetpropval in _context.RulesetPropertyValues on rulesetprop.PropertyId equals rulesetpropval.PropertyId into ps
                                             from rulesetpropval in ps.DefaultIfEmpty()
                                             where rulesetprop.IsActive == 1 && rulesetpropval.RulesetID == RuleSetId
                                             orderby rulesetpropval.Id
                                             select new { Id = rulesetprop.PropertyId, Name = rulesetprop.Name, TypeId = rulesetprop.TypeId, Units = rpgType.Units, unitvalue = rulesetpropval.Value, RuleSetPropertyValueRuleSetId = rulesetpropval.RulesetID, Mandatory = rulesetprop.Mandatory }).ToList();

            foreach (var val in _dataQueryRuleSetProperty)
            {
                RuleSetProperty _ruleSetProperty = new RuleSetProperty();
                _ruleSetProperty.Units = new Utilities.RPGSmithTypes.Units();
                _ruleSetProperty.Id = val.Id;
                _ruleSetProperty.Name = val.Name;
                _ruleSetProperty.TypeId = val.TypeId;
                _ruleSetProperty.IsMandotary = val.Mandatory == true ? val.Mandatory : false;
                _ruleSetProperty.Value = Utility.ConvertTypeValueXMLtoClass(val.TypeId, val.unitvalue, val.Units);
                _ruleSetProperty.Units = Utility.ConvertUnitsXMLtoClass(val.TypeId, val.Units, val.unitvalue);
                _ruleSetProperties.Add(_ruleSetProperty);
            }
            if (_ruleSetProperties.Count == 0)
            {
                var _DefaultdataQueryRuleSetProperty = (from rulesetprop in _context.RulesetProperties
                                                        join rpgType in _context.RPGSmithTypes
                                                        on rulesetprop.TypeId equals rpgType.TypeID
                                                        where rulesetprop.IsActive == 1
                                                        select new { Id = rulesetprop.PropertyId, Name = rulesetprop.Name, TypeId = rulesetprop.TypeId, Units = rpgType.Units, Mandatory = rulesetprop.Mandatory }).ToList();

                foreach (var val in _DefaultdataQueryRuleSetProperty)
                {
                    RuleSetProperty _ruleSetProperty = new RuleSetProperty();

                    _ruleSetProperty.Id = val.Id;
                    _ruleSetProperty.Name = val.Name;
                    _ruleSetProperty.TypeId = val.TypeId;
                    _ruleSetProperty.IsMandotary = val.Mandatory == true ? val.Mandatory : false;
                    _ruleSetProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                    var selectedUnit = String.Empty;
                    if (val.Units != null && val.Units != "")
                    {
                        _ruleSetProperty.Units = Utility.ConvertUnitsXMLtoClass(val.TypeId, val.Units, selectedUnit);
                    }
                    _ruleSetProperties.Add(_ruleSetProperty);
                }
            }
            _ruleSetViewModel.Rulesetproperty = _ruleSetProperties;


            List<Items> _ruleSetItemsVM = new List<Items>();
            //Getting RuleSetItems based on RuleSetId
            var _ruleSetItems = _context.RuleSetItemsContents.Where(p => p.RulesetID == RuleSetId && p.Type == 1).ToList();
            foreach (var _ruleSetItem in _ruleSetItems)
            {
                Items _ruleSetItemVM = new Items();
                _ruleSetItemVM.ItemProperties = new List<ItemProperties>();
                var _ruleSetItemProperties = (from _itemProperties in _context.RulesetContentTypes
                                              join rpgType in _context.RPGSmithTypes on _itemProperties.TypeId equals rpgType.TypeID
                                              join _itemPropertyValue in _context.Items on _itemProperties.Id equals _itemPropertyValue.ContentTypeId into ps
                                              from _itemPropertyValue in ps.DefaultIfEmpty()
                                              where _itemPropertyValue.ContentId == _ruleSetItem.ContentId
                                              select new
                                              {
                                                  Id = _itemPropertyValue.ItemId,
                                                  ContentTypeId = _itemPropertyValue.ContentTypeId,
                                                  ContentId = _itemPropertyValue.ContentId,
                                                  TypeId = _itemProperties.TypeId,
                                                  Name = _itemProperties.Name,
                                                  Description = _itemProperties.Description,
                                                  Mandatory = _itemProperties.Mandatory,
                                                  Value = _itemPropertyValue.value,
                                                  Units = rpgType.Units,
                                              }).ToList();

                foreach (var _ruleSetItemProperty in _ruleSetItemProperties)
                {
                    var _itemProperties = new ItemProperties();
                    _itemProperties.Id = _ruleSetItemProperty.Id;
                    _itemProperties.ContentTypeId = _ruleSetItemProperty.ContentTypeId;
                    _itemProperties.ContentId = _ruleSetItemProperty.ContentId;
                    _itemProperties.TypeId = _ruleSetItemProperty.TypeId;
                    _itemProperties.Name = _ruleSetItemProperty.Name;
                    _itemProperties.IsMandatory = _ruleSetItemProperty.Mandatory == true ? _ruleSetItemProperty.Mandatory : false;
                    _itemProperties.Description = _ruleSetItemProperty.Description;
                    _itemProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetItemProperty.TypeId, _ruleSetItemProperty.Value, _ruleSetItemProperty.Units);
                    _ruleSetItemVM.ItemProperties.Add(_itemProperties);
                }
                //Declare Model
                var _itemTileProperties = new ItemProperties();
                //Getting Item Tile Properties from db
                var ItemTileProperties = _context.Items.Where(p => p.ContentId == _ruleSetItem.ContentId && p.ContentTypeId == null).ToList();
                foreach (var _itemTileProperty in ItemTileProperties)
                {
                    // Setting RuleSet Item Tile Properties
                    _itemTileProperties = SetRuleSetContents(_itemTileProperty, null, null).ItemProperty;
                    _ruleSetItemVM.ItemProperties.Add(_itemTileProperties);
                }
                //Filling the Associated Spells into the Items.
                List<Spells> _ruleSetAssociatedSpellsVM = new List<Spells>();
                var _ruleSetAssociatedSpellContentIds = (from _ruleSetAssociatedItemsContents in _context.RuleSetItemsContents
                                                         join _itemSpells in _context.ItemSpells on _ruleSetAssociatedItemsContents.ContentId equals _itemSpells.ItemId
                                                         where _itemSpells.ItemId == _ruleSetItem.ContentId
                                                         select new
                                                         {
                                                             ContentId = _itemSpells.SpellId
                                                         }).ToList();

                if (_ruleSetAssociatedSpellContentIds.Count > 0)
                {
                    _ruleSetItemVM.AssociatedSpells = new List<Spells>();

                    foreach (var _ruleSetAssociatedSpellContentId in _ruleSetAssociatedSpellContentIds)
                    {
                        Spells _ruleAssociatedSetSpellVM = new Spells();
                        _ruleAssociatedSetSpellVM.SpellProperties = new List<SpellProperties>();
                        var _ruleSetAssociatedSpellProperties = (from _spellProperties in _context.RulesetContentTypes
                                                                 join rpgType in _context.RPGSmithTypes on _spellProperties.TypeId equals rpgType.TypeID
                                                                 join _spellPropertyValue in _context.Spells on _spellProperties.Id equals _spellPropertyValue.ContentTypeId into ps
                                                                 from _spellPropertyValue in ps.DefaultIfEmpty()
                                                                 where _spellPropertyValue.ContentId == _ruleSetAssociatedSpellContentId.ContentId
                                                                 select new
                                                                 {
                                                                     Id = _spellPropertyValue.SpellId,
                                                                     ContentTypeId = _spellPropertyValue.ContentTypeId,
                                                                     TypeId = _spellProperties.TypeId,
                                                                     Name = _spellProperties.Name,
                                                                     Description = _spellProperties.Description,
                                                                     Mandatory = _spellProperties.Mandatory,
                                                                     Value = _spellPropertyValue.value,
                                                                     Units = rpgType.Units
                                                                 }).ToList();

                        foreach (var _ruleSetSpellProperty in _ruleSetAssociatedSpellProperties)
                        {
                            var _spellProperties = new SpellProperties();
                            _spellProperties.Id = _ruleSetSpellProperty.Id;
                            _spellProperties.ContentTypeId = Convert.ToInt32(_ruleSetSpellProperty.ContentTypeId);
                            _spellProperties.TypeId = _ruleSetSpellProperty.TypeId;
                            _spellProperties.Name = _ruleSetSpellProperty.Name;
                            _spellProperties.IsMandatory = _ruleSetSpellProperty.Mandatory == true ? _ruleSetSpellProperty.Mandatory : false;
                            _spellProperties.Description = _ruleSetSpellProperty.Description;
                            _spellProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetSpellProperty.TypeId, _ruleSetSpellProperty.Value, _ruleSetSpellProperty.Units);

                            _ruleAssociatedSetSpellVM.SpellProperties.Add(_spellProperties);
                        }
                        //Declare Model
                        var _spellTileProperties = new SpellProperties();
                        //Getting Spell Tile Properties from db
                        var SpellTileProperties = _context.Spells.Where(p => p.ContentId == _ruleSetAssociatedSpellContentId.ContentId && p.ContentTypeId == null).ToList();
                        foreach (var _spellTileProperty in SpellTileProperties)
                        {
                            // Setting RuleSet Spell Tile Properties
                            _spellTileProperties = SetRuleSetContents(null, _spellTileProperty, null).SpellProperty;
                            _ruleAssociatedSetSpellVM.SpellProperties.Add(_spellTileProperties);
                        }
                        _ruleSetItemVM.AssociatedSpells.Add(_ruleAssociatedSetSpellVM);
                    }

                }

                //Filling the Associated Abilities into the Items.
                List<Spells> _ruleSetAssociatedAbilitiesVM = new List<Spells>();
                var _ruleSetAssociatedAbilityContentIds = (from _ruleSetAssociatedItemsContents in _context.RuleSetItemsContents
                                                           join _itemAbilities in _context.ItemAbilities on _ruleSetAssociatedItemsContents.ContentId equals _itemAbilities.ItemId
                                                           where _itemAbilities.ItemId == _ruleSetItem.ContentId
                                                           select new
                                                           {
                                                               ContentId = _itemAbilities.AbilityId
                                                           }).ToList();

                if (_ruleSetAssociatedAbilityContentIds.Count > 0)
                {
                    _ruleSetItemVM.AssociatedAbilities = new List<Abilities>();

                    foreach (var _ruleSetAssociatedAbilityContentId in _ruleSetAssociatedAbilityContentIds)
                    {
                        Abilities _ruleAssociatedSetAbilityVM = new Abilities();
                        _ruleAssociatedSetAbilityVM.AbilityProperties = new List<AbilityProperties>();
                        var _ruleSetAssociatedAbilityProperties = (from _abilityProperties in _context.RulesetContentTypes
                                                                   join rpgType in _context.RPGSmithTypes on _abilityProperties.TypeId equals rpgType.TypeID
                                                                   join _abilityPropertyValue in _context.Abilities on _abilityProperties.Id equals _abilityPropertyValue.ContentTypeId into ps
                                                                   from _abilityPropertyValue in ps.DefaultIfEmpty()
                                                                   where _abilityPropertyValue.ContentId == _ruleSetAssociatedAbilityContentId.ContentId
                                                                   select new
                                                                   {
                                                                       Id = _abilityPropertyValue.AbilityId,
                                                                       ContentTypeId = _abilityPropertyValue.ContentTypeId,
                                                                       TypeId = _abilityProperties.TypeId,
                                                                       Name = _abilityProperties.Name,
                                                                       Description = _abilityProperties.Description,
                                                                       Mandatory = _abilityProperties.Mandatory,
                                                                       Value = _abilityPropertyValue.value,
                                                                       Units = rpgType.Units
                                                                   }).ToList();

                        foreach (var _ruleSetAbilityProperty in _ruleSetAssociatedAbilityProperties)
                        {
                            var _abilityProperties = new AbilityProperties();
                            _abilityProperties.Id = _ruleSetAbilityProperty.Id;
                            _abilityProperties.ContentTypeId = Convert.ToInt32(_ruleSetAbilityProperty.ContentTypeId);
                            _abilityProperties.TypeId = _ruleSetAbilityProperty.TypeId;
                            _abilityProperties.Name = _ruleSetAbilityProperty.Name;
                            _abilityProperties.IsMandatory = _ruleSetAbilityProperty.Mandatory == true ? _ruleSetAbilityProperty.Mandatory : false;
                            _abilityProperties.Description = _ruleSetAbilityProperty.Description;
                            _abilityProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetAbilityProperty.TypeId, _ruleSetAbilityProperty.Value, _ruleSetAbilityProperty.Units);

                            _ruleAssociatedSetAbilityVM.AbilityProperties.Add(_abilityProperties);
                        }
                        //Declare Model
                        var _abilityTileProperties = new AbilityProperties();
                        //Getting Spell Tile Properties from db
                        var AbilityTileProperties = _context.Abilities.Where(p => p.ContentId == _ruleSetAssociatedAbilityContentId.ContentId && p.ContentTypeId == null).ToList();
                        foreach (var _abilityTileProperty in AbilityTileProperties)
                        {
                            // Setting RuleSet Spell Tile Properties
                            _abilityTileProperties = SetRuleSetContents(null, null, _abilityTileProperty).AbilityProperty;
                            _ruleAssociatedSetAbilityVM.AbilityProperties.Add(_abilityTileProperties);
                        }
                        _ruleSetItemVM.AssociatedAbilities.Add(_ruleAssociatedSetAbilityVM);
                    }

                }
                _ruleSetItemVM.ItemProperties = _ruleSetItemVM.ItemProperties.Where(p => p.ContentId != null || p.tile != null).ToList();
                _ruleSetItemsVM.Add(_ruleSetItemVM);
            }

            //Filling Items Metadata for RuleSet
            var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 1 && x.IsActive == true && x.IsRuleSet == true).Select(
             x => new
             {
                 Id = x.Id,
                 Name = x.Name,
                 Description = x.Description,
                 TypeId = x.TypeId,
                 Mandatory = x.Mandatory,
                 Metadata = x.Metadata,
             }
             ).ToList();

            foreach (var val in _dataQuery)
            {
                ItemProperties _ruleSetItemProperty = new ItemProperties();
                _ruleSetItemProperty.Id = val.Id;
                _ruleSetItemProperty.Name = val.Name;
                _ruleSetItemProperty.Description = val.Description;
                _ruleSetItemProperty.TypeId = val.TypeId;
                _ruleSetItemProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
                _ruleSetItemProperty.Value = (val.Metadata != null && val.Metadata != "") ?
                                             Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata) :
                                             _ruleSetItemProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                _ruleSetViewModel.RuleSetMetaData.ItemProperties.Add(_ruleSetItemProperty);
            }
            //Getting RuleSetSpells based on RuleSetId
            List<Spells> _ruleSetSpellsVM = new List<Spells>();
            var _ruleSetSpells = _context.RuleSetItemsContents.Where(p => p.RulesetID == RuleSetId && p.Type == 2).ToList();
            foreach (var _ruleSetSpell in _ruleSetSpells)
            {
                Spells _ruleSetSpellVM = new Spells();
                _ruleSetSpellVM.SpellProperties = new List<SpellProperties>();
                var _ruleSetSpellProperties = (from _spellProperties in _context.RulesetContentTypes
                                               join rpgType in _context.RPGSmithTypes on _spellProperties.TypeId equals rpgType.TypeID
                                               join _spellPropertyValue in _context.Spells on _spellProperties.Id equals _spellPropertyValue.ContentTypeId into ps
                                               from _spellPropertyValue in ps.DefaultIfEmpty()
                                               where _spellPropertyValue.ContentId == _ruleSetSpell.ContentId
                                               select new
                                               {
                                                   Id = _spellPropertyValue.SpellId,
                                                   ContentTypeId = _spellPropertyValue.ContentTypeId,
                                                   ContentId = _spellPropertyValue.ContentId,
                                                   TypeId = _spellProperties.TypeId,
                                                   Name = _spellProperties.Name,
                                                   Description = _spellProperties.Description,
                                                   Mandatory = _spellProperties.Mandatory,
                                                   Value = _spellPropertyValue.value,
                                                   Units = rpgType.Units
                                               }).ToList();

                foreach (var _ruleSetSpellProperty in _ruleSetSpellProperties)
                {
                    var _spellProperties = new SpellProperties();
                    _spellProperties.Id = _ruleSetSpellProperty.Id;
                    _spellProperties.ContentTypeId = Convert.ToInt32(_ruleSetSpellProperty.ContentTypeId);
                    _spellProperties.ContentId = _ruleSetSpellProperty.ContentId;
                    _spellProperties.TypeId = _ruleSetSpellProperty.TypeId;
                    _spellProperties.Name = _ruleSetSpellProperty.Name;
                    _spellProperties.IsMandatory = _ruleSetSpellProperty.Mandatory == true ? _ruleSetSpellProperty.Mandatory : false;
                    _spellProperties.Description = _ruleSetSpellProperty.Description;
                    _spellProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetSpellProperty.TypeId, _ruleSetSpellProperty.Value, _ruleSetSpellProperty.Units);
                    _ruleSetSpellVM.SpellProperties.Add(_spellProperties);
                }
                //Declare Model
                var _spellTileProperties = new SpellProperties();
                //Getting Spell Tile Properties from db
                var SpellTileProperties = _context.Spells.Where(p => p.ContentId == _ruleSetSpell.ContentId && p.ContentTypeId == null).ToList();
                foreach (var _spellTileProperty in SpellTileProperties)
                {
                    // Setting RuleSet Spell Tile Properties
                    _spellTileProperties = SetRuleSetContents(null, _spellTileProperty, null).SpellProperty;
                    _ruleSetSpellVM.SpellProperties.Add(_spellTileProperties);
                }
                _ruleSetSpellVM.SpellProperties = _ruleSetSpellVM.SpellProperties.Where(p => p.ContentId != null || p.tile != null).ToList();
                _ruleSetSpellsVM.Add(_ruleSetSpellVM);
            }
            //Filling Spells Metadata for RuleSet
            _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 2).Select(
             x => new
             {
                 Id = x.Id,
                 Name = x.Name,
                 Description = x.Description,
                 TypeId = x.TypeId,
                 Mandatory = x.Mandatory,
                 Metadata = x.Metadata
             }
             ).ToList();

            foreach (var val in _dataQuery)
            {
                SpellProperties _ruleSetSpellProperty = new SpellProperties();
                _ruleSetSpellProperty.Id = val.Id;
                _ruleSetSpellProperty.Name = val.Name;
                _ruleSetSpellProperty.Description = val.Description;
                _ruleSetSpellProperty.TypeId = val.TypeId;
                _ruleSetSpellProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
                _ruleSetSpellProperty.Value = (val.Metadata != null && val.Metadata != "") ?
                                               Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata) :
                                               Utility.GetTypeClassMetaData(val.TypeId);
                _ruleSetViewModel.RuleSetMetaData.SpellProperties.Add(_ruleSetSpellProperty);
            }
            //Getting RuleSetSpells based on RuleSetId
            List<Abilities> _ruleSetAbilitiesVM = new List<Abilities>();
            var _ruleSetSAbilities = _context.RuleSetItemsContents.Where(p => p.RulesetID == RuleSetId && p.Type == 3).ToList();
            foreach (var _ruleSetAbility in _ruleSetSAbilities)
            {
                Abilities _ruleSetAbilityVM = new Abilities();
                _ruleSetAbilityVM.AbilityProperties = new List<AbilityProperties>();
                var _ruleSetAbilityProperties = (from _abilityProperties in _context.RulesetContentTypes
                                                 join rpgType in _context.RPGSmithTypes on _abilityProperties.TypeId equals rpgType.TypeID
                                                 join _abilityPropertyValue in _context.Abilities on _abilityProperties.Id equals _abilityPropertyValue.ContentTypeId into ps
                                                 from _abilityPropertyValue in ps.DefaultIfEmpty()
                                                 where _abilityPropertyValue.ContentId == _ruleSetAbility.ContentId
                                                 select new
                                                 {
                                                     Id = _abilityPropertyValue.AbilityId,
                                                     ContentTypeId = _abilityPropertyValue.ContentTypeId,
                                                     ContentId = _abilityPropertyValue.ContentId,
                                                     TypeId = _abilityProperties.TypeId,
                                                     Name = _abilityProperties.Name,
                                                     Description = _abilityProperties.Description,
                                                     Mandatory = _abilityProperties.Mandatory,
                                                     Value = _abilityPropertyValue.value,
                                                     Units = rpgType.Units
                                                 }).ToList();

                foreach (var _ruleSetAbilityProperty in _ruleSetAbilityProperties)
                {
                    var _abilityProperties = new AbilityProperties();
                    _abilityProperties.Id = _ruleSetAbilityProperty.Id;
                    _abilityProperties.ContentTypeId = Convert.ToInt32(_ruleSetAbilityProperty.ContentTypeId);
                    _abilityProperties.ContentId = Convert.ToInt32(_ruleSetAbilityProperty.ContentId);
                    _abilityProperties.TypeId = _ruleSetAbilityProperty.TypeId;
                    _abilityProperties.Name = _ruleSetAbilityProperty.Name;
                    _abilityProperties.IsMandatory = _ruleSetAbilityProperty.Mandatory == true ? _ruleSetAbilityProperty.Mandatory : false;
                    _abilityProperties.Description = _ruleSetAbilityProperty.Description;
                    _abilityProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetAbilityProperty.TypeId, _ruleSetAbilityProperty.Value, _ruleSetAbilityProperty.Units);

                    _ruleSetAbilityVM.AbilityProperties.Add(_abilityProperties);
                }
                //Declare Model
                var _abilityTileProperties = new AbilityProperties();
                //Getting Ability Tile Properties from db
                var AbilityTileProperties = _context.Abilities.Where(p => p.ContentId == _ruleSetAbility.ContentId && p.ContentTypeId == null).ToList();
                foreach (var _abilityTileProperty in AbilityTileProperties)
                {
                    // Setting RuleSet Ability Tile Properties
                    _abilityTileProperties = SetRuleSetContents(null, null, _abilityTileProperty).AbilityProperty;
                    _ruleSetAbilityVM.AbilityProperties.Add(_abilityTileProperties);
                }
                _ruleSetAbilityVM.AbilityProperties = _ruleSetAbilityVM.AbilityProperties.Where(p => p.ContentId != null || p.tile != null).ToList();
                _ruleSetAbilitiesVM.Add(_ruleSetAbilityVM);
            }
            //Filling Ability Matadata for RuleSet
            _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 3).Select(
              x => new
              {
                  Id = x.Id,
                  Name = x.Name,
                  Description = x.Description,
                  TypeId = x.TypeId,
                  Mandatory = x.Mandatory,
                  Metadata = x.Metadata
              }
              ).ToList();

            foreach (var val in _dataQuery)
            {
                AbilityProperties _ruleSetAbilityProperty = new AbilityProperties();
                _ruleSetAbilityProperty.Id = val.Id;
                _ruleSetAbilityProperty.Name = val.Name;
                _ruleSetAbilityProperty.Description = val.Description;
                _ruleSetAbilityProperty.TypeId = val.TypeId;
                _ruleSetAbilityProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
                _ruleSetAbilityProperty.Value = (val.Metadata != null && val.Metadata != "") ?
                                                 Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata) :
                                                 Utility.GetTypeClassMetaData(val.TypeId);
                _ruleSetViewModel.RuleSetMetaData.AbilityProperties.Add(_ruleSetAbilityProperty);
            }
            List<Corestats> corestats = new List<Corestats>();
            var _dataQueryCoreStat = _context.CoreStats.Where(x => x.RulesetID == RuleSetId);

            if (_dataQueryCoreStat != null)
            {
                foreach (var type in _dataQueryCoreStat.ToList())
                {
                    Corestats stats = new Corestats();
                    stats.Id = type.CorestatID;
                    stats.TypeId = Convert.ToInt32(type.TypeId);
                    stats.Name = type.Name;
                    stats.Value = (type.Metadata == "System.Xml.XmlDocument" || type.Metadata == "" || type.Metadata == null) ? Utility.ConvertTypeMetaDataXMLtoClass(type.TypeId, "") : Utility.ConvertTypeMetaDataXMLtoClass(type.TypeId, type.Metadata);
                    stats.Description = type.Description;
                    corestats.Add(stats);
                }
            }
            _ruleSetViewModel.RuleSetMetaData.Corestats = new Corestats();
            var _tempCustomeTypeValue = new CustomTypes();
            _tempCustomeTypeValue = Utility.GetTypeClassMetaData(16);
            _ruleSetViewModel.RuleSetMetaData.Corestats.Value = _tempCustomeTypeValue;
            //Setting Tile Style View Model
            _ruleSetViewModel.RuleSetMetaData.Tile.Styles = new Style();
            //Getting All Tile Types From db
            var dbTileTypes = new TileService().GetAllTileTypes();
            //Setting Tile View Model and Tile Types in Item Lavel
            for (var i = 0; i < dbTileTypes.Count(); i++)
            {
                _ruleSetViewModel.RuleSetMetaData.TileTypes.Add(new ViewModels.TileTypes()
                {
                    TileId = dbTileTypes[i].TileTypeId,
                    TileType = dbTileTypes[i].TileTypeName,
                    Value = Utility.GetTileTypeClassMetaData(dbTileTypes[i].TileTypeId)
                });
            }
            //Filling All Model Values(Items,Spells,Abilities,Corestats) in RuleSetViewModel
            _ruleSetViewModel.Rulesetproperty = _ruleSetProperties;
            _ruleSetViewModel.Corestats = corestats;
            _ruleSetViewModel.Items = _ruleSetItemsVM;
            _ruleSetViewModel.Spells = _ruleSetSpellsVM;
            _ruleSetViewModel.Abilities = _ruleSetAbilitiesVM;
            return _ruleSetViewModel;
        }
        public RuleSetViewModel GetRuleSetDetailsByCharacterProfileId(int? CharacterProfileId)
        {
            RuleSetViewModel _ruleSetViewModel = new RuleSetViewModel();
            List<RuleSetProperty> _ruleSetProperties = new List<RuleSetProperty>();
            var CharacterRuleSetId = _context.CharacterProfiles.Where(p => p.CharacterProfileId == CharacterProfileId).SingleOrDefault().RulesetId;
            //Getting RuleSet Data from Database by RulesetId
            var _dataQueryRuleSet = _context.RuleSets.Where(p => p.RulesetID == CharacterRuleSetId).SingleOrDefault();
            _ruleSetViewModel.Id = _dataQueryRuleSet.RulesetID;
            _ruleSetViewModel.UserId = _dataQueryRuleSet.UserId;
            _ruleSetViewModel.Name = _dataQueryRuleSet.Name;

            var _dataQueryRuleSetProperty = (from rulesetprop in _context.RulesetProperties
                                             join rpgType in _context.RPGSmithTypes on rulesetprop.TypeId equals rpgType.TypeID
                                             join rulesetpropval in _context.RulesetPropertyValues on rulesetprop.PropertyId equals rulesetpropval.PropertyId into ps
                                             from rulesetpropval in ps.DefaultIfEmpty()
                                             where rulesetprop.IsActive == 1
                                             select new { Id = rulesetprop.PropertyId, Name = rulesetprop.Name, TypeId = rulesetprop.TypeId, Units = rpgType.Units, unitvalue = rulesetpropval.Value, RuleSetPropertyValueRuleSetId = rulesetpropval.RulesetID }).ToList();

            foreach (var val in _dataQueryRuleSetProperty)
            {
                if (val.RuleSetPropertyValueRuleSetId == CharacterRuleSetId)
                {
                    RuleSetProperty _ruleSetProperty = new RuleSetProperty();
                    _ruleSetProperty.Units = new Utilities.RPGSmithTypes.Units();
                    _ruleSetProperty.Id = val.Id;
                    _ruleSetProperty.Name = val.Name;
                    _ruleSetProperty.TypeId = val.TypeId;
                    _ruleSetProperty.Value = Utility.ConvertTypeValueXMLtoClass(val.TypeId, val.unitvalue, val.Units);
                    _ruleSetProperty.Units = Utility.ConvertUnitsXMLtoClass(val.TypeId, val.Units, val.unitvalue);
                    _ruleSetProperties.Add(_ruleSetProperty);
                }

            }
            if (_ruleSetProperties.Count == 0)
            {
                var _DefaultdataQueryRuleSetProperty = (from rulesetprop in _context.RulesetProperties
                                                        join rpgType in _context.RPGSmithTypes
                                                        on rulesetprop.TypeId equals rpgType.TypeID
                                                        where rulesetprop.IsActive == 1
                                                        select new { Id = rulesetprop.PropertyId, Name = rulesetprop.Name, TypeId = rulesetprop.TypeId, Units = rpgType.Units, Mandatory = rulesetprop.Mandatory }).ToList();

                foreach (var val in _DefaultdataQueryRuleSetProperty)
                {
                    RuleSetProperty _ruleSetProperty = new RuleSetProperty();

                    _ruleSetProperty.Id = val.Id;
                    _ruleSetProperty.Name = val.Name;
                    _ruleSetProperty.TypeId = val.TypeId;
                    _ruleSetProperty.IsMandotary = val.Mandatory == true ? val.Mandatory : false;
                    _ruleSetProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                    var selectedUnit = String.Empty;
                    if (val.Units != null && val.Units != "")
                    {
                        _ruleSetProperty.Units = Utility.ConvertUnitsXMLtoClass(val.TypeId, val.Units, selectedUnit);
                    }
                    _ruleSetProperties.Add(_ruleSetProperty);
                }
            }
            _ruleSetViewModel.Rulesetproperty = _ruleSetProperties;


            List<Items> _ruleSetItemsVM = new List<Items>();
            //Getting RuleSetItems based on RuleSetId
            var _ruleSetItems = _context.RuleSetItemsContents.Where(p => p.RulesetID == CharacterRuleSetId && p.Type == 1).ToList();
            foreach (var _ruleSetItem in _ruleSetItems)
            {
                Items _ruleSetItemVM = new Items();
                _ruleSetItemVM.ItemProperties = new List<ItemProperties>();
                var _ruleSetItemProperties = (from _itemProperties in _context.RulesetContentTypes
                                              join rpgType in _context.RPGSmithTypes on _itemProperties.TypeId equals rpgType.TypeID
                                              join _itemPropertyValue in _context.Items on _itemProperties.Id equals _itemPropertyValue.ContentTypeId into ps
                                              from _itemPropertyValue in ps.DefaultIfEmpty()
                                              where _itemPropertyValue.ContentId == _ruleSetItem.ContentId
                                              select new
                                              {
                                                  Id = _itemPropertyValue.ItemId,
                                                  ContentTypeId = _itemPropertyValue.ContentTypeId,
                                                  TypeId = _itemProperties.TypeId,
                                                  Name = _itemProperties.Name,
                                                  Description = _itemProperties.Description,
                                                  Value = _itemPropertyValue.value,
                                                  Units = rpgType.Units
                                              }).ToList();

                foreach (var _ruleSetItemProperty in _ruleSetItemProperties)
                {
                    var _itemProperties = new ItemProperties();
                    _itemProperties.Id = _ruleSetItemProperty.Id;
                    _itemProperties.ContentTypeId = _ruleSetItemProperty.ContentTypeId;
                    _itemProperties.TypeId = _ruleSetItemProperty.TypeId;
                    _itemProperties.Name = _ruleSetItemProperty.Name;
                    _itemProperties.Description = _ruleSetItemProperty.Description;
                    _itemProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetItemProperty.TypeId, _ruleSetItemProperty.Value, _ruleSetItemProperty.Units);
                    _ruleSetItemVM.ItemProperties.Add(_itemProperties);
                }

                _ruleSetItemsVM.Add(_ruleSetItemVM);
            }
            //Filling Items Metadata for RuleSet
            var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 1).Select(
             x => new
             {
                 Id = x.Id,
                 Name = x.Name,
                 Description = x.Description,
                 TypeId = x.TypeId,
                 Metadata = x.Metadata,
             }
             ).ToList();

            foreach (var val in _dataQuery)
            {
                ItemProperties _ruleSetItemProperty = new ItemProperties();
                _ruleSetItemProperty.Id = val.Id;
                _ruleSetItemProperty.Name = val.Name;
                _ruleSetItemProperty.Description = val.Description;
                _ruleSetItemProperty.TypeId = val.TypeId;

                if (val.Metadata != null && val.Metadata != "")
                {
                    _ruleSetItemProperty.Value = Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata);
                }
                else
                {
                    _ruleSetItemProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                }

                _ruleSetViewModel.RuleSetMetaData.ItemProperties.Add(_ruleSetItemProperty);
            }
            //Getting RuleSetSpells based on RuleSetId
            List<Spells> _ruleSetSpellsVM = new List<Spells>();
            var _ruleSetSpells = _context.RuleSetItemsContents.Where(p => p.RulesetID == CharacterRuleSetId && p.Type == 2).ToList();
            foreach (var _ruleSetSpell in _ruleSetSpells)
            {
                Spells _ruleSetSpellVM = new Spells();
                _ruleSetSpellVM.SpellProperties = new List<SpellProperties>();
                var _ruleSetSpellProperties = (from _spellProperties in _context.RulesetContentTypes
                                               join rpgType in _context.RPGSmithTypes on _spellProperties.TypeId equals rpgType.TypeID
                                               join _spellPropertyValue in _context.Spells on _spellProperties.Id equals _spellPropertyValue.ContentTypeId into ps
                                               from _spellPropertyValue in ps.DefaultIfEmpty()
                                               where _spellPropertyValue.ContentId == _ruleSetSpell.ContentId
                                               select new
                                               {
                                                   Id = _spellPropertyValue.SpellId,
                                                   ContentTypeId = _spellPropertyValue.ContentTypeId,
                                                   TypeId = _spellProperties.TypeId,
                                                   Name = _spellProperties.Name,
                                                   Description = _spellProperties.Description,
                                                   Value = _spellPropertyValue.value,
                                                   Units = rpgType.Units
                                               }).ToList();

                foreach (var _ruleSetSpellProperty in _ruleSetSpellProperties)
                {
                    var _spellProperties = new SpellProperties();
                    _spellProperties.Id = _ruleSetSpellProperty.Id;
                    _spellProperties.ContentTypeId = Convert.ToInt32(_ruleSetSpellProperty.ContentTypeId);
                    _spellProperties.TypeId = _ruleSetSpellProperty.TypeId;
                    _spellProperties.Name = _ruleSetSpellProperty.Name;
                    _spellProperties.Description = _ruleSetSpellProperty.Description;
                    _spellProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetSpellProperty.TypeId, _ruleSetSpellProperty.Value, _ruleSetSpellProperty.Units);

                    _ruleSetSpellVM.SpellProperties.Add(_spellProperties);
                }

                _ruleSetSpellsVM.Add(_ruleSetSpellVM);
            }
            //Filling Spells Metadata for RuleSet
            _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 2).Select(
             x => new
             {
                 Id = x.Id,
                 Name = x.Name,
                 Description = x.Description,
                 TypeId = x.TypeId,
                 Metadata = x.Metadata
             }
             ).ToList();

            foreach (var val in _dataQuery)
            {
                SpellProperties _ruleSetSpellProperty = new SpellProperties();
                _ruleSetSpellProperty.Id = val.Id;
                _ruleSetSpellProperty.Name = val.Name;
                _ruleSetSpellProperty.Description = val.Description;
                _ruleSetSpellProperty.TypeId = val.TypeId;

                if (val.Metadata != null && val.Metadata != "")
                {
                    _ruleSetSpellProperty.Value = Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata);
                }
                else
                {
                    _ruleSetSpellProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                }

                _ruleSetViewModel.RuleSetMetaData.SpellProperties.Add(_ruleSetSpellProperty);
            }
            //Getting RuleSetSpells based on RuleSetId
            List<Abilities> _ruleSetAbilitiesVM = new List<Abilities>();
            var _ruleSetSAbilities = _context.RuleSetItemsContents.Where(p => p.RulesetID == CharacterRuleSetId && p.Type == 3).ToList();
            foreach (var _ruleSetAbility in _ruleSetSAbilities)
            {
                Abilities _ruleSetAbilityVM = new Abilities();
                _ruleSetAbilityVM.AbilityProperties = new List<AbilityProperties>();
                var _ruleSetAbilityProperties = (from _abilityProperties in _context.RulesetContentTypes
                                                 join rpgType in _context.RPGSmithTypes on _abilityProperties.TypeId equals rpgType.TypeID
                                                 join _abilityPropertyValue in _context.Abilities on _abilityProperties.Id equals _abilityPropertyValue.ContentTypeId into ps
                                                 from _abilityPropertyValue in ps.DefaultIfEmpty()
                                                 where _abilityPropertyValue.ContentId == _ruleSetAbility.ContentId
                                                 select new
                                                 {
                                                     Id = _abilityPropertyValue.AbilityId,
                                                     ContentTypeId = _abilityPropertyValue.ContentTypeId,
                                                     TypeId = _abilityProperties.TypeId,
                                                     Name = _abilityProperties.Name,
                                                     Description = _abilityProperties.Description,
                                                     Value = _abilityPropertyValue.value,
                                                     Units = rpgType.Units
                                                 }).ToList();

                foreach (var _ruleSetAbilityProperty in _ruleSetAbilityProperties)
                {
                    var _abilityProperties = new AbilityProperties();
                    _abilityProperties.Id = _ruleSetAbilityProperty.Id;
                    _abilityProperties.ContentTypeId = Convert.ToInt32(_ruleSetAbilityProperty.ContentTypeId);
                    _abilityProperties.TypeId = _ruleSetAbilityProperty.TypeId;
                    _abilityProperties.Name = _ruleSetAbilityProperty.Name;
                    _abilityProperties.Description = _ruleSetAbilityProperty.Description;
                    _abilityProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetAbilityProperty.TypeId, _ruleSetAbilityProperty.Value, _ruleSetAbilityProperty.Units);

                    _ruleSetAbilityVM.AbilityProperties.Add(_abilityProperties);
                }

                _ruleSetAbilitiesVM.Add(_ruleSetAbilityVM);
            }
            //Filling Ability Matadata for RuleSet
            _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 3).Select(
              x => new
              {
                  Id = x.Id,
                  Name = x.Name,
                  Description = x.Description,
                  TypeId = x.TypeId,
                  Metadata = x.Metadata
              }
              ).ToList();

            foreach (var val in _dataQuery)
            {
                AbilityProperties _ruleSetAbilityProperty = new AbilityProperties();
                _ruleSetAbilityProperty.Id = val.Id;
                _ruleSetAbilityProperty.Name = val.Name;
                _ruleSetAbilityProperty.Description = val.Description;
                _ruleSetAbilityProperty.TypeId = val.TypeId;

                if (val.Metadata != null && val.Metadata != "")
                {
                    _ruleSetAbilityProperty.Value = Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata);
                }
                else
                {
                    _ruleSetAbilityProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                }

                _ruleSetViewModel.RuleSetMetaData.AbilityProperties.Add(_ruleSetAbilityProperty);
            }
            List<Corestats> corestats = new List<Corestats>();
            var _dataQueryCoreStat = _context.CoreStats.Where(x => x.RulesetID == CharacterRuleSetId);

            if (_dataQueryCoreStat != null)
            {
                foreach (var type in _dataQueryCoreStat.ToList())
                {
                    Corestats stats = new Corestats();
                    stats.Id = type.CorestatID;
                    stats.TypeId = Convert.ToInt32(type.TypeId);
                    stats.Name = type.Name;
                    stats.Value = Utility.ConvertTypeMetaDataXMLtoClass(type.TypeId, type.Metadata);
                    stats.Description = type.Description;
                    corestats.Add(stats);
                }
            }
            //Filling All Model Values(Items,Spells,Abilities,Corestats) in RuleSetViewModel
            _ruleSetViewModel.Rulesetproperty = _ruleSetProperties;
            _ruleSetViewModel.Corestats = corestats;
            _ruleSetViewModel.Items = _ruleSetItemsVM;
            _ruleSetViewModel.Spells = _ruleSetSpellsVM;
            _ruleSetViewModel.Abilities = _ruleSetAbilitiesVM;
            return _ruleSetViewModel;
        }
        public RuleSetViewModel GetRuleSetItemDetailsByCharacterProfileId(int? CharacterProfileId)
        {
            RuleSetViewModel _ruleSetViewModel = new RuleSetViewModel();
            var CharacterRuleSetId = _context.CharacterProfiles.Where(p => p.CharacterProfileId == CharacterProfileId).SingleOrDefault().RulesetId;
            //Getting RuleSet Data from Database by RulesetId
            var _dataQueryRuleSet = _context.RuleSets.Where(p => p.RulesetID == CharacterRuleSetId).SingleOrDefault();
            _ruleSetViewModel.Id = _dataQueryRuleSet.RulesetID;
            _ruleSetViewModel.UserId = _dataQueryRuleSet.UserId;
            _ruleSetViewModel.Name = _dataQueryRuleSet.Name;

            List<Items> _ruleSetItemsVM = new List<Items>();
            //Getting RuleSetItems based on RuleSetId
            var _ruleSetItems = _context.RuleSetItemsContents.Where(p => p.RulesetID == CharacterRuleSetId && p.Type == 1).ToList();
            foreach (var _ruleSetItem in _ruleSetItems)
            {
                Items _ruleSetItemVM = new Items();
                _ruleSetItemVM.ItemProperties = new List<ItemProperties>();
                var _ruleSetItemProperties = (from _itemProperties in _context.RulesetContentTypes
                                              join rpgType in _context.RPGSmithTypes on _itemProperties.TypeId equals rpgType.TypeID
                                              join _itemPropertyValue in _context.Items on _itemProperties.Id equals _itemPropertyValue.ContentTypeId into ps
                                              from _itemPropertyValue in ps.DefaultIfEmpty()
                                              where _itemPropertyValue.ContentId == _ruleSetItem.ContentId
                                              select new
                                              {
                                                  Id = _itemPropertyValue.ItemId,
                                                  ContentTypeId = _itemPropertyValue.ContentTypeId,
                                                  TypeId = _itemProperties.TypeId,
                                                  Name = _itemProperties.Name,
                                                  Description = _itemProperties.Description,
                                                  Value = _itemPropertyValue.value,
                                                  Units = rpgType.Units
                                              }).ToList();

                foreach (var _ruleSetItemProperty in _ruleSetItemProperties)
                {
                    var _itemProperties = new ItemProperties();
                    _itemProperties.Id = _ruleSetItemProperty.Id;
                    _itemProperties.ContentTypeId = _ruleSetItemProperty.ContentTypeId;
                    _itemProperties.TypeId = _ruleSetItemProperty.TypeId;
                    _itemProperties.Name = _ruleSetItemProperty.Name;
                    _itemProperties.Description = _ruleSetItemProperty.Description;
                    _itemProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetItemProperty.TypeId, _ruleSetItemProperty.Value, _ruleSetItemProperty.Units);
                    _ruleSetItemVM.ItemProperties.Add(_itemProperties);
                }

                _ruleSetItemsVM.Add(_ruleSetItemVM);
            }
            _ruleSetViewModel.Items = _ruleSetItemsVM;
            return _ruleSetViewModel;
        }
        public RuleSetViewModel GetRuleSetSpellDetailsByCharacterProfileId(int? CharacterProfileId)
        {
            RuleSetViewModel _ruleSetViewModel = new RuleSetViewModel();
            List<RuleSetProperty> _ruleSetProperties = new List<RuleSetProperty>();
            var CharacterRuleSetId = _context.CharacterProfiles.Where(p => p.CharacterProfileId == CharacterProfileId).SingleOrDefault().RulesetId;
            //Getting RuleSet Data from Database by RulesetId
            var _dataQueryRuleSet = _context.RuleSets.Where(p => p.RulesetID == CharacterRuleSetId).SingleOrDefault();
            _ruleSetViewModel.Id = _dataQueryRuleSet.RulesetID;
            _ruleSetViewModel.UserId = _dataQueryRuleSet.UserId;
            _ruleSetViewModel.Name = _dataQueryRuleSet.Name;
            List<Spells> _ruleSetSpellsVM = new List<Spells>();
            var _ruleSetSpells = _context.RuleSetItemsContents.Where(p => p.RulesetID == CharacterRuleSetId && p.Type == 2).ToList();
            foreach (var _ruleSetSpell in _ruleSetSpells)
            {
                Spells _ruleSetSpellVM = new Spells();
                _ruleSetSpellVM.SpellProperties = new List<SpellProperties>();
                var _ruleSetSpellProperties = (from _spellProperties in _context.RulesetContentTypes
                                               join rpgType in _context.RPGSmithTypes on _spellProperties.TypeId equals rpgType.TypeID
                                               join _spellPropertyValue in _context.Spells on _spellProperties.Id equals _spellPropertyValue.ContentTypeId into ps
                                               from _spellPropertyValue in ps.DefaultIfEmpty()
                                               where _spellPropertyValue.ContentId == _ruleSetSpell.ContentId
                                               select new
                                               {
                                                   Id = _spellPropertyValue.SpellId,
                                                   ContentTypeId = _spellPropertyValue.ContentTypeId,
                                                   TypeId = _spellProperties.TypeId,
                                                   Name = _spellProperties.Name,
                                                   Description = _spellProperties.Description,
                                                   Value = _spellPropertyValue.value,
                                                   Units = rpgType.Units
                                               }).ToList();

                foreach (var _ruleSetSpellProperty in _ruleSetSpellProperties)
                {
                    var _spellProperties = new SpellProperties();
                    _spellProperties.Id = _ruleSetSpellProperty.Id;
                    _spellProperties.ContentTypeId = Convert.ToInt32(_ruleSetSpellProperty.ContentTypeId);
                    _spellProperties.TypeId = _ruleSetSpellProperty.TypeId;
                    _spellProperties.Name = _ruleSetSpellProperty.Name;
                    _spellProperties.Description = _ruleSetSpellProperty.Description;
                    _spellProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetSpellProperty.TypeId, _ruleSetSpellProperty.Value, _ruleSetSpellProperty.Units);

                    _ruleSetSpellVM.SpellProperties.Add(_spellProperties);
                }

                _ruleSetSpellsVM.Add(_ruleSetSpellVM);
            }
            //Filling Spells Metadata for RuleSet
            var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 2).Select(
              x => new
              {
                  Id = x.Id,
                  Name = x.Name,
                  Description = x.Description,
                  TypeId = x.TypeId,
                  Metadata = x.Metadata
              }
              ).ToList();

            foreach (var val in _dataQuery)
            {
                SpellProperties _ruleSetSpellProperty = new SpellProperties();
                _ruleSetSpellProperty.Id = val.Id;
                _ruleSetSpellProperty.Name = val.Name;
                _ruleSetSpellProperty.Description = val.Description;
                _ruleSetSpellProperty.TypeId = val.TypeId;

                if (val.Metadata != null && val.Metadata != "")
                {
                    _ruleSetSpellProperty.Value = Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata);
                }
                else
                {
                    _ruleSetSpellProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                }

                _ruleSetViewModel.RuleSetMetaData.SpellProperties.Add(_ruleSetSpellProperty);
            }
            _ruleSetViewModel.Spells = _ruleSetSpellsVM;
            return _ruleSetViewModel;
        }
        public RuleSetViewModel GetRuleSetAbilityDetailsByCharacterProfileId(int? CharacterProfileId)
        {
            RuleSetViewModel _ruleSetViewModel = new RuleSetViewModel();
            List<RuleSetProperty> _ruleSetProperties = new List<RuleSetProperty>();
            var CharacterRuleSetId = _context.CharacterProfiles.Where(p => p.CharacterProfileId == CharacterProfileId).SingleOrDefault().RulesetId;
            //Getting RuleSet Data from Database by RulesetId
            var _dataQueryRuleSet = _context.RuleSets.Where(p => p.RulesetID == CharacterRuleSetId).SingleOrDefault();
            _ruleSetViewModel.Id = _dataQueryRuleSet.RulesetID;
            _ruleSetViewModel.UserId = _dataQueryRuleSet.UserId;
            _ruleSetViewModel.Name = _dataQueryRuleSet.Name;
            List<Abilities> _ruleSetAbilitiesVM = new List<Abilities>();
            var _ruleSetSAbilities = _context.RuleSetItemsContents.Where(p => p.RulesetID == CharacterRuleSetId && p.Type == 3).ToList();
            foreach (var _ruleSetAbility in _ruleSetSAbilities)
            {
                Abilities _ruleSetAbilityVM = new Abilities();
                _ruleSetAbilityVM.AbilityProperties = new List<AbilityProperties>();
                var _ruleSetAbilityProperties = (from _abilityProperties in _context.RulesetContentTypes
                                                 join rpgType in _context.RPGSmithTypes on _abilityProperties.TypeId equals rpgType.TypeID
                                                 join _abilityPropertyValue in _context.Abilities on _abilityProperties.Id equals _abilityPropertyValue.ContentTypeId into ps
                                                 from _abilityPropertyValue in ps.DefaultIfEmpty()
                                                 where _abilityPropertyValue.ContentId == _ruleSetAbility.ContentId
                                                 select new
                                                 {
                                                     Id = _abilityPropertyValue.AbilityId,
                                                     ContentTypeId = _abilityPropertyValue.ContentTypeId,
                                                     TypeId = _abilityProperties.TypeId,
                                                     Name = _abilityProperties.Name,
                                                     Description = _abilityProperties.Description,
                                                     Value = _abilityPropertyValue.value,
                                                     Units = rpgType.Units
                                                 }).ToList();

                foreach (var _ruleSetAbilityProperty in _ruleSetAbilityProperties)
                {
                    var _abilityProperties = new AbilityProperties();
                    _abilityProperties.Id = _ruleSetAbilityProperty.Id;
                    _abilityProperties.ContentTypeId = Convert.ToInt32(_ruleSetAbilityProperty.ContentTypeId);
                    _abilityProperties.TypeId = _ruleSetAbilityProperty.TypeId;
                    _abilityProperties.Name = _ruleSetAbilityProperty.Name;
                    _abilityProperties.Description = _ruleSetAbilityProperty.Description;
                    _abilityProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetAbilityProperty.TypeId, _ruleSetAbilityProperty.Value, _ruleSetAbilityProperty.Units);

                    _ruleSetAbilityVM.AbilityProperties.Add(_abilityProperties);
                }

                _ruleSetAbilitiesVM.Add(_ruleSetAbilityVM);
            }
            //Filling Ability Matadata for RuleSet
            var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 3).Select(
               x => new
               {
                   Id = x.Id,
                   Name = x.Name,
                   Description = x.Description,
                   TypeId = x.TypeId,
                   Metadata = x.Metadata
               }
               ).ToList();

            foreach (var val in _dataQuery)
            {
                AbilityProperties _ruleSetAbilityProperty = new AbilityProperties();
                _ruleSetAbilityProperty.Id = val.Id;
                _ruleSetAbilityProperty.Name = val.Name;
                _ruleSetAbilityProperty.Description = val.Description;
                _ruleSetAbilityProperty.TypeId = val.TypeId;

                if (val.Metadata != null && val.Metadata != "")
                {
                    _ruleSetAbilityProperty.Value = Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata);
                }
                else
                {
                    _ruleSetAbilityProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                }

                _ruleSetViewModel.RuleSetMetaData.AbilityProperties.Add(_ruleSetAbilityProperty);
            }
            _ruleSetViewModel.Abilities = _ruleSetAbilitiesVM;
            return _ruleSetViewModel;
        }
        #endregion
        #region Corestat Zone
        public Corestats GetCoreStatByCoreStatId(int? CoreStatId)
        {
            Corestats _coreStats = new Corestats();
            var dbResult = _context.CoreStats.Where(p => p.CorestatID == CoreStatId).SingleOrDefault();
            if (dbResult == null) return _coreStats;
            _coreStats.Id = dbResult.CorestatID;
            _coreStats.Name = dbResult.Name;
            _coreStats.TypeId = Convert.ToInt32(dbResult.TypeId);
            // _coreStats.TypeName = dbResult.type
            _coreStats.Description = dbResult.Description;
            return _coreStats;
        }
        public string DeleteCoreStat(int? CoreStatId)
        {
            var Message = string.Empty;
            var _coreStat = _context.CoreStats.Where(p => p.CorestatID == CoreStatId).SingleOrDefault();
            if (_coreStat != null)
            {
                _context.CoreStats.Remove(_coreStat);
                _context.SaveChanges();
                Message = "CoreSet Deleted Successfully.";
            }
            return Message;
        }
        #endregion
        #region RuleSet Content Types
        public List<RulesetContentType> GetRuleSetContentTypes()
        {
            return _context.RulesetContentTypes.ToList();
        }
        #endregion
        #region Set View Models
        private RuleSetContents SetRuleSetContents(Item _item, Spell _spell, Ability _ability)
        {
            //Declare Models
            RuleSetContents _ruleSetContents = new RuleSetContents();
            _ruleSetContents.ItemProperty = new ItemProperties();
            _ruleSetContents.SpellProperty = new SpellProperties();
            _ruleSetContents.AbilityProperty = new AbilityProperties();
            //Checking non Empty Model
            var EmptyNonModel = _item != null ? 1 : _spell != null ? 2 : _ability != null ? 3 : 0;
            var TileType = new RPGSmith.Utilities.TileTypes();
            switch (EmptyNonModel)
            {
                case 1:
                    //Setting Item Tile Properties
                    var ItemTile = _context.Tiles.Where(p => p.TileContentId == _item.ItemId).SingleOrDefault();
                    if (ItemTile != null)
                    {
                        if (ItemTile.EntityId > 0 && ItemTile.TileTypeId > 0 && ItemTile.TileLocationId == 2)
                        {
                            switch (ItemTile.TileTypeId)
                            {
                                case 1:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Note note = new Utilities.RPGSmithTileTypes.Note();
                                    var dbNoteTileDetails = new TileService().GetNoteTilesByEntityId(ItemTile.EntityId);
                                    if (dbNoteTileDetails != null)
                                    {
                                        note.NoteId = dbNoteTileDetails.NoteId;
                                        note.CharacterProfileId = dbNoteTileDetails.CharacterProfileId;
                                        note.UserId = dbNoteTileDetails.UserId;
                                        note.Name = dbNoteTileDetails.Name;
                                        note.Text = dbNoteTileDetails.Text;
                                    }
                                    TileType.Note = note;
                                    break;
                                case 2:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Counter counter = new Utilities.RPGSmithTileTypes.Counter();
                                    var dbCounterTileDetails = new TileService().GetCounterTilesByEntityId(ItemTile.EntityId);
                                    if (dbCounterTileDetails != null)
                                    {
                                        counter.CounterId = dbCounterTileDetails.CounterId;
                                        counter.CharacterProfileId = dbCounterTileDetails.CharacterProfileId;
                                        counter.UserId = dbCounterTileDetails.UserId;
                                        counter.Name = dbCounterTileDetails.Name;
                                        counter.Mask = dbCounterTileDetails.Mask;
                                        counter.DefaultValue = dbCounterTileDetails.DefaultValue;
                                        counter.Max = dbCounterTileDetails.Max;
                                        counter.Min = dbCounterTileDetails.Min;
                                        counter.Step = dbCounterTileDetails.Step;
                                        counter.Value = dbCounterTileDetails.Value;
                                    }
                                    TileType.Counter = counter;
                                    break;
                                case 3:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Attributes attributes = new Utilities.RPGSmithTileTypes.Attributes();
                                    var dbAtributeTileDetails = new TileService().GetAtributeTilesByEntityId(ItemTile.EntityId);
                                    if (dbAtributeTileDetails != null)
                                    {
                                        attributes.AttributeId = dbAtributeTileDetails.AttributeId;
                                        attributes.CharacterProfileId = dbAtributeTileDetails.CharacterProfileId;
                                        attributes.UserId = dbAtributeTileDetails.UserId;
                                        attributes.Name = dbAtributeTileDetails.CoreStatName;
                                        attributes.Title = dbAtributeTileDetails.Name;
                                        attributes.TypeId = dbAtributeTileDetails.TypeId == null ? 0 : dbAtributeTileDetails.TypeId;
                                        attributes.CoreStatValue = Utility.ConvertTypeValueXMLtoClass(dbAtributeTileDetails.TypeId, dbAtributeTileDetails.CorestatValue, "");
                                        attributes.CoreStatValueId = dbAtributeTileDetails.CorestatValueID;
                                    }
                                    TileType.Attribute = attributes;
                                    break;
                                case 4:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Link link = new Utilities.RPGSmithTileTypes.Link();
                                    var dbLinkTileDetails = new TileService().GetLinkTilesByEntityId(ItemTile.EntityId);
                                    if (dbLinkTileDetails != null)
                                    {
                                        link.LinkId = dbLinkTileDetails.LinkId;
                                        link.CharacterProfileId = dbLinkTileDetails.CharacterProfileId;
                                        link.UserId = dbLinkTileDetails.UserId;
                                        link.Title = dbLinkTileDetails.Name;
                                        link.SelectedProperty = dbLinkTileDetails.SelectedProperty;
                                        link.SelectedPropertyValue = dbLinkTileDetails.SelectedPropertyValue != null ? dbLinkTileDetails.SelectedPropertyValue.Split('/')[0] : "";
                                        link.SelectedPropertyValueImage = dbLinkTileDetails.SelectedPropertyValue == null ? "" : dbLinkTileDetails.SelectedPropertyValue.Substring(link.SelectedPropertyValue.Length, dbLinkTileDetails.SelectedPropertyValue.Length - link.SelectedPropertyValue.Length);
                                    }
                                    TileType.Link = link;
                                    break;
                                case 5:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Execute execute = new Utilities.RPGSmithTileTypes.Execute();
                                    var dbExecuteTileDetails = new TileService().GetExecuteTilesByEntityId(ItemTile.EntityId);
                                    if (dbExecuteTileDetails != null)
                                    {
                                        execute.ExecuteId = dbExecuteTileDetails.ExecuteId;
                                        execute.CharacterProfileId = dbExecuteTileDetails.CharacterProfileId;
                                        execute.UserId = dbExecuteTileDetails.UserId;
                                        execute.Name = dbExecuteTileDetails.Name;
                                        execute.Command = dbExecuteTileDetails.Command;
                                        execute.CommandLastResult = dbExecuteTileDetails.CommandLastResult;
                                        execute.CommandLastRunDate = dbExecuteTileDetails.CommandLastRunDate;
                                        execute.ContentId = dbExecuteTileDetails.ContentId;
                                        execute.ContentTypeId = dbExecuteTileDetails.ContentTypeId;
                                        execute.SelectedProperty = dbExecuteTileDetails.SelectedProperty;
                                        execute.SelectedPropertyValue = dbExecuteTileDetails.SelectedPropertyValue != null ? dbExecuteTileDetails.SelectedPropertyValue.Split('/')[0] : "";
                                        execute.SelectedPropertyValueImage = dbExecuteTileDetails.SelectedPropertyValue == null ? "" : dbExecuteTileDetails.SelectedPropertyValue.Substring(execute.SelectedPropertyValue.Length, dbExecuteTileDetails.SelectedPropertyValue.Length - execute.SelectedPropertyValue.Length);
                                    }
                                    TileType.Execute = execute;
                                    break;
                                case 6:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Command command = new Utilities.RPGSmithTileTypes.Command();
                                    var dbCommandTileDetails = new TileService().GetCommandTilesByEntityId(ItemTile.EntityId);
                                    if (dbCommandTileDetails != null)
                                    {
                                        command.CommandId = dbCommandTileDetails.CommandId;
                                        command.CharacterProfileId = dbCommandTileDetails.CharacterProfileId;
                                        command.UserId = dbCommandTileDetails.UserId;
                                        command.Name = dbCommandTileDetails.Name;
                                        command.command = dbCommandTileDetails.Command;
                                        command.ImagePath = dbCommandTileDetails.ImagePath;
                                        command.commandLastResult = dbCommandTileDetails.CommandLastResult;
                                        command.commandLastRunDate = dbCommandTileDetails.CommandLastRunDate;
                                    }
                                    TileType.Command = command;
                                    break;
                                case 7:
                                    RPGSmith.Utilities.RPGSmithTileTypes.ImageTile image = new Utilities.RPGSmithTileTypes.ImageTile();
                                    var dbImageTileDetails = new TileService().GetImageTilesByEntityId(ItemTile.EntityId);
                                    if (dbImageTileDetails != null)
                                    {
                                        image.CharacterProfileId = dbImageTileDetails.CharacterProfileId;
                                        image.ImageId = dbImageTileDetails.ImageId;
                                        image.Name = dbImageTileDetails.Name == null ? "" : dbImageTileDetails.Name;
                                        image.UserId = dbImageTileDetails.UserId;
                                        image.Imagepath = dbImageTileDetails.ImagePath == null ? "" : dbImageTileDetails.ImagePath;
                                    }
                                    TileType.Imagetile = image;
                                    break;
                            }

                        }
                        _ruleSetContents.ItemProperty.tile = new ViewModels.TileViewModel()
                        {
                            EntityId = ItemTile.EntityId,
                            Height = ItemTile.Height,
                            Style = ItemTile.Style,
                            Styles = (ItemTile.Style != null && ItemTile.Style != "") ? Utility.ConvertStyleValueXMLtoClass(ItemTile.Style) : new Style(),
                            TabId = ItemTile.TileContentId,
                            TileId = ItemTile.TileId,
                            TileTypeId = ItemTile.TileTypeId,
                            UserId = ItemTile.UserId,
                            X = ItemTile.X,
                            Y = ItemTile.Y,
                            Width = ItemTile.Width,
                            Value = TileType,
                            TileTypeName = (new TileService().GetAllTileTypes().Count > 0 && ItemTile.TileTypeId > 0) ? new TileService().GetAllTileTypes().Where(p => p.TileTypeId == ItemTile.TileTypeId).SingleOrDefault().TileTypeName : "",
                            Mode = "Use"
                        };
                    }
                    break;
                case 2:
                    //Setting Spell Tile Properties
                    var SpellTile = _context.Tiles.Where(p => p.TileContentId == _spell.SpellId).SingleOrDefault();
                    if (SpellTile != null)
                    {
                        if (SpellTile.EntityId > 0 && SpellTile.TileTypeId > 0 && SpellTile.TileLocationId == 3)
                        {
                            switch (SpellTile.TileTypeId)
                            {
                                case 1:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Note note = new Utilities.RPGSmithTileTypes.Note();
                                    var dbNoteTileDetails = new TileService().GetNoteTilesByEntityId(SpellTile.EntityId);
                                    if (dbNoteTileDetails != null)
                                    {
                                        note.NoteId = dbNoteTileDetails.NoteId;
                                        note.CharacterProfileId = dbNoteTileDetails.CharacterProfileId;
                                        note.UserId = dbNoteTileDetails.UserId;
                                        note.Name = dbNoteTileDetails.Name;
                                        note.Text = dbNoteTileDetails.Text;
                                    }
                                    TileType.Note = note;
                                    break;
                                case 2:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Counter counter = new Utilities.RPGSmithTileTypes.Counter();
                                    var dbCounterTileDetails = new TileService().GetCounterTilesByEntityId(SpellTile.EntityId);
                                    if (dbCounterTileDetails != null)
                                    {
                                        counter.CounterId = dbCounterTileDetails.CounterId;
                                        counter.CharacterProfileId = dbCounterTileDetails.CharacterProfileId;
                                        counter.UserId = dbCounterTileDetails.UserId;
                                        counter.Name = dbCounterTileDetails.Name;
                                        counter.Mask = dbCounterTileDetails.Mask;
                                        counter.DefaultValue = dbCounterTileDetails.DefaultValue;
                                        counter.Max = dbCounterTileDetails.Max;
                                        counter.Min = dbCounterTileDetails.Min;
                                        counter.Step = dbCounterTileDetails.Step;
                                        counter.Value = dbCounterTileDetails.Value;
                                    }
                                    TileType.Counter = counter;
                                    break;
                                case 3:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Attributes attributes = new Utilities.RPGSmithTileTypes.Attributes();
                                    var dbAtributeTileDetails = new TileService().GetAtributeTilesByEntityId(SpellTile.EntityId);
                                    if (dbAtributeTileDetails != null)
                                    {
                                        attributes.AttributeId = dbAtributeTileDetails.AttributeId;
                                        attributes.CharacterProfileId = dbAtributeTileDetails.CharacterProfileId;
                                        attributes.UserId = dbAtributeTileDetails.UserId;
                                        attributes.Name = dbAtributeTileDetails.CoreStatName;
                                        attributes.Title = dbAtributeTileDetails.Name;
                                        attributes.TypeId = dbAtributeTileDetails.TypeId == null ? 0 : dbAtributeTileDetails.TypeId;
                                        attributes.CoreStatValue = Utility.ConvertTypeValueXMLtoClass(dbAtributeTileDetails.TypeId, dbAtributeTileDetails.CorestatValue, "");
                                        attributes.CoreStatValueId = dbAtributeTileDetails.CorestatValueID;
                                    }
                                    TileType.Attribute = attributes;
                                    break;
                                case 4:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Link link = new Utilities.RPGSmithTileTypes.Link();
                                    var dbLinkTileDetails = new TileService().GetLinkTilesByEntityId(SpellTile.EntityId);
                                    if (dbLinkTileDetails != null)
                                    {
                                        link.LinkId = dbLinkTileDetails.LinkId;
                                        link.CharacterProfileId = dbLinkTileDetails.CharacterProfileId;
                                        link.UserId = dbLinkTileDetails.UserId;
                                        link.Title = dbLinkTileDetails.Name;
                                        link.SelectedProperty = dbLinkTileDetails.SelectedProperty;
                                        link.SelectedPropertyValue = dbLinkTileDetails.SelectedPropertyValue != null ? dbLinkTileDetails.SelectedPropertyValue.Split('/')[0] : "";
                                        link.SelectedPropertyValueImage = dbLinkTileDetails.SelectedPropertyValue == null ? "" : dbLinkTileDetails.SelectedPropertyValue.Substring(link.SelectedPropertyValue.Length, dbLinkTileDetails.SelectedPropertyValue.Length - link.SelectedPropertyValue.Length);
                                    }
                                    TileType.Link = link;
                                    break;
                                case 5:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Execute execute = new Utilities.RPGSmithTileTypes.Execute();
                                    var dbExecuteTileDetails = new TileService().GetExecuteTilesByEntityId(SpellTile.EntityId);
                                    if (dbExecuteTileDetails != null)
                                    {
                                        execute.ExecuteId = dbExecuteTileDetails.ExecuteId;
                                        execute.CharacterProfileId = dbExecuteTileDetails.CharacterProfileId;
                                        execute.UserId = dbExecuteTileDetails.UserId;
                                        execute.Name = dbExecuteTileDetails.Name;
                                        execute.Command = dbExecuteTileDetails.Command;
                                        execute.CommandLastResult = dbExecuteTileDetails.CommandLastResult;
                                        execute.CommandLastRunDate = dbExecuteTileDetails.CommandLastRunDate;
                                        execute.ContentId = dbExecuteTileDetails.ContentId;
                                        execute.ContentTypeId = dbExecuteTileDetails.ContentTypeId;
                                        execute.SelectedProperty = dbExecuteTileDetails.SelectedProperty;
                                        execute.SelectedPropertyValue = dbExecuteTileDetails.SelectedPropertyValue != null ? dbExecuteTileDetails.SelectedPropertyValue.Split('/')[0] : "";
                                        execute.SelectedPropertyValueImage = dbExecuteTileDetails.SelectedPropertyValue == null ? "" : dbExecuteTileDetails.SelectedPropertyValue.Substring(execute.SelectedPropertyValue.Length, dbExecuteTileDetails.SelectedPropertyValue.Length - execute.SelectedPropertyValue.Length);
                                    }
                                    TileType.Execute = execute;
                                    break;
                                case 6:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Command command = new Utilities.RPGSmithTileTypes.Command();
                                    var dbCommandTileDetails = new TileService().GetCommandTilesByEntityId(SpellTile.EntityId);
                                    if (dbCommandTileDetails != null)
                                    {
                                        command.CommandId = dbCommandTileDetails.CommandId;
                                        command.CharacterProfileId = dbCommandTileDetails.CharacterProfileId;
                                        command.UserId = dbCommandTileDetails.UserId;
                                        command.Name = dbCommandTileDetails.Name;
                                        command.command = dbCommandTileDetails.Command;
                                        command.ImagePath = dbCommandTileDetails.ImagePath;
                                        command.commandLastResult = dbCommandTileDetails.CommandLastResult;
                                        command.commandLastRunDate = dbCommandTileDetails.CommandLastRunDate;
                                    }
                                    TileType.Command = command;
                                    break;
                                case 7:
                                    RPGSmith.Utilities.RPGSmithTileTypes.ImageTile image = new Utilities.RPGSmithTileTypes.ImageTile();
                                    var dbImageTileDetails = new TileService().GetImageTilesByEntityId(SpellTile.EntityId);
                                    if (dbImageTileDetails != null)
                                    {
                                        image.CharacterProfileId = dbImageTileDetails.CharacterProfileId;
                                        image.ImageId = dbImageTileDetails.ImageId;
                                        image.Name = dbImageTileDetails.Name == null ? "" : dbImageTileDetails.Name;
                                        image.UserId = dbImageTileDetails.UserId;
                                        image.Imagepath = dbImageTileDetails.ImagePath == null ? "" : dbImageTileDetails.ImagePath;
                                    }
                                    TileType.Imagetile = image;
                                    break;
                            }

                        }
                        _ruleSetContents.SpellProperty.tile = new ViewModels.TileViewModel()
                        {
                            EntityId = SpellTile.EntityId,
                            Height = SpellTile.Height,
                            Style = SpellTile.Style,
                            Styles = (SpellTile.Style != null && SpellTile.Style != "") ? Utility.ConvertStyleValueXMLtoClass(SpellTile.Style) : new Style(),
                            TabId = SpellTile.TileContentId,
                            TileId = SpellTile.TileId,
                            TileTypeId = SpellTile.TileTypeId,
                            UserId = SpellTile.UserId,
                            X = SpellTile.X,
                            Y = SpellTile.Y,
                            Width = SpellTile.Width,
                            Value = TileType,
                            TileTypeName = (new TileService().GetAllTileTypes().Count > 0 && SpellTile.TileTypeId > 0) ? new TileService().GetAllTileTypes().Where(p => p.TileTypeId == SpellTile.TileTypeId).SingleOrDefault().TileTypeName : "",
                            Mode = "Use"
                        };
                    }
                    break;
                case 3:
                    //Setting Ability Tile Properties
                    var AbilityTile = _context.Tiles.Where(p => p.TileContentId == _ability.AbilityId).SingleOrDefault();
                    if (AbilityTile != null)
                    {
                        if (AbilityTile.EntityId > 0 && AbilityTile.TileTypeId > 0 && AbilityTile.TileLocationId == 4)
                        {
                            switch (AbilityTile.TileTypeId)
                            {
                                case 1:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Note note = new Utilities.RPGSmithTileTypes.Note();
                                    var dbNoteTileDetails = new TileService().GetNoteTilesByEntityId(AbilityTile.EntityId);
                                    if (dbNoteTileDetails != null)
                                    {
                                        note.NoteId = dbNoteTileDetails.NoteId;
                                        note.CharacterProfileId = dbNoteTileDetails.CharacterProfileId;
                                        note.UserId = dbNoteTileDetails.UserId;
                                        note.Name = dbNoteTileDetails.Name;
                                        note.Text = dbNoteTileDetails.Text;
                                    }
                                    TileType.Note = note;
                                    break;
                                case 2:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Counter counter = new Utilities.RPGSmithTileTypes.Counter();
                                    var dbCounterTileDetails = new TileService().GetCounterTilesByEntityId(AbilityTile.EntityId);
                                    if (dbCounterTileDetails != null)
                                    {
                                        counter.CounterId = dbCounterTileDetails.CounterId;
                                        counter.CharacterProfileId = dbCounterTileDetails.CharacterProfileId;
                                        counter.UserId = dbCounterTileDetails.UserId;
                                        counter.Name = dbCounterTileDetails.Name;
                                        counter.Mask = dbCounterTileDetails.Mask;
                                        counter.DefaultValue = dbCounterTileDetails.DefaultValue;
                                        counter.Max = dbCounterTileDetails.Max;
                                        counter.Min = dbCounterTileDetails.Min;
                                        counter.Step = dbCounterTileDetails.Step;
                                        counter.Value = dbCounterTileDetails.Value;
                                    }
                                    TileType.Counter = counter;
                                    break;
                                case 3:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Attributes attributes = new Utilities.RPGSmithTileTypes.Attributes();
                                    var dbAtributeTileDetails = new TileService().GetAtributeTilesByEntityId(AbilityTile.EntityId);
                                    if (dbAtributeTileDetails != null)
                                    {
                                        attributes.AttributeId = dbAtributeTileDetails.AttributeId;
                                        attributes.CharacterProfileId = dbAtributeTileDetails.CharacterProfileId;
                                        attributes.UserId = dbAtributeTileDetails.UserId;
                                        attributes.Name = dbAtributeTileDetails.CoreStatName;
                                        attributes.Title = dbAtributeTileDetails.Name;
                                        attributes.TypeId = dbAtributeTileDetails.TypeId == null ? 0 : dbAtributeTileDetails.TypeId;
                                        attributes.CoreStatValue = Utility.ConvertTypeValueXMLtoClass(dbAtributeTileDetails.TypeId, dbAtributeTileDetails.CorestatValue, "");
                                        attributes.CoreStatValueId = dbAtributeTileDetails.CorestatValueID;
                                    }
                                    TileType.Attribute = attributes;
                                    break;
                                case 4:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Link link = new Utilities.RPGSmithTileTypes.Link();
                                    var dbLinkTileDetails = new TileService().GetLinkTilesByEntityId(AbilityTile.EntityId);
                                    if (dbLinkTileDetails != null)
                                    {
                                        link.LinkId = dbLinkTileDetails.LinkId;
                                        link.CharacterProfileId = dbLinkTileDetails.CharacterProfileId;
                                        link.UserId = dbLinkTileDetails.UserId;
                                        link.Title = dbLinkTileDetails.Name;
                                        link.SelectedProperty = dbLinkTileDetails.SelectedProperty;
                                        link.SelectedPropertyValue = dbLinkTileDetails.SelectedPropertyValue != null ? dbLinkTileDetails.SelectedPropertyValue.Split('/')[0] : "";
                                        link.SelectedPropertyValueImage = dbLinkTileDetails.SelectedPropertyValue == null ? "" : dbLinkTileDetails.SelectedPropertyValue.Substring(link.SelectedPropertyValue.Length, dbLinkTileDetails.SelectedPropertyValue.Length - link.SelectedPropertyValue.Length);
                                    }
                                    TileType.Link = link;
                                    break;
                                case 5:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Execute execute = new Utilities.RPGSmithTileTypes.Execute();
                                    var dbExecuteTileDetails = new TileService().GetExecuteTilesByEntityId(AbilityTile.EntityId);
                                    if (dbExecuteTileDetails != null)
                                    {
                                        execute.ExecuteId = dbExecuteTileDetails.ExecuteId;
                                        execute.CharacterProfileId = dbExecuteTileDetails.CharacterProfileId;
                                        execute.UserId = dbExecuteTileDetails.UserId;
                                        execute.Name = dbExecuteTileDetails.Name;
                                        execute.Command = dbExecuteTileDetails.Command;
                                        execute.CommandLastResult = dbExecuteTileDetails.CommandLastResult;
                                        execute.CommandLastRunDate = dbExecuteTileDetails.CommandLastRunDate;
                                        execute.ContentId = dbExecuteTileDetails.ContentId;
                                        execute.ContentTypeId = dbExecuteTileDetails.ContentTypeId;
                                        execute.SelectedPropertyValue = dbExecuteTileDetails.SelectedPropertyValue != null ? dbExecuteTileDetails.SelectedPropertyValue.Split('/')[0] : "";
                                        execute.SelectedPropertyValueImage = dbExecuteTileDetails.SelectedPropertyValue == null ? "" : dbExecuteTileDetails.SelectedPropertyValue.Substring(execute.SelectedPropertyValue.Length, dbExecuteTileDetails.SelectedPropertyValue.Length - execute.SelectedPropertyValue.Length);
                                    }
                                    TileType.Execute = execute;
                                    break;
                                case 6:
                                    RPGSmith.Utilities.RPGSmithTileTypes.Command command = new Utilities.RPGSmithTileTypes.Command();
                                    var dbCommandTileDetails = new TileService().GetCommandTilesByEntityId(AbilityTile.EntityId);
                                    if (dbCommandTileDetails != null)
                                    {
                                        command.CommandId = dbCommandTileDetails.CommandId;
                                        command.CharacterProfileId = dbCommandTileDetails.CharacterProfileId;
                                        command.UserId = dbCommandTileDetails.UserId;
                                        command.Name = dbCommandTileDetails.Name;
                                        command.command = dbCommandTileDetails.Command;
                                        command.ImagePath = dbCommandTileDetails.ImagePath;
                                        command.commandLastResult = dbCommandTileDetails.CommandLastResult;
                                        command.commandLastRunDate = dbCommandTileDetails.CommandLastRunDate;
                                    }
                                    TileType.Command = command;
                                    break;
                                case 7:
                                    RPGSmith.Utilities.RPGSmithTileTypes.ImageTile image = new Utilities.RPGSmithTileTypes.ImageTile();
                                    var dbImageTileDetails = new TileService().GetImageTilesByEntityId(AbilityTile.EntityId);
                                    if (dbImageTileDetails != null)
                                    {
                                        image.CharacterProfileId = dbImageTileDetails.CharacterProfileId;
                                        image.ImageId = dbImageTileDetails.ImageId;
                                        image.Name = dbImageTileDetails.Name == null ? "" : dbImageTileDetails.Name;
                                        image.UserId = dbImageTileDetails.UserId;
                                        image.Imagepath = dbImageTileDetails.ImagePath == null ? "" : dbImageTileDetails.ImagePath;
                                    }
                                    TileType.Imagetile = image;
                                    break;
                            }

                        }
                        _ruleSetContents.AbilityProperty.tile = new ViewModels.TileViewModel()
                        {
                            EntityId = AbilityTile.EntityId,
                            Height = AbilityTile.Height,
                            Style = AbilityTile.Style,
                            Styles = (AbilityTile.Style != null && AbilityTile.Style != "") ? Utility.ConvertStyleValueXMLtoClass(AbilityTile.Style) : new Style(),
                            TabId = AbilityTile.TileContentId,
                            TileId = AbilityTile.TileId,
                            TileTypeId = AbilityTile.TileTypeId,
                            UserId = AbilityTile.UserId,
                            X = AbilityTile.X,
                            Y = AbilityTile.Y,
                            Width = AbilityTile.Width,
                            Value = TileType,
                            TileTypeName = (new TileService().GetAllTileTypes().Count > 0 && AbilityTile.TileTypeId > 0) ? new TileService().GetAllTileTypes().Where(p => p.TileTypeId == AbilityTile.TileTypeId).SingleOrDefault().TileTypeName : "",
                            Mode = "Use"
                        };
                    }
                    break;
            }
            return _ruleSetContents;
        }
        private void SaveRuleSetContentsTiles(RuleSetViewModel RulesetModel, RuleSet _ruleSet, string userId)
        {
            //Saving All 7 Type of Tiles For Items,Spells,Abilities
            for (var j = 0; j < RulesetModel.Items.Count; j++)
            {
                var modelItemProperties = RulesetModel.Items[j].ItemProperties;
                var dbRuleSetItemsContents = _ruleSet.RuleSetItemsContents.ToList()[j];
                for (var m = 0; m < modelItemProperties.Count; m++)
                {
                    var modelItems = modelItemProperties[m];
                    if (modelItems.tile != null)
                    {
                        if (modelItems.tile.Value != null)
                        {
                            modelItems.tile.TileLocationId = 2;
                            Item _item = new Item();
                            if (modelItems.tile.TabId == 0)
                            {
                                modelItems.tile.UserId = RulesetModel.UserId;
                                //Adding Last Item Properties for Tiles
                                _item.ContentId = dbRuleSetItemsContents.Items.Count == 0 ? modelItemProperties[0].ContentId :
                                                  dbRuleSetItemsContents.Items.ToList()[0].ContentId;
                                _item.ContentTypeId = null;
                                _item.value = "";
                                _item.IsStatic = false;
                                _context.Items.Add(_item);
                                _context.SaveChanges();
                            }
                            modelItems.tile.TabId = Convert.ToInt32(_item.ItemId != 0 ? _item.ItemId : modelItems.tile.TabId);
                            //Saving Tiles
                            new TileService().AddOrUpdateTile(modelItems.tile, userId);
                        }
                    }
                }

            }
            for (var j = 0; j < RulesetModel.Spells.Count; j++)
            {
                var modelSpellProperties = RulesetModel.Spells[j].SpellProperties;
                var dbRuleSetItemsContents = _ruleSet.RuleSetItemsContents.ToList()[j];
                for (var n = 0; n < modelSpellProperties.Count; n++)
                {
                    var modelSpells = modelSpellProperties[n];
                    if (modelSpells.tile != null)
                    {
                        if (modelSpells.tile.Value != null)
                        {
                            modelSpells.tile.TileLocationId = 3;
                            modelSpells.tile.UserId = RulesetModel.UserId;
                            //Adding Last Spell Properties for Tiles
                            Spell _spell = new Spell();
                            if (modelSpells.tile.TabId == 0)
                            {
                                _spell.ContentId = dbRuleSetItemsContents.Spells.Count == 0 ? modelSpellProperties[0].ContentId :
                                                   dbRuleSetItemsContents.Spells.ToList()[0].ContentId;
                                _spell.ContentTypeId = null;
                                _spell.value = "";
                                _spell.IsStatic = false;
                                _context.Spells.Add(_spell);
                                _context.SaveChanges();
                            }
                            modelSpells.tile.TabId = Convert.ToInt32(_spell.SpellId != 0 ? _spell.SpellId : modelSpells.tile.TabId);
                            //Saving Tiles
                            new TileService().AddOrUpdateTile(modelSpells.tile, userId);
                        }
                    }
                }

            }
            for (var j = 0; j < RulesetModel.Abilities.Count; j++)
            {
                var modelAbilityProperties = RulesetModel.Abilities[j].AbilityProperties;
                var dbRuleSetItemsContents = _ruleSet.RuleSetItemsContents.ToList()[j];
                for (var o = 0; o < modelAbilityProperties.Count; o++)
                {
                    var modelAbility = modelAbilityProperties[o];
                    if (modelAbility.tile != null)
                    {
                        if (modelAbility.tile.Value != null)
                        {
                            modelAbility.tile.TileLocationId = 4;
                            modelAbility.tile.UserId = RulesetModel.UserId;
                            //Adding Last Ability Properties for Tiles
                            Ability _ability = new Ability();
                            if (modelAbility.tile.TabId == 0)
                            {
                                _ability.ContentId = dbRuleSetItemsContents.Abilities.Count == 0 ? modelAbilityProperties[0].ContentId :
                                                     dbRuleSetItemsContents.Abilities.ToList()[0].ContentId;
                                _ability.ContentTypeId = null;
                                _ability.value = "";
                                _ability.IsStatic = false;
                                _context.Abilities.Add(_ability);
                                _context.SaveChanges();
                            }
                            modelAbility.tile.TabId = Convert.ToInt32(_ability.AbilityId != 0 ? _ability.AbilityId : modelAbility.tile.TabId);
                            //Saving Tiles
                            new TileService().AddOrUpdateTile(modelAbility.tile, userId);
                        }
                    }
                }

            }
        }
        private void SetPathforClientImages(int contentType, ref CustomTypes customType, ref Hashtable clientImagesPath, ref List<string> clientImagesPathDelete, int deletedImageRecordId)
        {
            string rulesetPropertyImage = null;
            if (customType != null)
            {
                if (customType.Image != null)
                {
                    if (customType.Image.image != null)
                    {
                        if (customType.Image.image.Contains("wwwroot") == false)
                        {
                            switch (contentType)
                            {
                                case 1:
                                    clientImagesPath.Add(customType.Image.image, "/wwwroot/images/RuleSetImages/");
                                    customType.Image.image = "/wwwroot/images/RuleSetImages/" + customType.Image.image;
                                    if (deletedImageRecordId > 0)
                                    {
                                        rulesetPropertyImage = _context.RulesetPropertyValues.Where(x => x.Id == deletedImageRecordId).Select(x => x.Value).FirstOrDefault();
                                    }
                                    break;
                                case 2:
                                    clientImagesPath.Add(customType.Image.image, "/wwwroot/images/RuleSetItemImages/");
                                    customType.Image.image = "/wwwroot/images/RuleSetItemImages/" + customType.Image.image;
                                    if (deletedImageRecordId > 0)
                                    {
                                        rulesetPropertyImage = _context.Items.Where(x => x.ItemId == deletedImageRecordId).Select(x => x.value).FirstOrDefault();
                                    }
                                    break;
                                case 3:
                                    clientImagesPath.Add(customType.Image.image, "/wwwroot/images/RuleSetSpellsImages/");
                                    customType.Image.image = "/wwwroot/images/RuleSetSpellsImages/" + customType.Image.image;
                                    if (deletedImageRecordId > 0)
                                    {
                                        rulesetPropertyImage = _context.Spells.Where(x => x.SpellId == deletedImageRecordId).Select(x => x.value).FirstOrDefault();
                                    }
                                    break;
                                case 4:
                                    clientImagesPath.Add(customType.Image.image, "/wwwroot/images/RuleSetAbilitiesImages/");
                                    customType.Image.image = "/wwwroot/images/RuleSetAbilitiesImages/" + customType.Image.image;
                                    if (deletedImageRecordId > 0)
                                    {
                                        rulesetPropertyImage = _context.Abilities.Where(x => x.AbilityId == deletedImageRecordId).Select(x => x.value).FirstOrDefault();
                                    }
                                    break;
                            }

                            if (rulesetPropertyImage != null)
                            {
                                CustomTypes _rulesetPropertycustomtypeImage = Utility.ConvertTypeValueXMLtoClass(8, rulesetPropertyImage, null);
                                if (_rulesetPropertycustomtypeImage.Image.image != null)
                                {
                                    clientImagesPathDelete.Add(Utility.ConvertTypeValueXMLtoClass(8, rulesetPropertyImage, null).Image.image);
                                }
                            }
                        }
                        else
                        {

                        }
                    }
                }
            }
        }
        private void SaveRuleSetClientImages(Hashtable clientImagesPath, List<HttpPostedFileBase> ClientImages)
        {
            foreach (DictionaryEntry _clientImagePath in clientImagesPath)
            {
                //ClientImages = ClientImages.Where(p => p != null).ToList();
                var realFile = ClientImages.Where(p => p.FileName == _clientImagePath.Key.ToString()).SingleOrDefault();

                var itemFileLocation = Path.Combine(
                                  HttpContext.Current.Server.MapPath(_clientImagePath.Value.ToString()), realFile.FileName);
                realFile.SaveAs(itemFileLocation);
            }
        }
        private void DeleteOldRuleSetClientImages(List<string> ClientOldImages)
        {
            foreach (string _clientOldImages in ClientOldImages)
            {
                var itemFileLocation = HttpContext.Current.Server.MapPath(_clientOldImages);
                File.Delete(itemFileLocation);
            }
        }
        private XmlDocument SaveRuleSetContentImages(RuleSetViewModel RulesetModel, RuleSetProperty _rulesetproperty, ItemProperties _itemProperties, List<ItemProperties> ItemProperties, SpellProperties _spellProperties, List<SpellProperties> SpellProperties, AbilityProperties _abilityProperties, List<AbilityProperties> AbilityProperties)
        {
            int checkNonEmptyModel = _rulesetproperty != null ? 1 : _itemProperties != null ? 2 : _spellProperties != null
                                      ? 3 : _abilityProperties != null ? 4 : 0;
            var VirtualPath = string.Empty;
            var IsImageSave = false;
            XmlDocument _tempContentPropertyValue = new XmlDocument();
            switch (checkNonEmptyModel)
            {
                case 1:
                    HttpPostedFileBase file = _rulesetproperty.Value.Image.clientImage;
                    if (file != null)
                    {
                        var splitNameAndUserId = (_rulesetproperty.Value.Image.image != null || _rulesetproperty.Value.Image.image != "") ? _rulesetproperty.Value.Image.image.Split('~') : new string[0];
                        var Name = splitNameAndUserId[0];
                        var UserId = splitNameAndUserId[1];
                        if (RulesetModel.Name == Name && RulesetModel.UserId == UserId)
                        {
                            IsImageSave = true;
                        }
                        if (IsImageSave)
                        {
                            var uniqueString = Guid.NewGuid();
                            if (file.ContentLength > 0)
                            {
                                var fullfilename = Path.GetFileName(file.FileName);
                                var templocation = Path.Combine(
                                    HttpContext.Current.Server.MapPath("~/wwwroot/images/rulesetimages/"), fullfilename);
                                string filename = templocation.Substring(templocation.LastIndexOf(((char)92)) + 1);
                                int index = filename.LastIndexOf('.');
                                var realFilename = filename.Substring(0, index);
                                var fileExentation = filename.Substring(index + 1);
                                var itemFileLocation = Path.Combine(
                                  HttpContext.Current.Server.MapPath("~/wwwroot/images/RuleSetImages/"), realFilename + "_" + uniqueString + "." + fileExentation);
                                file.SaveAs(itemFileLocation);
                                VirtualPath = "/wwwroot/images/RuleSetImages/" + realFilename + "_" + uniqueString + "." + fileExentation;
                            }
                        }
                        _rulesetproperty.Value.Image.image = VirtualPath;
                        _tempContentPropertyValue = Utility.ConvertRuleSetPropertyValueClasstoXML(_rulesetproperty.TypeId, _rulesetproperty.Value, null);
                        IsImageSave = false;
                    }
                    break;
                case 2:
                    //Checking db Image 
                    if (_itemProperties.Value.Image.image.StartsWith("/wwwroot"))
                    {
                        _tempContentPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperties.TypeId, _itemProperties.Value, _itemProperties.Value.Image.image);
                    }
                    else if (_itemProperties.Value.Image.clientImage != null)
                    {
                        HttpPostedFileBase Itemfile = _itemProperties.Value.Image.clientImage;
                        if (Itemfile != null)
                        {
                            var splitNameAndUserId = (_itemProperties.Value.Image.image != null || _itemProperties.Value.Image.image != "") ? _itemProperties.Value.Image.image.Split('~') : new string[0];
                            var Name = splitNameAndUserId[0];
                            var UserId = splitNameAndUserId[1];
                            if (ItemProperties[0].Value.Text.value == Name && RulesetModel.UserId == UserId)
                            {
                                IsImageSave = true;
                            }
                            if (IsImageSave)
                            {
                                var uniqueString = Guid.NewGuid();
                                if (Itemfile.ContentLength > 0)
                                {
                                    var fullFileName = Path.GetFileName(Itemfile.FileName);
                                    var TempLocation = Path.Combine(
                                        HttpContext.Current.Server.MapPath("~/wwwroot/images/RuleSetItemImages/"), fullFileName);
                                    string fileName = TempLocation.Substring(TempLocation.LastIndexOf(((char)92)) + 1);
                                    int index = fileName.LastIndexOf('.');
                                    var realFileName = fileName.Substring(0, index);
                                    var fileExentation = fileName.Substring(index + 1);
                                    var itemFileLocation = Path.Combine(
                                      HttpContext.Current.Server.MapPath("~/wwwroot/images/RuleSetItemImages/"), realFileName + "_" + uniqueString + "." + fileExentation);
                                    Itemfile.SaveAs(itemFileLocation);
                                    VirtualPath = "/wwwroot/images/RuleSetItemImages/" + realFileName + "_" + uniqueString + "." + fileExentation;
                                }

                            }
                            _itemProperties.Value.Image.image = VirtualPath;
                        }
                        _tempContentPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperties.TypeId, _itemProperties.Value, _itemProperties.Value.Image.image);
                        IsImageSave = false;
                    }
                    break;
                case 3:
                    //Checking db Image 
                    if (_spellProperties.Value.Image.image.StartsWith("/wwwroot"))
                    {
                        _tempContentPropertyValue = Utility.ConvertTypeValueClasstoXML(_spellProperties.TypeId, _spellProperties.Value, _spellProperties.Value.Image.image);
                    }
                    else if (_spellProperties.Value.Image.clientImage != null)
                    {
                        HttpPostedFileBase spellFile = _spellProperties.Value.Image.clientImage;
                        if (spellFile != null)
                        {
                            var splitNameAndUserId = (_spellProperties.Value.Image.image != null || _spellProperties.Value.Image.image != "") ? _spellProperties.Value.Image.image.Split('~') : new string[0];
                            var Name = splitNameAndUserId[0];
                            var UserId = splitNameAndUserId[1];
                            if (SpellProperties[0].Value.Text.value == Name && RulesetModel.UserId == UserId)
                            {
                                IsImageSave = true;
                            }
                            if (IsImageSave)
                            {
                                var uniqueString = Guid.NewGuid();
                                if (spellFile.ContentLength > 0)
                                {
                                    var fullFileName = Path.GetFileName(spellFile.FileName);
                                    var TempLocation = Path.Combine(
                                        HttpContext.Current.Server.MapPath("~/wwwroot/images/RuleSetSpellsImages/"), fullFileName);
                                    string fileName = TempLocation.Substring(TempLocation.LastIndexOf(((char)92)) + 1);
                                    int index = fileName.LastIndexOf('.');
                                    var realFileName = fileName.Substring(0, index);
                                    var fileExentation = fileName.Substring(index + 1);
                                    var itemFileLocation = Path.Combine(
                                      HttpContext.Current.Server.MapPath("~/wwwroot/images/RuleSetSpellsImages/"), realFileName + "_" + uniqueString + "." + fileExentation);
                                    spellFile.SaveAs(itemFileLocation);
                                    VirtualPath = "/wwwroot/images/RuleSetSpellsImages/" + realFileName + "_" + uniqueString + "." + fileExentation;
                                }

                            }
                            _spellProperties.Value.Image.image = VirtualPath;
                        }
                        IsImageSave = false;
                        _tempContentPropertyValue = Utility.ConvertTypeValueClasstoXML(_spellProperties.TypeId, _spellProperties.Value, _spellProperties.Value.Image.image);
                    }
                    break;
                case 4:
                    //Checking db Image 
                    if (_abilityProperties.Value.Image.image.StartsWith("/wwwroot"))
                    {
                        _tempContentPropertyValue = Utility.ConvertTypeValueClasstoXML(_abilityProperties.TypeId, _abilityProperties.Value, _abilityProperties.Value.Image.image);
                    }
                    else if (_abilityProperties.Value.Image.clientImage != null)
                    {
                        HttpPostedFileBase abilityFile = _abilityProperties.Value.Image.clientImage;
                        if (abilityFile != null)
                        {
                            var splitNameAndUserId = (_abilityProperties.Value.Image.image != null || _abilityProperties.Value.Image.image != "") ? _abilityProperties.Value.Image.image.Split('~') : new string[0];
                            var Name = splitNameAndUserId[0];
                            var UserId = splitNameAndUserId[1];
                            if (AbilityProperties[0].Value.Text.value == Name && RulesetModel.UserId == UserId)
                            {
                                IsImageSave = true;
                            }
                            if (IsImageSave)
                            {
                                var uniqueString = Guid.NewGuid();
                                if (abilityFile.ContentLength > 0)
                                {
                                    var fullFileName = Path.GetFileName(abilityFile.FileName);
                                    var TempLocation = Path.Combine(
                                        HttpContext.Current.Server.MapPath("~/wwwroot/images/RuleSetAbilitiesImages/"), fullFileName);
                                    string fileName = TempLocation.Substring(TempLocation.LastIndexOf(((char)92)) + 1);
                                    int index = fileName.LastIndexOf('.');
                                    var realFileName = fileName.Substring(0, index);
                                    var fileExentation = fileName.Substring(index + 1);
                                    var itemFileLocation = Path.Combine(
                                      HttpContext.Current.Server.MapPath("~/wwwroot/images/RuleSetAbilitiesImages/"), realFileName + "_" + uniqueString + "." + fileExentation);
                                    abilityFile.SaveAs(itemFileLocation);
                                    VirtualPath = "/wwwroot/images/RuleSetAbilitiesImages/" + realFileName + "_" + uniqueString + "." + fileExentation;
                                }

                            }
                            _abilityProperties.Value.Image.image = VirtualPath;
                        }
                        IsImageSave = false;
                        _tempContentPropertyValue = Utility.ConvertTypeValueClasstoXML(_abilityProperties.TypeId, _abilityProperties.Value, _abilityProperties.Value.Image.image);
                    }
                    break;

            }
            return _tempContentPropertyValue;
        }
        #endregion


        #region Server Validations & Import , Export Ruleset
        // Server Validations & Import , Export Ruleset
        // Server Validations & Import , Export Ruleset

        // Server Validations & Import , Export Ruleset
        public ServiceResponseModel Import(string filedata, string rulesetName, string userId)
        {
            var error = 0;
            try
            {
                System.Text.RegularExpressions.Regex alphanemeric = new System.Text.RegularExpressions.Regex("^[a-zA-Z0-9]*$");
                string Errors = "";
                int resultStatus = 0; // 0-NoError   1-Error


                if (rulesetName == "")
                {
                    resultStatus = 1;
                    _serviceResponseModel.ErrorMessage = "Ruleset Name Required for Import,";
                    _serviceResponseModel.StatusCode = 400;
                    return _serviceResponseModel;
                }
                else
                {
                    List<RuleSet> _ruleSet = _context.RuleSets.Where(x => x.UserId == userId && x.Name == rulesetName).ToList();
                    if (_ruleSet.Count() > 0)
                    {
                        resultStatus = 1;
                        _serviceResponseModel.ErrorMessage = "Ruleset Name Already Exist,";
                        _serviceResponseModel.StatusCode = 400;
                        return _serviceResponseModel;
                    }
                }


                // Split the base64 string in data and contentType
                var block = filedata.Split(';');
                // Get the content type
                var contentType = block[0].Split(':')[1];
                // get the real base64 content of the file
                var realData = block[1].Split(',')[1];
                // FData = FData.Replace("data:;base64,", "");
                byte[] profileimagewByte = Convert.FromBase64String(realData);
                string extractPath = HttpContext.Current.Server.MapPath("~/ImportRuleSetFiles/");
                List<MemoryStream> Memorylist = new List<MemoryStream>();
                string storedfilesPath = string.Empty;
                using (ZipFile zip = ZipFile.Read(new MemoryStream(profileimagewByte)))
                {
                    zip.ExtractAll(extractPath, ExtractExistingFileAction.DoNotOverwrite);
                    storedfilesPath = HttpContext.Current.Server.MapPath("~/ImportRuleSetFiles/" + zip.Entries.ToList()[0].FileName);
                    string[] fileNames = Directory.GetFiles(storedfilesPath);
                    for (int iFile = 0; iFile < fileNames.Length; iFile++)
                    {
                        using (FileStream fs = new FileStream(fileNames[iFile], FileMode.Open))
                        {
                            byte[] b = new byte[fs.Length];
                            fs.Read(b, 0, (int)fs.Length);
                            Memorylist.Add(new MemoryStream(b));
                        }
                    }
                  
                }
                var reader = new StreamReader(Memorylist[0], Encoding.UTF8);
                DataTable dtRuleset = new DataTable();
                dtRuleset.Columns.Add("Type", typeof(string));
                dtRuleset.Columns.Add("RulesetId", typeof(string));
                dtRuleset.Columns.Add("RulesetName", typeof(string));
                dtRuleset.Columns.Add("UserName", typeof(string));
                dtRuleset.Columns.Add("CreatedDate", typeof(string));


                DataTable dtGeneralSetttings = new DataTable();
                dtGeneralSetttings.Columns.Add("Type", typeof(string));
                dtGeneralSetttings.Columns.Add("PropertyId", typeof(string));
                dtGeneralSetttings.Columns.Add("Value", typeof(string));
                dtGeneralSetttings.Columns.Add("RulesetID", typeof(string));


                DataTable dtCorestats = new DataTable();
                dtCorestats.Columns.Add("Type", typeof(string));
                dtCorestats.Columns.Add("TypeId", typeof(string));
                dtCorestats.Columns.Add("Name", typeof(string));
                dtCorestats.Columns.Add("Description", typeof(string));
                dtCorestats.Columns.Add("Metadata", typeof(string));


                DataTable dtContents = new DataTable();
                dtContents.Columns.Add("Type", typeof(string));
                dtContents.Columns.Add("ContentId", typeof(string));
                dtContents.Columns.Add("ContentTypeId", typeof(string));
                dtContents.Columns.Add("Value", typeof(string));
               

                DataTable dtItemSpells = new DataTable();
                dtItemSpells.Columns.Add("Type", typeof(string));
                dtItemSpells.Columns.Add("ItemId", typeof(string));
                dtItemSpells.Columns.Add("SpellId", typeof(string));
                dtItemSpells.Columns.Add("Value", typeof(string));
                dtItemSpells.Columns.Add("NewItemId", typeof(string));
                dtItemSpells.Columns.Add("NewSpellId", typeof(string));


                DataTable dtCharacterProfile = new DataTable();
                dtCharacterProfile.Columns.Add("Type", typeof(string));
                dtCharacterProfile.Columns.Add("CharacterProfileId", typeof(string));
                dtCharacterProfile.Columns.Add("RulesetId", typeof(string));
                dtCharacterProfile.Columns.Add("Name", typeof(string));
                dtCharacterProfile.Columns.Add("Portrait", typeof(string));
                dtCharacterProfile.Columns.Add("NewCharacterProfileId", typeof(string));

                DataTable dtCharacterISA = new DataTable();
                dtCharacterISA.Columns.Add("Type", typeof(string));
                dtCharacterISA.Columns.Add("CharacterItemId", typeof(string));
                dtCharacterISA.Columns.Add("CharacterProfileId", typeof(string));
                dtCharacterISA.Columns.Add("NewCharacterItemId", typeof(string));



                DataTable dtCharacterISAProperties = new DataTable();
                dtCharacterISAProperties.Columns.Add("Type", typeof(string));
                dtCharacterISAProperties.Columns.Add("CharacterItemId", typeof(string));
                dtCharacterISAProperties.Columns.Add("TypeId", typeof(string));
                dtCharacterISAProperties.Columns.Add("Value", typeof(string));
                dtCharacterISAProperties.Columns.Add("Name", typeof(string));


                DataTable dtLayout = new DataTable();
                dtLayout.Columns.Add("Type", typeof(string));
                dtLayout.Columns.Add("LayoutId", typeof(string));
                dtLayout.Columns.Add("CharacterProfileId", typeof(string));
                dtLayout.Columns.Add("LayoutName", typeof(string));
                dtLayout.Columns.Add("NewLayoutId", typeof(string));

                DataTable dtTab = new DataTable();
                dtTab.Columns.Add("Type", typeof(string));
                dtTab.Columns.Add("TabId", typeof(string));
                dtTab.Columns.Add("LayoutId", typeof(string));
                dtTab.Columns.Add("TabName", typeof(string));
                dtTab.Columns.Add("NewTabId", typeof(string));

                DataTable dtTile = new DataTable();
                dtTile.Columns.Add("Type", typeof(string));
                dtTile.Columns.Add("TileId", typeof(string));
                dtTile.Columns.Add("TileContentId", typeof(string));
                dtTile.Columns.Add("TileTypeId", typeof(string));
                dtTile.Columns.Add("EntityId", typeof(string));
                dtTile.Columns.Add("Style", typeof(string));
                dtTile.Columns.Add("X", typeof(string));
                dtTile.Columns.Add("Y", typeof(string));
                dtTile.Columns.Add("Width", typeof(string));
                dtTile.Columns.Add("Height", typeof(string));
                dtTile.Columns.Add("TileLocationId", typeof(string));


                DataTable dtCounterTile = new DataTable();
                dtCounterTile.Columns.Add("Type", typeof(string));
                dtCounterTile.Columns.Add("CounterId", typeof(string));
                dtCounterTile.Columns.Add("CharacterProfileId", typeof(string));
                dtCounterTile.Columns.Add("Name", typeof(string));
                dtCounterTile.Columns.Add("Value", typeof(string));
                dtCounterTile.Columns.Add("Min", typeof(string));
                dtCounterTile.Columns.Add("Max", typeof(string));
                dtCounterTile.Columns.Add("Step", typeof(string));
                // CounterId CharacterProfileId Name Value Min Max Step


                DataTable dtAttributeTile = new DataTable();
                dtAttributeTile.Columns.Add("Type", typeof(string));
                dtAttributeTile.Columns.Add("AttributeId", typeof(string));
                dtAttributeTile.Columns.Add("CharacterProfileId", typeof(string));
                dtAttributeTile.Columns.Add("Name", typeof(string));
                dtAttributeTile.Columns.Add("CorestatValue", typeof(string));
                // AttributeId  CharacterProfileId Name CorestatValue

                DataTable dtLinkTile = new DataTable();
                dtLinkTile.Columns.Add("Type", typeof(string));
                dtLinkTile.Columns.Add("LinkId", typeof(string));
                dtLinkTile.Columns.Add("CharacterProfileId", typeof(string));
                dtLinkTile.Columns.Add("Name", typeof(string));
                dtLinkTile.Columns.Add("SelectedProperty", typeof(string));
                dtLinkTile.Columns.Add("SelectedPropertyValue", typeof(string));
                //LinkId CharacterProfileId Name SelectedProperty SelectedPropertyValue


                DataTable dtExecuteTile = new DataTable();
                dtExecuteTile.Columns.Add("Type", typeof(string));
                dtExecuteTile.Columns.Add("ExecuteId", typeof(string));
                dtExecuteTile.Columns.Add("CharacterProfileId", typeof(string));
                dtExecuteTile.Columns.Add("Name", typeof(string));
                dtExecuteTile.Columns.Add("SelectedProperty", typeof(string));
                dtExecuteTile.Columns.Add("SelectedPropertyValue", typeof(string));
                //ExecuteId CharacterProfileId Name SelectedProperty SelectedPropertyValue


                DataTable dtCommandTile = new DataTable();
                dtCommandTile.Columns.Add("Type", typeof(string));
                dtCommandTile.Columns.Add("CommandId", typeof(string));
                dtCommandTile.Columns.Add("CharacterProfileId", typeof(string));
                dtCommandTile.Columns.Add("Name", typeof(string));
                dtCommandTile.Columns.Add("Command", typeof(string));
                dtCommandTile.Columns.Add("CommandLastResult", typeof(string));
                //CommandId CharacterProfileId Name Command CommandLastResult


                DataTable dtImageTile = new DataTable();
                dtImageTile.Columns.Add("Type", typeof(string));
                dtImageTile.Columns.Add("ImageId", typeof(string));
                dtImageTile.Columns.Add("CharacterProfileId", typeof(string));
                dtImageTile.Columns.Add("Name", typeof(string));
                dtImageTile.Columns.Add("ImagePath", typeof(string));
                //ImageId CharacterProfileId Name ImagePath

                List<RuleSetItemsContent> RuleSetItemsContentList = new List<RuleSetItemsContent>();
                List<RulesetContentType> RulesetAbilityContentTypeList = new List<RulesetContentType>();
                List<RulesetContentType> RulesetSpellContentTypeList = new List<RulesetContentType>();
                List<RulesetContentType> RulesetItemContentTypeList = new List<RulesetContentType>();
                List<ItemSpell> RulesetItemSpellList = new List<ItemSpell>();

                List<CharacterProfile> CharacterProfileList = new List<CharacterProfile>();
                List<CharacterItem> CharacterItemList = new List<CharacterItem>();
                List<CharacterItemProperty> CharacterItemPropertyList = new List<CharacterItemProperty>();

                List<CharacterSpell> CharacterSpellList = new List<CharacterSpell>();
                List<CharacterSpellProperty> CharacterSpellPropertyList = new List<CharacterSpellProperty>();

                List<CharacterAbility> CharacterAbilitiesList = new List<CharacterAbility>();
                List<CharacterAbilityProperty> CharacterAbilitiesPropertiesList = new List<CharacterAbilityProperty>();

                List<Layout> LayoutList = new List<Layout>();
                List<Tab> TabList = new List<Tab>();

                List<Tile> TileList = new List<Tile>();
                List<CounterTile> CounterTileList = new List<CounterTile>();
                List<AttributeTile> AttributeTileList = new List<AttributeTile>();

                List<LinkTile> LinkTileList = new List<LinkTile>();
                List<ExecuteTile> ExecuteTileList = new List<ExecuteTile>();
                List<CommandTile> CommandTileList = new List<CommandTile>();
                List<ImageTile> ImageTileList = new List<ImageTile>();


                bool isRulesetPresent = false;


                var AllPropertyUnitsList = (from _rulesetContentTypes in _context.RulesetContentTypes
                                            from _rPGSmithTypes in _context.RPGSmithTypes
                                            .Where(mapping => mapping.TypeID == _rulesetContentTypes.TypeId).DefaultIfEmpty()
                                                //where _rulesetContentTypes.ContentType == SpellContentType
                                            select new
                                            {
                                                Id = _rulesetContentTypes.Id,
                                                ContentType = _rulesetContentTypes.ContentType,
                                                Name = _rulesetContentTypes.Name,
                                                TypeId = _rulesetContentTypes.TypeId,
                                                Mandatory = _rulesetContentTypes.Mandatory,
                                                IsRuleSet = _rulesetContentTypes.IsRuleSet,
                                                Units = _rPGSmithTypes.Units
                                            }).ToList();


                List<string> listRows = new List<string>();
                while (!reader.EndOfStream)
                {
                    listRows.Add(reader.ReadLine());
                }

                List<string> list = listRows.Where(x => x.Contains("\"R\"")).ToList();
                if (list.Count > 1)
                {
                    resultStatus = 1;
                    _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset Type Not found";
                    _serviceResponseModel.StatusCode = 400;
                    return _serviceResponseModel;
                }
                else
                {
                    var _values = list[0].Split(',');

                    if (_values.Length < 1 || _values[0] == "")
                    {
                        resultStatus = 1;
                        _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset No data found";
                        _serviceResponseModel.StatusCode = 400;
                        return _serviceResponseModel;

                    }
                    else
                    {

                        if (FormatCSV(_values[0]) != "R")
                        {
                            resultStatus = 1;
                            _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset";
                            _serviceResponseModel.StatusCode = 400;
                            return _serviceResponseModel;
                        }
                        else if (!validateIsNumaric(FormatCSV(_values[1])))
                        {
                            resultStatus = 1;
                            _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset Id Numaric";
                            _serviceResponseModel.StatusCode = 400;
                            return _serviceResponseModel;

                        }
                        else
                        {
                            if (Convert.ToInt32(FormatCSV(_values[1])) <= 0)
                            {
                                resultStatus = 1;
                                _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset Id <=0";
                                _serviceResponseModel.StatusCode = 400;
                                return _serviceResponseModel;
                            }
                            else
                            {

                                //Note :  RulesetIdImp  is a .csv file Imported RulesetId

                                int RulesetIdImp = Convert.ToInt32(FormatCSV(_values[1]));
                                List<RuleSet> RulesetList = (from _RuleSets in _context.RuleSets
                                                             where _RuleSets.RulesetID == RulesetIdImp
                                                             select _RuleSets).ToList();



                                if (RulesetList.Count == 0)
                                {
                                    resultStatus = 1;
                                    _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset Id Not found";
                                    _serviceResponseModel.StatusCode = 400;
                                    return _serviceResponseModel;
                                }
                                else
                                {

                                    //var RulesetId = 5695;
                                    RuleSetItemsContentList = (from _RuleSetItemsContents in _context.RuleSetItemsContents
                                                               where _RuleSetItemsContents.RulesetID == RulesetIdImp
                                                               select _RuleSetItemsContents).ToList();

                                    RulesetItemSpellList = (from _ItemSpells in _context.ItemSpells
                                                            join _RuleSetItemsContents in _context.RuleSetItemsContents
                                                             on _ItemSpells.ItemId equals _RuleSetItemsContents.ContentId
                                                            join _RuleSets in _context.RuleSets
                                                            on _RuleSetItemsContents.RulesetID equals _RuleSets.RulesetID
                                                            where _RuleSets.RulesetID == RulesetIdImp
                                                            select _ItemSpells
                                                            ).ToList();


                                    var AbilityContentType = 3;
                                    RulesetAbilityContentTypeList = (from _rulesetContentTypes in _context.RulesetContentTypes
                                                                     where _rulesetContentTypes.ContentType == AbilityContentType
                                                                     select _rulesetContentTypes).ToList();


                                    var SpellContentType = 2;
                                    RulesetSpellContentTypeList = (from _rulesetContentTypes in _context.RulesetContentTypes
                                                                   where _rulesetContentTypes.ContentType == SpellContentType
                                                                   select _rulesetContentTypes).ToList();


                                    var ItemContentType = 1;
                                    RulesetItemContentTypeList = (from _rulesetContentTypes in _context.RulesetContentTypes
                                                                  where _rulesetContentTypes.ContentType == ItemContentType
                                                                  select _rulesetContentTypes).ToList();



                                    CharacterProfileList = (from _CharacterProfiles in _context.CharacterProfiles
                                                            where _CharacterProfiles.RulesetId == RulesetIdImp
                                                            select _CharacterProfiles).ToList();




                                    CharacterItemList = (from _CharacterItems in _context.CharacterItems
                                                         join _CharacterProfiles in _context.CharacterProfiles
                                                         on _CharacterItems.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                         where _CharacterProfiles.RulesetId == RulesetIdImp
                                                         select _CharacterItems).ToList();


                                    CharacterItemPropertyList = (from _CharacterItemProperties in _context.CharacterItemProperties
                                                                 from _CharacterItems in _context.CharacterItems
                                                                 .Where(mapping => mapping.CharacterItemId == _CharacterItemProperties.CharacterItemId)
                                                                 join _CharacterProfiles in _context.CharacterProfiles
                                                                 on _CharacterItems.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                                 where _CharacterProfiles.RulesetId == RulesetIdImp
                                                                 select _CharacterItemProperties).ToList();



                                    CharacterSpellList = (from _CharacterSpells in _context.CharacterSpells
                                                          join _CharacterProfiles in _context.CharacterProfiles
                                                          on _CharacterSpells.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                          where _CharacterProfiles.RulesetId == RulesetIdImp
                                                          select _CharacterSpells).ToList();



                                    CharacterSpellPropertyList = (from _CharacterSpellProperties in _context.CharacterSpellProperties
                                                                  from _CharacterSpells in _context.CharacterSpells
                                                                  .Where(mapping => mapping.CharacterSpellId == _CharacterSpellProperties.CharacterSpellId)
                                                                  join _CharacterProfiles in _context.CharacterProfiles
                                                                  on _CharacterSpells.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                                  where _CharacterProfiles.RulesetId == RulesetIdImp
                                                                  select _CharacterSpellProperties).ToList();


                                    CharacterAbilitiesList = (from _CharacterAbilities in _context.CharacterAbilities
                                                              join _CharacterProfiles in _context.CharacterProfiles
                                                              on _CharacterAbilities.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                              where _CharacterProfiles.RulesetId == RulesetIdImp
                                                              select _CharacterAbilities).ToList();



                                    CharacterAbilitiesPropertiesList = (from _CharacterAbilityProperties in _context.CharacterAbilityProperties
                                                                        from _CharacterAbilities in _context.CharacterAbilities
                                                                        .Where(mapping => mapping.CharacterAbilityId == _CharacterAbilityProperties.CharacterAbilityId)
                                                                        join _CharacterProfiles in _context.CharacterProfiles
                                                                        on _CharacterAbilities.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                                        where _CharacterProfiles.RulesetId == RulesetIdImp
                                                                        select _CharacterAbilityProperties).ToList();




                                    LayoutList = (from _Layouts in _context.Layouts
                                                  join _CharacterProfiles in _context.CharacterProfiles
                                                  on _Layouts.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                  where _CharacterProfiles.RulesetId == RulesetIdImp
                                                  select _Layouts).ToList();


                                    TabList = (from _Tabs in _context.Tabs
                                               join _Layouts in _context.Layouts
                                               on _Tabs.LayoutId equals _Layouts.LayoutId
                                               join _CharacterProfiles in _context.CharacterProfiles
                                               on _Layouts.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                               where _CharacterProfiles.RulesetId == RulesetIdImp
                                               select _Tabs).ToList();

                                    TileList = (from _Tiles in _context.Tiles
                                                join _Tabs in _context.Tabs on _Tiles.TileContentId equals _Tabs.TabId
                                                join _Layouts in _context.Layouts on _Tabs.LayoutId equals _Layouts.LayoutId
                                                join _CharacterProfiles in _context.CharacterProfiles
                                                on _Layouts.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                where _CharacterProfiles.RulesetId == RulesetIdImp
                                                select _Tiles).ToList();



                                    CounterTileList = (from _CounterTiles in _context.CounterTiles
                                                       join _CharacterProfiles in _context.CharacterProfiles
                                                       on _CounterTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                       where _CharacterProfiles.RulesetId == RulesetIdImp
                                                       select _CounterTiles).ToList();

                                    AttributeTileList = (from _AttributeTiles in _context.AttributeTiles
                                                         join _CharacterProfiles in _context.CharacterProfiles
                                                          on _AttributeTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                         where _CharacterProfiles.RulesetId == RulesetIdImp
                                                         select _AttributeTiles).ToList();

                                    LinkTileList = (from _LinkTiles in _context.LinkTiles
                                                    join _CharacterProfiles in _context.CharacterProfiles
                                                     on _LinkTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                    where _CharacterProfiles.RulesetId == RulesetIdImp
                                                    select _LinkTiles).ToList();



                                    ExecuteTileList = (from _ExecuteTiles in _context.ExecuteTiles
                                                       join _CharacterProfiles in _context.CharacterProfiles
                                                        on _ExecuteTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                       where _CharacterProfiles.RulesetId == RulesetIdImp
                                                       select _ExecuteTiles).ToList();


                                    CommandTileList = (from _CommandTiles in _context.CommandTiles
                                                       join _CharacterProfiles in _context.CharacterProfiles
                                                        on _CommandTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                       where _CharacterProfiles.RulesetId == RulesetIdImp
                                                       select _CommandTiles).ToList();


                                    ImageTileList = (from _ImageTiles in _context.ImageTiles
                                                     join _CharacterProfiles in _context.CharacterProfiles
                                                      on _ImageTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                     where _CharacterProfiles.RulesetId == RulesetIdImp
                                                     select _ImageTiles).ToList();
                                }
                            }
                        }
                    }

                    if (resultStatus == 0)
                    {

                        for (int i = 0; i < listRows.Count; i++)
                        {

                            if (resultStatus == 1)
                            {
                                break;
                            }

                          
                            var values = listRows[i].Split(',');

                            if (values.Length == 0 || values[0] == "")
                            {
                                resultStatus = 1;
                                _serviceResponseModel.ErrorMessage = "Invalid data split null";
                                _serviceResponseModel.StatusCode = 400;
                                break;
                            }
                            else
                            {
                                string CurrentRecordType = FormatCSV(values[0]);
                                var RecordTypes = new[] { "R", "G", "CO", "S", "SP", "A", "AP", "I", "IP", "IS", "ISP", "CP", "CI", "CS", "CA", "CIP", "CSP", "CAP", "CL", "CTB", "CT", "COT", "CAT", "CLT", "CET", "CCT", "CIM" };

                                if (CurrentRecordType == "G")
                                {

                                    //  dtGeneralSetttings

                                }


                                if (!RecordTypes.Contains(CurrentRecordType))
                                {
                                    resultStatus = 1;
                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Record Type " + CurrentRecordType;
                                    _serviceResponseModel.StatusCode = 400;
                                    break;
                                }

                            }

                            int CaseId = 0;
                            if ((FormatCSV(values[0]) == "R"))
                            {
                                CaseId = 1;  // Ruleset
                            }
                            else if (((FormatCSV(values[0]) == "IP") || (FormatCSV(values[0]) == "I")) || ((FormatCSV(values[0]) == "SP") || (FormatCSV(values[0]) == "S")) || ((FormatCSV(values[0]) == "AP") || (FormatCSV(values[0]) == "A")))
                            {
                                CaseId = 2; // Items,Seplls,Abilitys
                            }

                            else if ((FormatCSV(values[0]) == "ISP"))
                            {
                                CaseId = 3;  //ItemSpells
                            }
                            else if ((FormatCSV(values[0]) == "CO"))
                            {
                                CaseId = 4; // Corestats
                            }
                            else if ((FormatCSV(values[0]) == "CP"))
                            {
                                CaseId = 5;  //Characters 
                            }
                            else if ((FormatCSV(values[0]) == "CI") || (FormatCSV(values[0]) == "CS") || (FormatCSV(values[0]) == "CA"))
                            {
                                CaseId = 6;  //Characters 
                            }
                            else if ((FormatCSV(values[0]) == "CIP") || (FormatCSV(values[0]) == "CSP") || (FormatCSV(values[0]) == "CAP"))
                            {
                                CaseId = 7;  //Characters 
                            }
                            else if ((FormatCSV(values[0]) == "CL"))
                            {
                                CaseId = 8;  //Characters 
                            }
                            else if ((FormatCSV(values[0]) == "CTB"))
                            {
                                CaseId = 9;  //Characters 
                            }
                            else if ((FormatCSV(values[0]) == "CT"))
                            {
                                CaseId = 10;  //Characters 
                            }
                            else if ((FormatCSV(values[0]) == "COT"))
                            {
                                CaseId = 11;  //Characters 
                            }

                            else if ((FormatCSV(values[0]) == "CAT"))
                            {
                                CaseId = 12;  //Characters 
                            }
                            else if ((FormatCSV(values[0]) == "CLT"))
                            {
                                CaseId = 13;  //Characters 
                            }

                            else if ((FormatCSV(values[0]) == "CET"))
                            {
                                CaseId = 14;  //Characters 
                            }
                            else if ((FormatCSV(values[0]) == "CCT"))
                            {
                                CaseId = 15;  //Characters 
                            }

                            else if ((FormatCSV(values[0]) == "CIM"))
                            {
                                CaseId = 16;  //Characters 
                            }
                            if ((FormatCSV(values[0]) == "G"))
                            {
                                CaseId = 17;  // Ruleset
                            }



                            int ContentId = 0;
                            int PropertyTypeId = 0;
                            List<RuleSetItemsContent> _ruleSetItemsContentsList = new List<RuleSetItemsContent>();
                            List<RulesetContentType> _rulesetContentTypeList = new List<RulesetContentType>();
                            List<ItemSpell> _rulesetItemSpell = new List<ItemSpell>();

                            List<CharacterProfile> _characterProfileList;
                            List<CharacterItem> _characterItemList;
                            List<CharacterSpell> _characterSpellList;
                            List<CharacterAbility> _characterAbilityList;

                            //List<CharacterItemProperty> _characterItemPropertyList;
                            List<Layout> _LayoutList;
                            List<Tab> _TabList;
                            List<Tile> _TileList;
                            List<CounterTile> _CounterTileList;
                            List<AttributeTile> _AttributeTile;
                            List<LinkTile> _LinkTileList;
                            List<ExecuteTile> _ExecuteTileList;
                            List<CommandTile> _CommandTileList;
                            List<ImageTile> _ImageTileList;

                            List<string> Result;
                            string strStart = "";
                            string strEnd = "";

                            //Note: Array of Start,End words
                            var RecordsStartEnd = new[] { "Start", "End" };

                            switch (CaseId)
                            {
                                case 1:
                                    dtRuleset.Rows.Add(FormatCSV((values[0])), FormatCSV((values[1])), FormatCSV((values[2])), FormatCSV((values[3])), FormatCSV((values[4])));
                                    break;
                                case 2:
                                    string Case = "";
                                    Case = FormatCSV((values[0]));

                                    switch (Case)
                                    {
                                        case "A":

                                            if (values.Length != 4)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Ability length";
                                                _serviceResponseModel.StatusCode = 400;

                                                break;
                                            }
                                            else
                                            {
                                                if (!RecordsStartEnd.Contains(FormatCSV(values[3])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }


                                                if (FormatCSV(values[3]) == "Start")
                                                {
                                                    strStart = "\"A\"," + values[1] + "," + values[2] + "," + "\"Start\"";
                                                    strEnd = "\"A\"," + values[1] + "," + values[2] + "," + "\"End\"";

                                                    // List<string> Result;

                                                    Result = listRows.Where(item => item == strStart).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                    Result = null;
                                                    Result = listRows.Where(item => item == strEnd).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }
                                                }
                                                else if (FormatCSV(values[3]) == "End")
                                                {
                                                    strStart = "\"A\"," + values[1] + "," + values[2] + "," + "\"Start\"";
                                                    strEnd = "\"A\"," + values[1] + "," + values[2] + "," + "\"End\"";



                                                    Result = listRows.Where(item => item == strStart).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                    Result = null;
                                                    Result = listRows.Where(item => item == strEnd).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                }


                                                if (!validateIsNumaric(FormatCSV(values[1])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                    else
                                                    {
                                                        ContentId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 3).ToList();

                                                        if (_ruleSetItemsContentsList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                    }

                                                }

                                                if (!validateIsNumaric(FormatCSV(values[2])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (Convert.ToInt32(FormatCSV(values[2])) != 3)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                    }

                                                }
                                            }

                                            break;
                                        case "AP":

                                            if (values.Length != 4)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys Property length";
                                                _serviceResponseModel.StatusCode = 400;

                                                break;
                                            }
                                            else
                                            {

                                                if (!validateIsNumaric(FormatCSV(values[1])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }
                                                    else
                                                    {

                                                        ContentId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 3).ToList();

                                                        if (_ruleSetItemsContentsList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }
                                                        else
                                                        {

                                                            strStart = "\"A\"," + values[1] + "," + "\"3\"" + "," + "\"Start\"";
                                                            strEnd = "\"A\"," + values[1] + "," + "\"3\"" + "," + "\"End\"";

                                                            // Note:  checking Start,End  both are Exist/Not for this  "AP" 
                                                            //        Both are Must be need for "AP"
                                                            Result = listRows.Where(item => item == strStart).ToList();
                                                            if (Result.Count != 1)
                                                            {
                                                                resultStatus = 1;
                                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                                _serviceResponseModel.StatusCode = 400;
                                                                break;
                                                            }

                                                            Result = null;
                                                            Result = listRows.Where(item => item == strEnd).ToList();
                                                            if (Result.Count != 1)
                                                            {
                                                                resultStatus = 1;
                                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                                _serviceResponseModel.StatusCode = 400;
                                                                break;
                                                            }

                                                        }

                                                    }

                                                }

                                                if (!validateIsNumaric(FormatCSV(values[2])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;

                                                    }
                                                    else
                                                    {

                                                        PropertyTypeId = Convert.ToInt32(FormatCSV(values[2]));
                                                        _rulesetContentTypeList = RulesetAbilityContentTypeList.Where(x => x.Id == PropertyTypeId).ToList();

                                                        if (_rulesetContentTypeList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                    }


                                                }

                                               
                                            }

                                            break;
                                        case "S":
                                            if (values.Length != 4)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls length";
                                                _serviceResponseModel.StatusCode = 400;

                                                break;
                                            }
                                            else
                                            {
                                                if (!RecordsStartEnd.Contains(FormatCSV(values[3])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }


                                                if (FormatCSV(values[3]) == "Start")
                                                {
                                                    strStart = "\"S\"," + values[1] + "," + values[2] + "," + "\"Start\"";
                                                    strEnd = "\"S\"," + values[1] + "," + values[2] + "," + "\"End\"";

                                                    // List<string> Result;

                                                    Result = listRows.Where(x => x == strStart).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                    Result = null;
                                                    Result = listRows.Where(x => x == strEnd).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }
                                                }
                                                else if (FormatCSV(values[3]) == "End")
                                                {
                                                    strStart = "\"S\"," + values[1] + "," + values[2] + "," + "\"Start\"";
                                                    strEnd = "\"S\"," + values[1] + "," + values[2] + "," + "\"End\"";



                                                    Result = listRows.Where(x => x == strStart).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                    Result = null;
                                                    Result = listRows.Where(x => x == strEnd).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                }


                                                if (!validateIsNumaric(FormatCSV(values[1])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                    else
                                                    {
                                                        ContentId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 2).ToList();

                                                        if (_ruleSetItemsContentsList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                    }

                                                }

                                                if (!validateIsNumaric(FormatCSV(values[2])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (Convert.ToInt32(FormatCSV(values[2])) != 2)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                    }

                                                }
                                            }

                                            break;
                                        case "SP":

                                            if (values.Length != 4)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties lenght";
                                                _serviceResponseModel.StatusCode = 400;

                                                break;
                                            }
                                            else
                                            {

                                                if (!validateIsNumaric(FormatCSV(values[1])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties ContentId Numaric";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties ContentId <=0 ";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }
                                                    else
                                                    {

                                                        ContentId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 2).ToList();

                                                        if (_ruleSetItemsContentsList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties ContentId Not found ";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }
                                                        else
                                                        {

                                                            strStart = "\"S\"," + values[1] + "," + "\"2\"" + "," + "\"Start\"";
                                                            strEnd = "\"S\"," + values[1] + "," + "\"2\"" + "," + "\"End\"";

                                                            // Note:  checking Start,End  both are Exist/Not for this  "AP" 
                                                            //        Both are Must be need for "AP"
                                                            Result = listRows.Where(x => x == strStart).ToList();
                                                            if (Result.Count != 1)
                                                            {
                                                                resultStatus = 1;
                                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties Start Not Found";
                                                                _serviceResponseModel.StatusCode = 400;
                                                                break;
                                                            }

                                                            Result = null;
                                                            Result = listRows.Where(x => x == strEnd).ToList();
                                                            if (Result.Count != 1)
                                                            {
                                                                resultStatus = 1;
                                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties End Not Found";
                                                                _serviceResponseModel.StatusCode = 400;
                                                                break;
                                                            }

                                                        }

                                                    }

                                                }

                                                if (!validateIsNumaric(FormatCSV(values[2])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties type  Numaric";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties type <=0";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;

                                                    }
                                                    else
                                                    {

                                                        PropertyTypeId = Convert.ToInt32(FormatCSV(values[2]));
                                                        _rulesetContentTypeList = RulesetSpellContentTypeList.Where(x => x.Id == PropertyTypeId).ToList();

                                                        if (_rulesetContentTypeList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties type Not Found";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                    }


                                                }

                                                // XML value Checking
                                                int resultValue;

                                                var Res = AllPropertyUnitsList.Where(x => x.ContentType == 2 && x.Id == PropertyTypeId);
                                                string PropertyUnits = "";
                                                int Typeid = 0;

                                                foreach (var R in Res)
                                                {
                                                    PropertyUnits = R.Units;
                                                    Typeid = Convert.ToInt32(R.TypeId);
                                                }
                                            }

                                            break;
                                        case "I":
                                            if (values.Length != 4)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item lenght";
                                                _serviceResponseModel.StatusCode = 400;

                                                break;
                                            }
                                            else
                                            {
                                                if (!RecordsStartEnd.Contains(FormatCSV(values[3])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }


                                                if (FormatCSV(values[3]) == "Start")
                                                {
                                                    strStart = "\"I\"," + values[1] + "," + values[2] + "," + "\"Start\"";
                                                    strEnd = "\"I\"," + values[1] + "," + values[2] + "," + "\"End\"";

                                                  

                                                    Result = listRows.Where(x => x == strStart).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                    Result = null;
                                                    Result = listRows.Where(x => x == strEnd).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }
                                                }
                                                else if (FormatCSV(values[3]) == "End")
                                                {
                                                    strStart = "\"I\"," + values[1] + "," + values[2] + "," + "\"Start\"";
                                                    strEnd = "\"I\"," + values[1] + "," + values[2] + "," + "\"End\"";

                                                    Result = listRows.Where(x => x == strStart).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                    Result = null;
                                                    Result = listRows.Where(x => x == strEnd).ToList();
                                                    if (Result.Count != 1)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }
                                                }


                                                if (!validateIsNumaric(FormatCSV(values[1])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }

                                                    else
                                                    {
                                                        ContentId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 1).ToList();

                                                        if (_ruleSetItemsContentsList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                    }

                                                }

                                                if (!validateIsNumaric(FormatCSV(values[2])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        if (Convert.ToInt32(FormatCSV(values[2])) != 1)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                    }

                                                }
                                            }

                                            break;
                                        case "IP":

                                            if (values.Length != 4)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property lenght";
                                                _serviceResponseModel.StatusCode = 400;

                                                break;
                                            }
                                            else
                                            {

                                                if (!validateIsNumaric(FormatCSV(values[1])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;
                                                    }
                                                    else
                                                    {

                                                        ContentId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 1).ToList();

                                                        if (_ruleSetItemsContentsList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }
                                                        else
                                                        {

                                                            strStart = "\"I\"," + values[1] + "," + "\"1\"" + "," + "\"Start\"";
                                                            strEnd = "\"I\"," + values[1] + "," + "\"1\"" + "," + "\"End\"";

                                                            // Note:  checking Start,End  both are Exist/Not for this  "AP" 
                                                            //        Both are Must be need for "AP"
                                                            Result = listRows.Where(x => x == strStart).ToList();
                                                            if (Result.Count != 1)
                                                            {
                                                                resultStatus = 1;
                                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
                                                                _serviceResponseModel.StatusCode = 400;
                                                                break;
                                                            }

                                                            Result = null;
                                                            Result = listRows.Where(x => x == strEnd).ToList();
                                                            if (Result.Count != 1)
                                                            {
                                                                resultStatus = 1;
                                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
                                                                _serviceResponseModel.StatusCode = 400;
                                                                break;
                                                            }

                                                        }

                                                    }

                                                }

                                                if (!validateIsNumaric(FormatCSV(values[2])))
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                                    {
                                                        resultStatus = 1;
                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
                                                        _serviceResponseModel.StatusCode = 400;
                                                        break;

                                                    }
                                                    else
                                                    {

                                                        PropertyTypeId = Convert.ToInt32(FormatCSV(values[2]));
                                                        _rulesetContentTypeList = RulesetItemContentTypeList.Where(x => x.Id == PropertyTypeId).ToList();

                                                        if (_rulesetContentTypeList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                    }


                                                }

                                             
                                                int resultValue;
                                                var Res = AllPropertyUnitsList.Where(x => x.ContentType == 1 && x.Id == PropertyTypeId);
                                                string PropertyUnits = "";
                                                int Typeid = 0;

                                                foreach (var R in Res)
                                                {
                                                    PropertyUnits = R.Units;
                                                    Typeid = Convert.ToInt32(R.TypeId);
                                                }
                                            }

                                            break;

                                    }

                                    dtContents.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3])); //, FormatCSV(values[4]));
                                    break;
                                case 3:

                                    if (values.Length != 5)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell length";
                                        _serviceResponseModel.StatusCode = 400;

                                        break;
                                    }
                                    else
                                    {

                                        if ((validateIsNumaric(FormatCSV(values[1]))) == false || (validateIsNumaric(FormatCSV(values[2]))) == false)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell Numaric";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell Numaric <=0";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {

                                                ContentId = Convert.ToInt32(FormatCSV(values[1]));
                                                _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 1).ToList();

                                                if (_ruleSetItemsContentsList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell ItemContent";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }

                                                ContentId = 0;
                                                ContentId = Convert.ToInt32(FormatCSV(values[2]));
                                                _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 2).ToList();

                                                if (_ruleSetItemsContentsList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell SpellContent";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }


                                                int ItemContentId = Convert.ToInt32(FormatCSV(values[1]));
                                                int SpellContentId = Convert.ToInt32(FormatCSV(values[2]));

                                                _rulesetItemSpell = RulesetItemSpellList.Where(x => x.ItemId == ItemContentId && x.SpellId == SpellContentId).ToList();

                                                if (_rulesetItemSpell.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell Property Exist";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                            }
                                        }

                                    }

                                    dtItemSpells.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), "", "", "");
                                    break;
                                case 4:

                                    if (values.Length != 5)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at corestat length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {
                                        {

                                            if (!validateIsNumaric(FormatCSV(values[1])))
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at corestatTypeId Number";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at corestatTypeId Number <=0 ";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                            }
                                        }

                                        int caseId = 4;
                                        dtCorestats.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]));
                                        break;

                                    }


                                case 5:
                                    // Character Profile
                                    if (values.Length != 5)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Profile length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {
                                        // Charecter Profile Id
                                        if (!validateIsNumaric(FormatCSV(values[1])))
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Charecter-Profile Number";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Charecter-Profile Number <=0 ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {

                                                int CharacterProfileId = Convert.ToInt32(FormatCSV(values[1]));
                                                _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

                                                if (_characterProfileList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Charecter-Profile";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                                else
                                                {


                                                }

                                            }

                                            int caseId = 5;
                                            dtCharacterProfile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]));
                                            // break;

                                        }

                                    }

                                    break;
                                case 6:
                                    // Character Items,Spells,Abilitys

                                    if (values.Length != 3)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-ISP length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {
                                        // Charecter Item Id
                                        if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character-ISP_Id/Character-ProfileId Number";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character- ISP_Id/Character-ProfileId Number <=0 ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {

                                                int CharacterProfileId = 0;
                                                string CaseType = "";
                                                CaseType = FormatCSV(values[0].ToString());   //Item/Sepll/Ability

                                                switch (CaseType)
                                                {
                                                    case "CI":

                                                        int CharacterItemId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _characterItemList = CharacterItemList.Where(x => x.CharacterItemId == CharacterItemId).ToList();

                                                        if (_characterItemList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character ItemId Not valid";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                        CharacterProfileId = 0;
                                                        CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
                                                        _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

                                                        if (_characterProfileList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at ItemId) Not valid";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                        break;
                                                    case "CS":


                                                        int CharacterSpellId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _characterSpellList = CharacterSpellList.Where(x => x.CharacterSpellId == CharacterSpellId).ToList();

                                                        if (_characterSpellList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character SpellId Not valid";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                        CharacterProfileId = 0;
                                                        CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
                                                        _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

                                                        if (_characterProfileList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at SpellId) Not valid";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }



                                                        break;
                                                    case "CA":

                                                        CharacterProfileId = 0;

                                                        int CharacterAbilityId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _characterAbilityList = CharacterAbilitiesList.Where(x => x.CharacterAbilityId == CharacterAbilityId).ToList();

                                                        if (_characterAbilityList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character AbilityId Not valid";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                        CharacterProfileId = 0;
                                                        CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
                                                        _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

                                                        if (_characterProfileList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at AbilityId) Not valid";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                        break;
                                                }

                                            }

                                            int caseId = 6;
                                            dtCharacterISA.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]));
                                        }

                                    }

                                    break;

                                case 7:
                                    // Character Items,Spells,Ability Propertys

                                    if (values.Length != 5)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Items length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {

                                        // Charecter Item Id
                                        if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character-ISP Prperty Number ";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-ISP Prperty Number <=0 ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {

                                                string Prpoperty = "";
                                                Prpoperty = FormatCSV(values[0]).ToString();
                                                switch (Prpoperty)
                                                {
                                                    case "CIP":
                                                        int CharacterItemId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _characterItemList = CharacterItemList.Where(x => x.CharacterItemId == CharacterItemId).ToList();

                                                        if (_characterItemList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character ItemId Not valid(ISP-I property )";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }
                                                        break;
                                                    case "CSP":

                                                        int CharacterSpellId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _characterSpellList = CharacterSpellList.Where(x => x.CharacterSpellId == CharacterSpellId).ToList();


                                                        if (_characterSpellList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character SpellId Not valid(ISP-S property )";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                        break;
                                                    case "CAP":

                                                        int CharacterAbilityId = Convert.ToInt32(FormatCSV(values[1]));
                                                        _characterAbilityList = CharacterAbilitiesList.Where(x => x.CharacterAbilityId == CharacterAbilityId).ToList();

                                                        if (_characterAbilityList.Count == 0)
                                                        {
                                                            resultStatus = 1;
                                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character AbilityId Not valid(ISP-A property )";
                                                            _serviceResponseModel.StatusCode = 400;
                                                            break;
                                                        }

                                                        break;


                                                }

                                            }

                                            dtCharacterISAProperties.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]));
                                            // break

                                        }
                                    }

                                    break;


                                case 8:

                                    // Layout
                                    if (values.Length != 4)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Layout length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {

                                        // Charecter Layout Id
                                        if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Layout Id Number ";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Layout Id Number <=0 ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {

                                                int LayoutId = Convert.ToInt32(FormatCSV(values[1]));
                                                _LayoutList = LayoutList.Where(x => x.LayoutId == LayoutId).ToList();

                                                if (_LayoutList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character LayoutId valid ";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }

                                                int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
                                                _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

                                                if (_characterProfileList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at LayoutId) Not valid";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }

                                            }

                                            dtLayout.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]));
                                            // break

                                        }
                                    }


                                    break;
                                case 9:

                                    //Tab
                                    if (values.Length != 4)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tab length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {

                                        // Charecter Layout Id
                                        if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tab Id Number ";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tab Id Number <=0 ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {

                                                int TabId = Convert.ToInt32(FormatCSV(values[1]));
                                                _TabList = TabList.Where(x => x.TabId == TabId).ToList();

                                                if (_TabList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character TabId  ";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }


                                                int LayoutId = Convert.ToInt32(FormatCSV(values[2]));
                                                _LayoutList = LayoutList.Where(x => x.LayoutId == LayoutId).ToList();

                                                if (_LayoutList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character LayoutId (at TabId) ";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }


                                            }

                                            dtTab.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]));
                                            // break

                                        }
                                    }

                                    break;

                                case 10:

                                    // Tile

                                    if (values.Length != 11)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tile length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {

                                        // Charecter Tile Id
                                        if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tile Id Number ";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tile Id Number <=0 ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {

                                                int TileId = Convert.ToInt32(FormatCSV(values[1]));
                                                _TileList = TileList.Where(x => x.TileId == TileId).ToList();

                                                if (_TileList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character TileId  ";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }


                                                int TabId = Convert.ToInt32(FormatCSV(values[2]));
                                                _TabList = TabList.Where(x => x.TabId == TabId).ToList();

                                                if (_TabList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character TabId (at TileId )  ";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }
                                            }

                                            dtTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]), FormatCSV(values[5]), FormatCSV(values[6]), FormatCSV(values[7]), FormatCSV(values[8]), FormatCSV(values[9]), FormatCSV(values[10]));
                                            // break

                                        }
                                    }

                                    break;

                                case 11:
                                    // Counter Tile
                                    if (values.Length != 8)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character- Counter Tile length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {

                                        // Charecter CounterTile
                                        if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character-CounterTile Id Number ";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-CounterTile Id Number <=0 ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {

                                                int CounterId = Convert.ToInt32(FormatCSV(values[1]));
                                                _CounterTileList = CounterTileList.Where(x => x.CounterId == CounterId).ToList();

                                                if (_CounterTileList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character CounterTile  ";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }

                                                int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
                                                _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

                                                if (_characterProfileList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at CounterTile) Not valid";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }



                                            }

                                            dtCounterTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]), FormatCSV(values[5]));
                                            // break

                                        }
                                    }

                                    break;

                                case 12:
                                    //AttributeTile
                                    if (values.Length != 5)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character- AttributeTile Id length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {
                                        // Charecter AttributeTile
                                        if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character-AttributeTile Id Number ";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-AttributeTileId/CharacterProfile Number <=0 ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {

                                                int AttributeId = Convert.ToInt32(FormatCSV(values[1]));
                                                _AttributeTile = AttributeTileList.Where(x => x.AttributeId == AttributeId).ToList();

                                                if (_AttributeTile.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character AttributeTile  ";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }


                                                int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
                                                _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

                                                if (_characterProfileList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at AttributeTile) Not valid";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }

                                            }

                                        }
                                    }

                                    dtAttributeTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]));

                                    break;

                                case 13:
                                    //LinkTile

                                    if (values.Length != 6)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character- LinkTile Id length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {
                                        // Charecter LinkTile
                                        if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character-LinkTile Id Number ";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-LinkTileId/CharacterProfileId Number <=0 ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                            else
                                            {

                                                int LinkId = Convert.ToInt32(FormatCSV(values[1]));
                                                _LinkTileList = LinkTileList.Where(x => x.LinkId == LinkId).ToList();

                                                if (_LinkTileList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at LinkTile Id Not Exist (at LinkTile Count)  ";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }


                                                int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
                                                _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

                                                if (_characterProfileList.Count == 0)
                                                {
                                                    resultStatus = 1;
                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at LinkTile Count)";
                                                    _serviceResponseModel.StatusCode = 400;
                                                    break;
                                                }

                                            }

                                        }
                                    }

                                    dtLinkTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]), FormatCSV(values[5]));

                                    break;

                                case 14:
                                    //ExecuteTile
                                    if (values.Length != 6)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character- ExecuteTile Id length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character-ExecuteTile Id/CharacterProfileId Number <=0 ";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {


                                            int ExecuteId = Convert.ToInt32(FormatCSV(values[1]));
                                            _ExecuteTileList = ExecuteTileList.Where(x => x.ExecuteId == ExecuteId).ToList();

                                            if (_ExecuteTileList.Count == 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at ExecuteTile Id Not Exist (at ExecuteTile Count)  ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }


                                            int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
                                            _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

                                            if (_characterProfileList.Count == 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at ExecuteTile Count)";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }

                                        }

                                    }

                                    dtExecuteTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]), FormatCSV(values[5]));

                                    break;
                                case 15:
                                    //CommandTile

                                    if (values.Length != 6)
                                    {
                                        resultStatus = 1;
                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character- CommandTile Id length";
                                        _serviceResponseModel.StatusCode = 400;
                                        break;
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
                                        {
                                            resultStatus = 1;
                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character-CommandTile Id/CharacterProfileId Number <=0 ";
                                            _serviceResponseModel.StatusCode = 400;
                                            break;
                                        }
                                        else
                                        {

                                            int CommandId = Convert.ToInt32(FormatCSV(values[1]));
                                            _CommandTileList = CommandTileList.Where(x => x.CommandId == CommandId).ToList();

                                            if (_CommandTileList.Count == 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at CommandTile Id Not Exist (at CommandTile Count)  ";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }


                                            int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
                                            _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

                                            if (_characterProfileList.Count == 0)
                                            {
                                                resultStatus = 1;
                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at CommandTile Count)";
                                                _serviceResponseModel.StatusCode = 400;
                                                break;
                                            }
                                        }
                                    }

                                    dtCommandTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]), FormatCSV(values[5]));

                                    break;
                                case 16:
                                    //ImageTile

                                    break;
                                case 17:
                                    //General Settings

                                    dtGeneralSetttings.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), 0);

                                    break;

                            }
                            error = i;
                        }
                        string Erros1 = "";
                        int FinalresultStatus;

                        Erros1 = saveRulesetContentData(rulesetName, dtGeneralSetttings, dtCorestats, dtContents, dtItemSpells, dtCharacterProfile, dtCharacterISA, dtCharacterISAProperties, dtLayout, dtTab, dtTile, dtCounterTile, dtAttributeTile, dtLinkTile, dtExecuteTile, dtCommandTile, dtImageTile, userId, out FinalresultStatus, storedfilesPath);

                        if (FinalresultStatus == 1)
                        {
                            _serviceResponseModel.ErrorMessage = Erros1;
                            _serviceResponseModel.StatusCode = 400;
                            _serviceResponseModel.ShowToUser = true;

                        }
                        else
                        {
                            Directory.Delete(storedfilesPath, true);



                            _serviceResponseModel.Result = "Ruleset Imported Sucessfully";
                            _serviceResponseModel.StatusCode = 200;
                            _serviceResponseModel.ShowToUser = true;
                        }
                       

                    }

                }
            }
            catch (Exception ex)
            {
                var t = error;
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;

        }


        //public ServiceResponseModel Import2(StreamReader reader, int rulesetId, string userId)
        //{
        //    try
        //    {
        //        System.Text.RegularExpressions.Regex alphanemeric = new System.Text.RegularExpressions.Regex("^[a-zA-Z0-9]*$");

        //        //string corestatId = values[1];
        //        //////Regex.IsMatch(input, @"^[a-zA-Z]+$");
        //        //System.Text.RegularExpressions.Regex numeric = new System.Text.RegularExpressions.Regex("^[0-9]+$");
        //        //System.Text.RegularExpressions.Regex alphanemeric = new System.Text.RegularExpressions.Regex("^[a-zA-Z0-9]*$");
        //        //System.Text.RegularExpressions.Regex alphabets = new System.Text.RegularExpressions.Regex("^[a-zA-z]+$");
        //        //string IsAlphaNumericOrNumeric = string.Empty;

        //        string Errors = "";
        //        int resultStatus = 0; // 0-NoError   1-Error


        //        DataTable dtRuleset = new DataTable();
        //        dtRuleset.Columns.Add("Type", typeof(string));
        //        dtRuleset.Columns.Add("RulesetId", typeof(string));
        //        dtRuleset.Columns.Add("RulesetName", typeof(string));
        //        dtRuleset.Columns.Add("UserName", typeof(string));
        //        dtRuleset.Columns.Add("CreatedDate", typeof(string));

        //        DataTable dtCorestats = new DataTable();
        //        dtCorestats.Columns.Add("Type", typeof(string));
        //        dtCorestats.Columns.Add("TypeId", typeof(string));
        //        dtCorestats.Columns.Add("Name", typeof(string));
        //        dtCorestats.Columns.Add("Description", typeof(string));
        //        dtCorestats.Columns.Add("Metadata", typeof(string));


        //        DataTable dtContents = new DataTable();
        //        dtContents.Columns.Add("Type", typeof(string));
        //        dtContents.Columns.Add("ContentId", typeof(string));
        //        //dtContents.Columns.Add("ItemId", typeof(string));
        //        dtContents.Columns.Add("ContentTypeId", typeof(string));
        //        dtContents.Columns.Add("Value", typeof(string));
        //        //dtContents.Columns.Add("NewItemId", typeof(string));

        //        DataTable dtItemSpells = new DataTable();
        //        dtItemSpells.Columns.Add("Type", typeof(string));
        //        dtItemSpells.Columns.Add("ItemId", typeof(string));
        //        dtItemSpells.Columns.Add("SpellId", typeof(string));
        //        dtItemSpells.Columns.Add("Value", typeof(string));
        //        dtItemSpells.Columns.Add("NewItemId", typeof(string));
        //        dtItemSpells.Columns.Add("NewSpellId", typeof(string));


        //        DataTable dtCharacterProfile = new DataTable();
        //        dtCharacterProfile.Columns.Add("Type", typeof(string));
        //        dtCharacterProfile.Columns.Add("CharacterProfileId", typeof(string));
        //        dtCharacterProfile.Columns.Add("RulesetId", typeof(string));
        //        dtCharacterProfile.Columns.Add("Name", typeof(string));
        //        dtCharacterProfile.Columns.Add("NewCharacterProfileId", typeof(string));


        //        DataTable dtCharacterISA = new DataTable();
        //        dtCharacterISA.Columns.Add("Type", typeof(string));
        //        dtCharacterISA.Columns.Add("CharacterItemId", typeof(string));
        //        dtCharacterISA.Columns.Add("CharacterProfileId", typeof(string));
        //        dtCharacterISA.Columns.Add("NewCharacterItemId", typeof(string));


        //        DataTable dtCharacterISAProperties = new DataTable();
        //        dtCharacterISAProperties.Columns.Add("Type", typeof(string));
        //        dtCharacterISAProperties.Columns.Add("CharacterItemId", typeof(string));
        //        dtCharacterISAProperties.Columns.Add("TypeId", typeof(string));
        //        dtCharacterISAProperties.Columns.Add("Value", typeof(string));


        //        DataTable dtLayout = new DataTable();
        //        dtLayout.Columns.Add("Type", typeof(string));
        //        dtLayout.Columns.Add("LayoutId", typeof(string));
        //        dtLayout.Columns.Add("CharacterProfileId", typeof(string));
        //        dtLayout.Columns.Add("LayoutName", typeof(string));
        //        dtLayout.Columns.Add("NewLayoutId", typeof(string));

        //        DataTable dtTab = new DataTable();
        //        dtTab.Columns.Add("Type", typeof(string));
        //        dtTab.Columns.Add("TabId", typeof(string));
        //        dtTab.Columns.Add("LayoutId", typeof(string));
        //        dtTab.Columns.Add("TabName", typeof(string));
        //        dtTab.Columns.Add("NewTabId", typeof(string));

        //        //DataTable dtTile = new DataTable();
        //        //dtTile.Columns.Add("Type", typeof(string));
        //        //dtTile.Columns.Add("TileId", typeof(string));
        //        //dtTile.Columns.Add("TileContentId", typeof(string));
        //        //dtTile.Columns.Add("TileTypeId", typeof(string));
        //        //dtTile.Columns.Add("EntityId", typeof(string));
        //        //dtTile.Columns.Add("TileLocationId", typeof(string));

        //        DataTable dtTile = new DataTable();
        //        dtTile.Columns.Add("Type", typeof(string));
        //        dtTile.Columns.Add("TileId", typeof(string));
        //        dtTile.Columns.Add("TileContentId", typeof(string));
        //        dtTile.Columns.Add("TileTypeId", typeof(string));
        //        dtTile.Columns.Add("EntityId", typeof(string));
        //        dtTile.Columns.Add("Style", typeof(string));
        //        dtTile.Columns.Add("X", typeof(string));
        //        dtTile.Columns.Add("Y", typeof(string));
        //        dtTile.Columns.Add("Width", typeof(string));
        //        dtTile.Columns.Add("Height", typeof(string));
        //        dtTile.Columns.Add("TileLocationId", typeof(string));


        //        DataTable dtCounterTile = new DataTable();
        //        dtCounterTile.Columns.Add("Type", typeof(string));
        //        dtCounterTile.Columns.Add("CounterId", typeof(string));
        //        dtCounterTile.Columns.Add("CharacterProfileId", typeof(string));
        //        dtCounterTile.Columns.Add("Name", typeof(string));
        //        dtCounterTile.Columns.Add("Value", typeof(string));
        //        dtCounterTile.Columns.Add("Min", typeof(string));
        //        dtCounterTile.Columns.Add("Max", typeof(string));
        //        dtCounterTile.Columns.Add("Step", typeof(string));
        //        // CounterId CharacterProfileId Name Value Min Max Step


        //        DataTable dtAttributeTile = new DataTable();
        //        dtAttributeTile.Columns.Add("Type", typeof(string));
        //        dtAttributeTile.Columns.Add("AttributeId", typeof(string));
        //        dtAttributeTile.Columns.Add("CharacterProfileId", typeof(string));
        //        dtAttributeTile.Columns.Add("Name", typeof(string));
        //        dtAttributeTile.Columns.Add("CorestatValue", typeof(string));
        //        // AttributeId  CharacterProfileId Name CorestatValue

        //        DataTable dtLinkTile = new DataTable();
        //        dtLinkTile.Columns.Add("Type", typeof(string));
        //        dtLinkTile.Columns.Add("LinkId", typeof(string));
        //        dtLinkTile.Columns.Add("CharacterProfileId", typeof(string));
        //        dtLinkTile.Columns.Add("Name", typeof(string));
        //        dtLinkTile.Columns.Add("SelectedProperty", typeof(string));
        //        dtLinkTile.Columns.Add("SelectedPropertyValue", typeof(string));
        //        //LinkId CharacterProfileId Name SelectedProperty SelectedPropertyValue


        //        DataTable dtExecuteTile = new DataTable();
        //        dtExecuteTile.Columns.Add("Type", typeof(string));
        //        dtExecuteTile.Columns.Add("ExecuteId", typeof(string));
        //        dtExecuteTile.Columns.Add("CharacterProfileId", typeof(string));
        //        dtExecuteTile.Columns.Add("Name", typeof(string));
        //        dtExecuteTile.Columns.Add("SelectedProperty", typeof(string));
        //        dtExecuteTile.Columns.Add("SelectedPropertyValue", typeof(string));
        //        //ExecuteId CharacterProfileId Name SelectedProperty SelectedPropertyValue


        //        DataTable dtCommandTile = new DataTable();
        //        dtCommandTile.Columns.Add("Type", typeof(string));
        //        dtCommandTile.Columns.Add("CommandId", typeof(string));
        //        dtCommandTile.Columns.Add("CharacterProfileId", typeof(string));
        //        dtCommandTile.Columns.Add("Name", typeof(string));
        //        dtCommandTile.Columns.Add("Command", typeof(string));
        //        dtCommandTile.Columns.Add("CommandLastResult", typeof(string));
        //        //CommandId CharacterProfileId Name Command CommandLastResult


        //        DataTable dtImageTile = new DataTable();
        //        dtImageTile.Columns.Add("Type", typeof(string));
        //        dtImageTile.Columns.Add("ImageId", typeof(string));
        //        dtImageTile.Columns.Add("CharacterProfileId", typeof(string));
        //        dtImageTile.Columns.Add("Name", typeof(string));
        //        dtImageTile.Columns.Add("ImagePath", typeof(string));
        //        //ImageId CharacterProfileId Name ImagePath


        //        //DataTable dtRuleset = new DataTable();
        //        //DataTable dtCorestats = new DataTable();
        //        //DataTable dtContents = new DataTable();
        //        //DataTable dtItemSpells = new DataTable();
        //        //DataTable dtCharacterProfile = new DataTable();
        //        //DataTable dtCharacterISA = new DataTable();
        //        //DataTable dtCharacterISAProperties = new DataTable();
        //        //DataTable dtLayout = new DataTable();
        //        //DataTable dtTab = new DataTable();
        //        //DataTable dtTile = new DataTable();
        //        //DataTable dtCounterTile = new DataTable();
        //        //DataTable dtAttributeTile = new DataTable();
        //        //DataTable dtLinkTile = new DataTable();
        //        //DataTable dtExecuteTile = new DataTable();
        //        //DataTable dtCommandTile = new DataTable();
        //        //DataTable dtImageTile = new DataTable();


        //        List<RuleSetItemsContent> RuleSetItemsContentList = new List<RuleSetItemsContent>();
        //        List<RulesetContentType> RulesetAbilityContentTypeList = new List<RulesetContentType>();
        //        List<RulesetContentType> RulesetSpellContentTypeList = new List<RulesetContentType>();
        //        List<RulesetContentType> RulesetItemContentTypeList = new List<RulesetContentType>();
        //        List<ItemSpell> RulesetItemSpellList = new List<ItemSpell>();

        //        List<CharacterProfile> CharacterProfileList = new List<CharacterProfile>();
        //        List<CharacterItem> CharacterItemList = new List<CharacterItem>();
        //        List<CharacterItemProperty> CharacterItemPropertyList = new List<CharacterItemProperty>();

        //        List<CharacterSpell> CharacterSpellList = new List<CharacterSpell>();
        //        List<CharacterSpellProperty> CharacterSpellPropertyList = new List<CharacterSpellProperty>();

        //        List<CharacterAbility> CharacterAbilitiesList = new List<CharacterAbility>();
        //        List<CharacterAbilityProperty> CharacterAbilitiesPropertiesList = new List<CharacterAbilityProperty>();

        //        List<Layout> LayoutList = new List<Layout>();
        //        List<Tab> TabList = new List<Tab>();

        //        List<Tile> TileList = new List<Tile>();
        //        List<CounterTile> CounterTileList = new List<CounterTile>();
        //        List<AttributeTile> AttributeTileList = new List<AttributeTile>();

        //        List<LinkTile> LinkTileList = new List<LinkTile>();
        //        List<ExecuteTile> ExecuteTileList = new List<ExecuteTile>();
        //        List<CommandTile> CommandTileList = new List<CommandTile>();
        //        List<ImageTile> ImageTileList = new List<ImageTile>();


        //        var AllPropertyUnitsList = (from _rulesetContentTypes in _context.RulesetContentTypes
        //                                    from _rPGSmithTypes in _context.RPGSmithTypes
        //                                    .Where(mapping => mapping.TypeID == _rulesetContentTypes.TypeId).DefaultIfEmpty()
        //                                        //where _rulesetContentTypes.ContentType == SpellContentType
        //                                    select new
        //                                    {
        //                                        Id = _rulesetContentTypes.Id,
        //                                        ContentType = _rulesetContentTypes.ContentType,
        //                                        Name = _rulesetContentTypes.Name,
        //                                        TypeId = _rulesetContentTypes.TypeId,
        //                                        // Metadata = _rulesetContentTypes.Metadata,
        //                                        // Description = _rulesetContentTypes.Description,
        //                                        Mandatory = _rulesetContentTypes.Mandatory,
        //                                        IsRuleSet = _rulesetContentTypes.IsRuleSet,
        //                                        Units = _rPGSmithTypes.Units
        //                                    }).ToList();


        //        List<string> listRows = new List<string>();
        //        while (!reader.EndOfStream)
        //        {
        //            listRows.Add(reader.ReadLine());
        //        }

        //        List<string> list = listRows.Where(x => x.Contains("\"R\"")).ToList();
        //        if (list.Count != 1)
        //        {
        //            resultStatus = 1;
        //            _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset Type Not found";
        //            _serviceResponseModel.StatusCode = 400;
        //            return _serviceResponseModel;
        //        }
        //        else
        //        {
        //            var _values = list[0].Split(',');

        //            if (_values.Length < 1 || _values[0] == "")
        //            {
        //                resultStatus = 1;
        //                _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset No data found";
        //                _serviceResponseModel.StatusCode = 400;
        //                return _serviceResponseModel;

        //            }
        //            else
        //            {

        //                if (FormatCSV(_values[0]) != "R")
        //                {
        //                    resultStatus = 1;
        //                    _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset";
        //                    _serviceResponseModel.StatusCode = 400;
        //                    return _serviceResponseModel;
        //                }
        //                else if (!validateIsNumaric(FormatCSV(_values[1])))
        //                {
        //                    resultStatus = 1;
        //                    _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset Id Numaric";
        //                    _serviceResponseModel.StatusCode = 400;
        //                    return _serviceResponseModel;

        //                }
        //                else
        //                {
        //                    if (Convert.ToInt32(FormatCSV(_values[1])) <= 0)
        //                    {
        //                        resultStatus = 1;
        //                        _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset Id <=0";
        //                        _serviceResponseModel.StatusCode = 400;
        //                        return _serviceResponseModel;
        //                    }
        //                    else
        //                    {

        //                        //Note :  RulesetIdImp  is a .csv file Imported RulesetId

        //                        int RulesetIdImp = Convert.ToInt32(FormatCSV(_values[1]));
        //                        List<RuleSet> RulesetList = (from _RuleSets in _context.RuleSets
        //                                                     where _RuleSets.RulesetID == RulesetIdImp
        //                                                     select _RuleSets).ToList();



        //                        if (RulesetList.Count == 0)
        //                        {
        //                            resultStatus = 1;
        //                            _serviceResponseModel.ErrorMessage = "Invalid data at Ruleset Id Not found";
        //                            _serviceResponseModel.StatusCode = 400;
        //                            return _serviceResponseModel;
        //                        }
        //                        else
        //                        {

        //                            //var RulesetId = 5695;
        //                            RuleSetItemsContentList = (from _RuleSetItemsContents in _context.RuleSetItemsContents
        //                                                       where _RuleSetItemsContents.RulesetID == RulesetIdImp
        //                                                       select _RuleSetItemsContents).ToList();

        //                            RulesetItemSpellList = (from _ItemSpells in _context.ItemSpells
        //                                                    join _RuleSetItemsContents in _context.RuleSetItemsContents
        //                                                     on _ItemSpells.ItemId equals _RuleSetItemsContents.ContentId
        //                                                    join _RuleSets in _context.RuleSets
        //                                                    on _RuleSetItemsContents.RulesetID equals _RuleSets.RulesetID
        //                                                    where _RuleSets.RulesetID == RulesetIdImp
        //                                                    select _ItemSpells
        //                                                    ).ToList();


        //                            var AbilityContentType = 3;
        //                            RulesetAbilityContentTypeList = (from _rulesetContentTypes in _context.RulesetContentTypes
        //                                                             where _rulesetContentTypes.ContentType == AbilityContentType
        //                                                             select _rulesetContentTypes).ToList();


        //                            var SpellContentType = 2;
        //                            RulesetSpellContentTypeList = (from _rulesetContentTypes in _context.RulesetContentTypes
        //                                                           where _rulesetContentTypes.ContentType == SpellContentType
        //                                                           select _rulesetContentTypes).ToList();


        //                            var ItemContentType = 1;
        //                            RulesetItemContentTypeList = (from _rulesetContentTypes in _context.RulesetContentTypes
        //                                                          where _rulesetContentTypes.ContentType == ItemContentType
        //                                                          select _rulesetContentTypes).ToList();



        //                            CharacterProfileList = (from _CharacterProfiles in _context.CharacterProfiles
        //                                                    where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                                    select _CharacterProfiles).ToList();




        //                            CharacterItemList = (from _CharacterItems in _context.CharacterItems
        //                                                 join _CharacterProfiles in _context.CharacterProfiles
        //                                                 on _CharacterItems.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                                 where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                                 select _CharacterItems).ToList();


        //                            CharacterItemPropertyList = (from _CharacterItemProperties in _context.CharacterItemProperties
        //                                                         from _CharacterItems in _context.CharacterItems
        //                                                         .Where(mapping => mapping.CharacterItemId == _CharacterItemProperties.CharacterItemId)
        //                                                         join _CharacterProfiles in _context.CharacterProfiles
        //                                                         on _CharacterItems.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                                         where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                                         select _CharacterItemProperties).ToList();



        //                            CharacterSpellList = (from _CharacterSpells in _context.CharacterSpells
        //                                                  join _CharacterProfiles in _context.CharacterProfiles
        //                                                  on _CharacterSpells.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                                  where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                                  select _CharacterSpells).ToList();



        //                            CharacterSpellPropertyList = (from _CharacterSpellProperties in _context.CharacterSpellProperties
        //                                                          from _CharacterSpells in _context.CharacterSpells
        //                                                          .Where(mapping => mapping.CharacterSpellId == _CharacterSpellProperties.CharacterSpellId)
        //                                                          join _CharacterProfiles in _context.CharacterProfiles
        //                                                          on _CharacterSpells.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                                          where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                                          select _CharacterSpellProperties).ToList();


        //                            CharacterAbilitiesList = (from _CharacterAbilities in _context.CharacterAbilities
        //                                                      join _CharacterProfiles in _context.CharacterProfiles
        //                                                      on _CharacterAbilities.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                                      where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                                      select _CharacterAbilities).ToList();



        //                            CharacterAbilitiesPropertiesList = (from _CharacterAbilityProperties in _context.CharacterAbilityProperties
        //                                                                from _CharacterAbilities in _context.CharacterAbilities
        //                                                                .Where(mapping => mapping.CharacterAbilityId == _CharacterAbilityProperties.CharacterAbilityId)
        //                                                                join _CharacterProfiles in _context.CharacterProfiles
        //                                                                on _CharacterAbilities.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                                                where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                                                select _CharacterAbilityProperties).ToList();




        //                            LayoutList = (from _Layouts in _context.Layouts
        //                                          join _CharacterProfiles in _context.CharacterProfiles
        //                                          on _Layouts.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                          where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                          select _Layouts).ToList();


        //                            TabList = (from _Tabs in _context.Tabs
        //                                       join _Layouts in _context.Layouts
        //                                       on _Tabs.LayoutId equals _Layouts.LayoutId
        //                                       join _CharacterProfiles in _context.CharacterProfiles
        //                                       on _Layouts.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                       where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                       select _Tabs).ToList();

        //                            TileList = (from _Tiles in _context.Tiles
        //                                        join _Tabs in _context.Tabs on _Tiles.TileContentId equals _Tabs.TabId
        //                                        join _Layouts in _context.Layouts on _Tabs.LayoutId equals _Layouts.LayoutId
        //                                        join _CharacterProfiles in _context.CharacterProfiles
        //                                        on _Layouts.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                        where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                        select _Tiles).ToList();





        //                            CounterTileList = (from _CounterTiles in _context.CounterTiles
        //                                               join _CharacterProfiles in _context.CharacterProfiles
        //                                               on _CounterTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                               where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                               select _CounterTiles).ToList();

        //                            AttributeTileList = (from _AttributeTiles in _context.AttributeTiles
        //                                                 join _CharacterProfiles in _context.CharacterProfiles
        //                                                  on _AttributeTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                                 where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                                 select _AttributeTiles).ToList();

        //                            LinkTileList = (from _LinkTiles in _context.LinkTiles
        //                                            join _CharacterProfiles in _context.CharacterProfiles
        //                                             on _LinkTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                            where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                            select _LinkTiles).ToList();



        //                            ExecuteTileList = (from _ExecuteTiles in _context.ExecuteTiles
        //                                               join _CharacterProfiles in _context.CharacterProfiles
        //                                                on _ExecuteTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                               where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                               select _ExecuteTiles).ToList();


        //                            CommandTileList = (from _CommandTiles in _context.CommandTiles
        //                                               join _CharacterProfiles in _context.CharacterProfiles
        //                                                on _CommandTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                               where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                               select _CommandTiles).ToList();


        //                            ImageTileList = (from _ImageTiles in _context.ImageTiles
        //                                             join _CharacterProfiles in _context.CharacterProfiles
        //                                              on _ImageTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
        //                                             where _CharacterProfiles.RulesetId == RulesetIdImp
        //                                             select _ImageTiles).ToList();




        //                        }
        //                    }
        //                }
        //            }

        //            if (resultStatus == 0)
        //            {

        //                for (int i = 0; i < listRows.Count; i++)
        //                {

        //                    if (resultStatus == 1)
        //                    {
        //                        break;
        //                    }

        //                    // var line = listRows[].ReadLine();
        //                    var values = listRows[i].Split(',');

        //                    if (values.Length == 0 || values[0] == "")
        //                    {
        //                        resultStatus = 1;
        //                        _serviceResponseModel.ErrorMessage = "Invalid data split null";
        //                        _serviceResponseModel.StatusCode = 400;
        //                        break;
        //                    }
        //                    else
        //                    {
        //                        string CurrentRecordType = FormatCSV(values[0]);
        //                        var RecordTypes = new[] { "R", "G", "CO", "S", "SP", "A", "AP", "I", "IP", "IS", "ISP", "CP", "CI", "CS", "CA", "CIP", "CSP", "CAP", "CL", "CTB", "CT", "COT", "CAT", "CLT", "CET", "CCT", "CIM" };

        //                        if (CurrentRecordType == "G")
        //                        {

        //                        }


        //                        if (!RecordTypes.Contains(CurrentRecordType))
        //                        {
        //                            resultStatus = 1;
        //                            _serviceResponseModel.ErrorMessage = "Invalid Data at Record Type " + CurrentRecordType;
        //                            _serviceResponseModel.StatusCode = 400;
        //                            break;
        //                        }

        //                    }

        //                    int CaseId = 0;
        //                    if ((FormatCSV(values[0]) == "R"))
        //                    {
        //                        CaseId = 1;  // Ruleset
        //                    }
        //                    else if (((FormatCSV(values[0]) == "IP") || (FormatCSV(values[0]) == "I")) || ((FormatCSV(values[0]) == "SP") || (FormatCSV(values[0]) == "S")) || ((FormatCSV(values[0]) == "AP") || (FormatCSV(values[0]) == "A")))
        //                    {
        //                        CaseId = 2; // Items,Seplls,Abilitys
        //                    }

        //                    else if ((FormatCSV(values[0]) == "ISP"))
        //                    {
        //                        CaseId = 3;  //ItemSpells
        //                    }
        //                    else if ((FormatCSV(values[0]) == "CO"))
        //                    {
        //                        CaseId = 4; // Corestats
        //                    }
        //                    else if ((FormatCSV(values[0]) == "CP"))
        //                    {
        //                        CaseId = 5;  //Characters 
        //                    }
        //                    else if ((FormatCSV(values[0]) == "CI") || (FormatCSV(values[0]) == "CS") || (FormatCSV(values[0]) == "CA"))
        //                    {
        //                        CaseId = 6;  //Characters 
        //                    }
        //                    else if ((FormatCSV(values[0]) == "CIP") || (FormatCSV(values[0]) == "CSP") || (FormatCSV(values[0]) == "CAP"))
        //                    {
        //                        CaseId = 7;  //Characters 
        //                    }
        //                    else if ((FormatCSV(values[0]) == "CL"))
        //                    {
        //                        CaseId = 8;  //Characters 
        //                    }
        //                    else if ((FormatCSV(values[0]) == "CTB"))
        //                    {
        //                        CaseId = 9;  //Characters 
        //                    }
        //                    else if ((FormatCSV(values[0]) == "CT"))
        //                    {
        //                        CaseId = 10;  //Characters 
        //                    }
        //                    else if ((FormatCSV(values[0]) == "COT"))
        //                    {
        //                        CaseId = 11;  //Characters 
        //                    }

        //                    else if ((FormatCSV(values[0]) == "CAT"))
        //                    {
        //                        CaseId = 12;  //Characters 
        //                    }
        //                    else if ((FormatCSV(values[0]) == "CLT"))
        //                    {
        //                        CaseId = 13;  //Characters 
        //                    }

        //                    else if ((FormatCSV(values[0]) == "CET"))
        //                    {
        //                        CaseId = 14;  //Characters 
        //                    }
        //                    else if ((FormatCSV(values[0]) == "CCT"))
        //                    {
        //                        CaseId = 15;  //Characters 
        //                    }

        //                    else if ((FormatCSV(values[0]) == "CIM"))
        //                    {
        //                        CaseId = 16;  //Characters 
        //                    }


        //                    int ContentId = 0;
        //                    int PropertyTypeId = 0;
        //                    List<RuleSetItemsContent> _ruleSetItemsContentsList = new List<RuleSetItemsContent>();
        //                    List<RulesetContentType> _rulesetContentTypeList = new List<RulesetContentType>();
        //                    List<ItemSpell> _rulesetItemSpell = new List<ItemSpell>();

        //                    List<CharacterProfile> _characterProfileList;
        //                    List<CharacterItem> _characterItemList;
        //                    List<CharacterSpell> _characterSpellList;
        //                    List<CharacterAbility> _characterAbilityList;


        //                    //List<CharacterItemProperty> _characterItemPropertyList;
        //                    List<Layout> _LayoutList;
        //                    List<Tab> _TabList;
        //                    List<Tile> _TileList;
        //                    List<CounterTile> _CounterTileList;
        //                    List<AttributeTile> _AttributeTile;
        //                    List<LinkTile> _LinkTileList;
        //                    List<ExecuteTile> _ExecuteTileList;
        //                    List<CommandTile> _CommandTileList;
        //                    List<ImageTile> _ImageTileList;

        //                    //DataTable dtRuleset = new DataTable();
        //                    //DataTable dtCorestats = new DataTable();
        //                    //DataTable dtContents = new DataTable();
        //                    //DataTable dtItemSpells = new DataTable();
        //                    //DataTable dtCharacterProfile = new DataTable();
        //                    //DataTable dtCharacterISA = new DataTable();
        //                    //DataTable dtCharacterISAProperties = new DataTable();
        //                    //DataTable dtLayout = new DataTable();
        //                    //DataTable dtTab = new DataTable();
        //                    //DataTable dtTile = new DataTable();
        //                    //DataTable dtCounterTile = new DataTable();
        //                    //DataTable dtAttributeTile = new DataTable();
        //                    //DataTable dtLinkTile = new DataTable();
        //                    //DataTable dtExecuteTile = new DataTable();
        //                    //DataTable dtCommandTile = new DataTable();
        //                    //DataTable dtImageTile = new DataTable();





        //                    List<string> Result;
        //                    string strStart = "";
        //                    string strEnd = "";

        //                    //Note: Array of Start,End words
        //                    var RecordsStartEnd = new[] { "Start", "End" };

        //                    switch (CaseId)
        //                    {
        //                        case 1:
        //                            dtRuleset.Rows.Add(FormatCSV((values[0])), FormatCSV((values[1])), FormatCSV((values[2])), FormatCSV((values[3])), FormatCSV((values[4])));
        //                            break;
        //                        case 2:
        //                            string Case = "";
        //                            Case = FormatCSV((values[0]));

        //                            switch (Case)
        //                            {
        //                                case "A":

        //                                    if (values.Length != 4)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Ability length";
        //                                        _serviceResponseModel.StatusCode = 400;

        //                                        break;
        //                                    }
        //                                    else
        //                                    {
        //                                        if (!RecordsStartEnd.Contains(FormatCSV(values[3])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                        if (FormatCSV(values[3]) == "Start")
        //                                        {
        //                                            strStart = "\"A\"," + values[1] + "," + values[2] + "," + "\"Start\"";
        //                                            strEnd = "\"A\"," + values[1] + "," + values[2] + "," + "\"End\"";

        //                                            // List<string> Result;

        //                                            Result = listRows.Where(item => item == strStart).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                            Result = null;
        //                                            Result = listRows.Where(item => item == strEnd).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }
        //                                        }
        //                                        else if (FormatCSV(values[3]) == "End")
        //                                        {
        //                                            strStart = "\"A\"," + values[1] + "," + values[2] + "," + "\"Start\"";
        //                                            strEnd = "\"A\"," + values[1] + "," + values[2] + "," + "\"End\"";



        //                                            Result = listRows.Where(item => item == strStart).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                            Result = null;
        //                                            Result = listRows.Where(item => item == strEnd).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                        }


        //                                        if (!validateIsNumaric(FormatCSV(values[1])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                            else
        //                                            {
        //                                                ContentId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 3).ToList();

        //                                                if (_ruleSetItemsContentsList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                            }

        //                                        }

        //                                        if (!validateIsNumaric(FormatCSV(values[2])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }
        //                                            else
        //                                            {
        //                                                if (Convert.ToInt32(FormatCSV(values[2])) != 3)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                            }

        //                                        }
        //                                    }

        //                                    break;
        //                                case "AP":

        //                                    if (values.Length != 4)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys Property length";
        //                                        _serviceResponseModel.StatusCode = 400;

        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        if (!validateIsNumaric(FormatCSV(values[1])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }
        //                                            else
        //                                            {

        //                                                ContentId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 3).ToList();

        //                                                if (_ruleSetItemsContentsList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }
        //                                                else
        //                                                {

        //                                                    strStart = "\"A\"," + values[1] + "," + "\"3\"" + "," + "\"Start\"";
        //                                                    strEnd = "\"A\"," + values[1] + "," + "\"3\"" + "," + "\"End\"";

        //                                                    // Note:  checking Start,End  both are Exist/Not for this  "AP" 
        //                                                    //        Both are Must be need for "AP"
        //                                                    Result = listRows.Where(item => item == strStart).ToList();
        //                                                    if (Result.Count != 1)
        //                                                    {
        //                                                        resultStatus = 1;
        //                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                        _serviceResponseModel.StatusCode = 400;
        //                                                        break;
        //                                                    }

        //                                                    Result = null;
        //                                                    Result = listRows.Where(item => item == strEnd).ToList();
        //                                                    if (Result.Count != 1)
        //                                                    {
        //                                                        resultStatus = 1;
        //                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                        _serviceResponseModel.StatusCode = 400;
        //                                                        break;
        //                                                    }

        //                                                }

        //                                            }

        //                                        }

        //                                        if (!validateIsNumaric(FormatCSV(values[2])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;

        //                                            }
        //                                            else
        //                                            {

        //                                                PropertyTypeId = Convert.ToInt32(FormatCSV(values[2]));
        //                                                _rulesetContentTypeList = RulesetAbilityContentTypeList.Where(x => x.Id == PropertyTypeId).ToList();

        //                                                if (_rulesetContentTypeList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                            }


        //                                        }

        //                                        // XML value Checking

        //                                        //int resultValue;
        //                                        //string Error = validate_XmlValue(3,Convert.ToInt32(FormatCSV(values[2])), FormatCSV(values[3]), out resultValue);
        //                                        //if (resultValue == 1)
        //                                        //{
        //                                        //    resultStatus = 1;
        //                                        //    _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                        //    _serviceResponseModel.StatusCode = 400;
        //                                        //    break;
        //                                        //}

        //                                        // XML value Checking
        //                                        //int resultValue;
        //                                        //var Res = AllPropertyUnitsList.Where(x => x.ContentType == 3 && x.Id == PropertyTypeId);
        //                                        //string PropertyUnits = "";
        //                                        //int Typeid = 0;

        //                                        //foreach (var R in Res)
        //                                        //{
        //                                        //    PropertyUnits = R.Units;
        //                                        //    Typeid = Convert.ToInt32(R.TypeId);
        //                                        //}


        //                                        //string ResultofXML = validate_XmlValue(3, Typeid, FormatCSV(values[3]), PropertyUnits, out resultValue);
        //                                        //if (resultValue == 1)
        //                                        //{
        //                                        //    resultStatus = 1;
        //                                        //    _serviceResponseModel.ErrorMessage = "Invalid Data at Ability Properties XML data";
        //                                        //    _serviceResponseModel.StatusCode = 400;
        //                                        //    break;
        //                                        //}
        //                                        //else
        //                                        //{
        //                                        //    if(Typeid==8)
        //                                        //    {

        //                                        //        string ImagePagth = ResultofXML;


        //                                        //        string ImagePagth2 = ResultofXML;

        //                                        //    }
        //                                        //}


        //                                    }

        //                                    break;
        //                                case "S":
        //                                    if (values.Length != 4)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls length";
        //                                        _serviceResponseModel.StatusCode = 400;

        //                                        break;
        //                                    }
        //                                    else
        //                                    {
        //                                        if (!RecordsStartEnd.Contains(FormatCSV(values[3])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                        if (FormatCSV(values[3]) == "Start")
        //                                        {
        //                                            strStart = "\"S\"," + values[1] + "," + values[2] + "," + "\"Start\"";
        //                                            strEnd = "\"S\"," + values[1] + "," + values[2] + "," + "\"End\"";

        //                                            // List<string> Result;

        //                                            Result = listRows.Where(x => x == strStart).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                            Result = null;
        //                                            Result = listRows.Where(x => x == strEnd).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }
        //                                        }
        //                                        else if (FormatCSV(values[3]) == "End")
        //                                        {
        //                                            strStart = "\"S\"," + values[1] + "," + values[2] + "," + "\"Start\"";
        //                                            strEnd = "\"S\"," + values[1] + "," + values[2] + "," + "\"End\"";



        //                                            Result = listRows.Where(x => x == strStart).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                            Result = null;
        //                                            Result = listRows.Where(x => x == strEnd).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                        }


        //                                        if (!validateIsNumaric(FormatCSV(values[1])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                            else
        //                                            {
        //                                                ContentId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 2).ToList();

        //                                                if (_ruleSetItemsContentsList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                            }

        //                                        }

        //                                        if (!validateIsNumaric(FormatCSV(values[2])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }
        //                                            else
        //                                            {
        //                                                if (Convert.ToInt32(FormatCSV(values[2])) != 2)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                            }

        //                                        }
        //                                    }

        //                                    break;
        //                                case "SP":

        //                                    if (values.Length != 4)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties lenght";
        //                                        _serviceResponseModel.StatusCode = 400;

        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        if (!validateIsNumaric(FormatCSV(values[1])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties ContentId Numaric";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties ContentId <=0 ";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }
        //                                            else
        //                                            {

        //                                                ContentId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 2).ToList();

        //                                                if (_ruleSetItemsContentsList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties ContentId Not found ";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }
        //                                                else
        //                                                {

        //                                                    strStart = "\"S\"," + values[1] + "," + "\"2\"" + "," + "\"Start\"";
        //                                                    strEnd = "\"S\"," + values[1] + "," + "\"2\"" + "," + "\"End\"";

        //                                                    // Note:  checking Start,End  both are Exist/Not for this  "AP" 
        //                                                    //        Both are Must be need for "AP"
        //                                                    Result = listRows.Where(x => x == strStart).ToList();
        //                                                    if (Result.Count != 1)
        //                                                    {
        //                                                        resultStatus = 1;
        //                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties Start Not Found";
        //                                                        _serviceResponseModel.StatusCode = 400;
        //                                                        break;
        //                                                    }

        //                                                    Result = null;
        //                                                    Result = listRows.Where(x => x == strEnd).ToList();
        //                                                    if (Result.Count != 1)
        //                                                    {
        //                                                        resultStatus = 1;
        //                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties End Not Found";
        //                                                        _serviceResponseModel.StatusCode = 400;
        //                                                        break;
        //                                                    }

        //                                                }

        //                                            }

        //                                        }

        //                                        if (!validateIsNumaric(FormatCSV(values[2])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties type  Numaric";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties type <=0";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;

        //                                            }
        //                                            else
        //                                            {

        //                                                PropertyTypeId = Convert.ToInt32(FormatCSV(values[2]));
        //                                                _rulesetContentTypeList = RulesetSpellContentTypeList.Where(x => x.Id == PropertyTypeId).ToList();

        //                                                if (_rulesetContentTypeList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties type Not Found";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                            }


        //                                        }

        //                                        // XML value Checking
        //                                        int resultValue;

        //                                        var Res = AllPropertyUnitsList.Where(x => x.ContentType == 2 && x.Id == PropertyTypeId);
        //                                        string PropertyUnits = "";
        //                                        int Typeid = 0;

        //                                        foreach (var R in Res)
        //                                        {
        //                                            PropertyUnits = R.Units;
        //                                            Typeid = Convert.ToInt32(R.TypeId);
        //                                        }


        //                                        //string Error = validate_XmlValue(2, Typeid, FormatCSV(values[3]),PropertyUnits, out resultValue);
        //                                        //if (resultValue == 1)
        //                                        //{
        //                                        //    resultStatus = 1;
        //                                        //    _serviceResponseModel.ErrorMessage = "Invalid Data at Seplls Properties XML data";
        //                                        //    _serviceResponseModel.StatusCode = 400;
        //                                        //    break;
        //                                        //}



        //                                    }

        //                                    break;
        //                                case "I":
        //                                    if (values.Length != 4)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item lenght";
        //                                        _serviceResponseModel.StatusCode = 400;

        //                                        break;
        //                                    }
        //                                    else
        //                                    {
        //                                        if (!RecordsStartEnd.Contains(FormatCSV(values[3])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                        if (FormatCSV(values[3]) == "Start")
        //                                        {
        //                                            strStart = "\"I\"," + values[1] + "," + values[2] + "," + "\"Start\"";
        //                                            strEnd = "\"I\"," + values[1] + "," + values[2] + "," + "\"End\"";

        //                                            // List<string> Result;

        //                                            Result = listRows.Where(x => x == strStart).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                            Result = null;
        //                                            Result = listRows.Where(x => x == strEnd).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }
        //                                        }
        //                                        else if (FormatCSV(values[3]) == "End")
        //                                        {
        //                                            strStart = "\"I\"," + values[1] + "," + values[2] + "," + "\"Start\"";
        //                                            strEnd = "\"I\"," + values[1] + "," + values[2] + "," + "\"End\"";

        //                                            Result = listRows.Where(x => x == strStart).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                            Result = null;
        //                                            Result = listRows.Where(x => x == strEnd).ToList();
        //                                            if (Result.Count != 1)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }
        //                                        }


        //                                        if (!validateIsNumaric(FormatCSV(values[1])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }

        //                                            else
        //                                            {
        //                                                ContentId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 1).ToList();

        //                                                if (_ruleSetItemsContentsList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                            }

        //                                        }

        //                                        if (!validateIsNumaric(FormatCSV(values[2])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }
        //                                            else
        //                                            {
        //                                                if (Convert.ToInt32(FormatCSV(values[2])) != 1)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Item";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                            }

        //                                        }
        //                                    }

        //                                    break;
        //                                case "IP":

        //                                    if (values.Length != 4)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property lenght";
        //                                        _serviceResponseModel.StatusCode = 400;

        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        if (!validateIsNumaric(FormatCSV(values[1])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;
        //                                            }
        //                                            else
        //                                            {

        //                                                ContentId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 1).ToList();

        //                                                if (_ruleSetItemsContentsList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }
        //                                                else
        //                                                {

        //                                                    strStart = "\"I\"," + values[1] + "," + "\"1\"" + "," + "\"Start\"";
        //                                                    strEnd = "\"I\"," + values[1] + "," + "\"1\"" + "," + "\"End\"";

        //                                                    // Note:  checking Start,End  both are Exist/Not for this  "AP" 
        //                                                    //        Both are Must be need for "AP"
        //                                                    Result = listRows.Where(x => x == strStart).ToList();
        //                                                    if (Result.Count != 1)
        //                                                    {
        //                                                        resultStatus = 1;
        //                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
        //                                                        _serviceResponseModel.StatusCode = 400;
        //                                                        break;
        //                                                    }

        //                                                    Result = null;
        //                                                    Result = listRows.Where(x => x == strEnd).ToList();
        //                                                    if (Result.Count != 1)
        //                                                    {
        //                                                        resultStatus = 1;
        //                                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
        //                                                        _serviceResponseModel.StatusCode = 400;
        //                                                        break;
        //                                                    }

        //                                                }

        //                                            }

        //                                        }

        //                                        if (!validateIsNumaric(FormatCSV(values[2])))
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {
        //                                            if (Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                            {
        //                                                resultStatus = 1;
        //                                                _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
        //                                                _serviceResponseModel.StatusCode = 400;
        //                                                break;

        //                                            }
        //                                            else
        //                                            {

        //                                                PropertyTypeId = Convert.ToInt32(FormatCSV(values[2]));
        //                                                _rulesetContentTypeList = RulesetItemContentTypeList.Where(x => x.Id == PropertyTypeId).ToList();

        //                                                if (_rulesetContentTypeList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                            }


        //                                        }

        //                                        // XML value Checking

        //                                        //int resultValue;

        //                                        //string Error = validate_XmlValue(1, Convert.ToInt32(FormatCSV(values[2])), FormatCSV(values[3]), out resultValue);
        //                                        //if (resultValue == 1)
        //                                        //{
        //                                        //    resultStatus = 1;
        //                                        //    _serviceResponseModel.ErrorMessage = "Invalid Data at Item Property";
        //                                        //    _serviceResponseModel.StatusCode = 400;
        //                                        //    break;
        //                                        //}

        //                                        int resultValue;
        //                                        var Res = AllPropertyUnitsList.Where(x => x.ContentType == 1 && x.Id == PropertyTypeId);
        //                                        string PropertyUnits = "";
        //                                        int Typeid = 0;

        //                                        foreach (var R in Res)
        //                                        {
        //                                            PropertyUnits = R.Units;
        //                                            Typeid = Convert.ToInt32(R.TypeId);
        //                                        }


        //                                        //string Error = validate_XmlValue(1, Typeid, FormatCSV(values[3]), PropertyUnits, out resultValue);
        //                                        //if (resultValue == 1)
        //                                        //{
        //                                        //    resultStatus = 1;
        //                                        //    _serviceResponseModel.ErrorMessage = "Invalid Data at Item Properties XML data";
        //                                        //    _serviceResponseModel.StatusCode = 400;
        //                                        //    break;
        //                                        //}



        //                                    }

        //                                    break;

        //                            }

        //                            dtContents.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3])); //, FormatCSV(values[4]));
        //                            break;
        //                        case 3:

        //                            if (values.Length != 5)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell length";
        //                                _serviceResponseModel.StatusCode = 400;

        //                                break;
        //                            }
        //                            else
        //                            {

        //                                if ((validateIsNumaric(FormatCSV(values[1]))) == false || (validateIsNumaric(FormatCSV(values[2]))) == false)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell Numaric";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell Numaric <=0";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        ContentId = Convert.ToInt32(FormatCSV(values[1]));
        //                                        _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 1).ToList();

        //                                        if (_ruleSetItemsContentsList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell ItemContent";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }

        //                                        ContentId = 0;
        //                                        ContentId = Convert.ToInt32(FormatCSV(values[2]));
        //                                        _ruleSetItemsContentsList = RuleSetItemsContentList.Where(x => x.ContentId == ContentId && x.Type == 2).ToList();

        //                                        if (_ruleSetItemsContentsList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell SpellContent";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                        int ItemContentId = Convert.ToInt32(FormatCSV(values[1]));
        //                                        int SpellContentId = Convert.ToInt32(FormatCSV(values[2]));

        //                                        _rulesetItemSpell = RulesetItemSpellList.Where(x => x.ItemId == ItemContentId && x.SpellId == SpellContentId).ToList();

        //                                        if (_rulesetItemSpell.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at ItemSpell Property Exist";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                    }
        //                                }

        //                            }

        //                            dtItemSpells.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), "", "", "");
        //                            break;
        //                        case 4:

        //                            if (values.Length != 5)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at corestat length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {
        //                                //var CorestatType = new[] { "1", "14", "16" };

        //                                //if (!CorestatType.Contains(values[1]))
        //                                //{
        //                                //    resultStatus = 1;
        //                                //    _serviceResponseModel.ErrorMessage = "Invalid Data corestat type";
        //                                //    _serviceResponseModel.StatusCode = 400;
        //                                //    break;
        //                                //}
        //                                //else
        //                                {

        //                                    if (!validateIsNumaric(FormatCSV(values[1])))
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at corestatTypeId Number";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {
        //                                        if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at corestatTypeId Number <=0 ";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                    }
        //                                }

        //                                int caseId = 4;
        //                                dtCorestats.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), verifyForDupliacte(FormatCSV(values[2]), caseId, rulesetId), verifyForDupliacte(FormatCSV(values[3]), caseId, rulesetId), FormatCSV(values[4]));
        //                                break;

        //                            }


        //                        case 5:
        //                            // Character Profile
        //                            if (values.Length != 4)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Profile length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {
        //                                // Charecter Profile Id
        //                                if (!validateIsNumaric(FormatCSV(values[1])))
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Charecter-Profile Number";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Charecter-Profile Number <=0 ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        //List<CharacterProfile> CharacterProfileList = new List<CharacterProfile>();
        //                                        //List<CharacterItem> CharacterItemList = new List<CharacterItem>();
        //                                        //List<CharacterItemProperty> CharacterItemPropertyList = new List<CharacterItemProperty>();

        //                                        int CharacterProfileId = Convert.ToInt32(FormatCSV(values[1]));
        //                                        _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                        if (_characterProfileList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Abilitys";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }
        //                                        else
        //                                        {


        //                                        }

        //                                    }

        //                                    int caseId = 5;
        //                                    dtCharacterProfile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]));
        //                                    // break;


        //                                    //DataTable dtCharacterProfile = new DataTable();
        //                                    //dtCharacterProfile.Columns.Add("Type", typeof(string));
        //                                    //dtCharacterProfile.Columns.Add("CharacterProfileId", typeof(string));
        //                                    //dtCharacterProfile.Columns.Add("RulesetId", typeof(string));
        //                                    //dtCharacterProfile.Columns.Add("Name", typeof(string));
        //                                    //dtCharacterProfile.Columns.Add("NewCharacterProfileId", typeof(string));


        //                                }

        //                            }

        //                            break;
        //                        case 6:
        //                            // Character Items,Spells,Abilitys

        //                            if (values.Length != 3)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-ISP length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {
        //                                // Charecter Item Id
        //                                if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character-ISP_Id/Character-ProfileId Number";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character- ISP_Id/Character-ProfileId Number <=0 ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        //List<CharacterProfile> CharacterProfileList = new List<CharacterProfile>();
        //                                        //List<CharacterItem> CharacterItemList = new List<CharacterItem>();
        //                                        //List<CharacterItemProperty> CharacterItemPropertyList = new List<CharacterItemProperty>();

        //                                        int CharacterProfileId = 0;
        //                                        string CaseType = "";
        //                                        CaseType = FormatCSV(values[0].ToString());   //Item/Sepll/Ability

        //                                        switch (CaseType)
        //                                        {
        //                                            case "CI":

        //                                                int CharacterItemId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _characterItemList = CharacterItemList.Where(x => x.CharacterItemId == CharacterItemId).ToList();

        //                                                if (_characterItemList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character ItemId Not valid";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                                CharacterProfileId = 0;
        //                                                CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
        //                                                _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                                if (_characterProfileList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at ItemId) Not valid";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                                break;
        //                                            case "CS":


        //                                                int CharacterSpellId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _characterSpellList = CharacterSpellList.Where(x => x.CharacterSpellId == CharacterSpellId).ToList();

        //                                                if (_characterSpellList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character SpellId Not valid";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                                CharacterProfileId = 0;
        //                                                CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
        //                                                _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                                if (_characterProfileList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at SpellId) Not valid";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }



        //                                                break;
        //                                            case "CA":

        //                                                CharacterProfileId = 0;

        //                                                int CharacterAbilityId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _characterAbilityList = CharacterAbilitiesList.Where(x => x.CharacterAbilityId == CharacterAbilityId).ToList();

        //                                                if (_characterAbilityList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character AbilityId Not valid";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                                CharacterProfileId = 0;
        //                                                CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
        //                                                _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                                if (_characterProfileList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at AbilityId) Not valid";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                                break;
        //                                        }

        //                                    }

        //                                    int caseId = 6;
        //                                    dtCharacterISA.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]));


        //                                    //DataTable dtCharacterISA = new DataTable();
        //                                    //dtCharacterISA.Columns.Add("Type", typeof(string));
        //                                    //dtCharacterISA.Columns.Add("CharacterItemId", typeof(string));
        //                                    //dtCharacterISA.Columns.Add("CharacterProfileId", typeof(string));

        //                                    //DataTable dtCharacterISAProperties = new DataTable();
        //                                    //dtCharacterISAProperties.Columns.Add("Type", typeof(string));
        //                                    //dtCharacterISAProperties.Columns.Add("CharacterItemId", typeof(string));
        //                                    //dtCharacterISAProperties.Columns.Add("TypeId", typeof(string));
        //                                    //dtCharacterISAProperties.Columns.Add("Value", typeof(string));

        //                                }

        //                            }

        //                            break;

        //                        case 7:
        //                            // Character Items,Spells,Ability Propertys

        //                            //DataTable dtCharacterISAProperties = new DataTable();
        //                            //dtCharacterISAProperties.Columns.Add("Type", typeof(string));
        //                            //dtCharacterISAProperties.Columns.Add("CharacterItemId", typeof(string));
        //                            //dtCharacterISAProperties.Columns.Add("TypeId", typeof(string));
        //                            //dtCharacterISAProperties.Columns.Add("Value", typeof(string));

        //                            if (values.Length != 4)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Items length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {

        //                                // Charecter Item Id
        //                                if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character-ISP Prperty Number ";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-ISP Prperty Number <=0 ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        //List<CharacterProfile> CharacterProfileList = new List<CharacterProfile>();
        //                                        //List<CharacterItem> CharacterItemList = new List<CharacterItem>();
        //                                        //List<CharacterItemProperty> CharacterItemPropertyList = new List<CharacterItemProperty>();



        //                                        string Prpoperty = "";
        //                                        Prpoperty = FormatCSV(values[0]).ToString();
        //                                        switch (Prpoperty)
        //                                        {
        //                                            case "CIP":
        //                                                int CharacterItemId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _characterItemList = CharacterItemList.Where(x => x.CharacterItemId == CharacterItemId).ToList();

        //                                                if (_characterItemList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character ItemId Not valid(ISP-I property )";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }
        //                                                break;
        //                                            case "CSP":

        //                                                int CharacterSpellId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _characterSpellList = CharacterSpellList.Where(x => x.CharacterSpellId == CharacterSpellId).ToList();


        //                                                if (_characterSpellList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character SpellId Not valid(ISP-S property )";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                                break;
        //                                            case "CAP":

        //                                                int CharacterAbilityId = Convert.ToInt32(FormatCSV(values[1]));
        //                                                _characterAbilityList = CharacterAbilitiesList.Where(x => x.CharacterAbilityId == CharacterAbilityId).ToList();

        //                                                if (_characterAbilityList.Count == 0)
        //                                                {
        //                                                    resultStatus = 1;
        //                                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character AbilityId Not valid(ISP-A property )";
        //                                                    _serviceResponseModel.StatusCode = 400;
        //                                                    break;
        //                                                }

        //                                                break;


        //                                        }

        //                                        //int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
        //                                        //_characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                        //if (_characterProfileList.Count == 0)
        //                                        //{
        //                                        //    resultStatus = 1;
        //                                        //    _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at ItemId) Not valid";
        //                                        //    _serviceResponseModel.StatusCode = 400;
        //                                        //    break;
        //                                        //}

        //                                    }

        //                                    dtCharacterISAProperties.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]));
        //                                    // break

        //                                }
        //                            }

        //                            break;


        //                        case 8:

        //                            // Layout
        //                            if (values.Length != 4)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Layout length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {

        //                                // Charecter Layout Id
        //                                if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Layout Id Number ";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Layout Id Number <=0 ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        int LayoutId = Convert.ToInt32(FormatCSV(values[1]));
        //                                        _LayoutList = LayoutList.Where(x => x.LayoutId == LayoutId).ToList();

        //                                        if (_LayoutList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character LayoutId valid ";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }

        //                                        int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
        //                                        _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                        if (_characterProfileList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at LayoutId) Not valid";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }

        //                                    }

        //                                    dtLayout.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]));
        //                                    // break

        //                                }
        //                            }


        //                            //List<Layout> _LayoutList;
        //                            //List<Tab> _TabList;
        //                            //List<Tile> _TileList;
        //                            //List<CounterTile> _CounterTileList;
        //                            //List<AttributeTile> _AttributeTile;
        //                            //List<LinkTile> _LinkTileList;
        //                            //List<ExecuteTile> _ExecuteTileList;
        //                            //List<CommandTile> _CommandTileList;
        //                            //List<ImageTile> _ImageTileList;

        //                            //DataTable dtRuleset = new DataTable();
        //                            //DataTable dtCorestats = new DataTable();
        //                            //DataTable dtContents = new DataTable();
        //                            //DataTable dtItemSpells = new DataTable();
        //                            //DataTable dtCharacterProfile = new DataTable();
        //                            //DataTable dtCharacterISA = new DataTable();
        //                            //DataTable dtCharacterISAProperties = new DataTable();
        //                            //DataTable dtLayout = new DataTable();
        //                            //DataTable dtTab = new DataTable();
        //                            //DataTable dtTile = new DataTable();
        //                            //DataTable dtCounterTile = new DataTable();
        //                            //DataTable dtAttributeTile = new DataTable();
        //                            //DataTable dtLinkTile = new DataTable();
        //                            //DataTable dtExecuteTile = new DataTable();
        //                            //DataTable dtCommandTile = new DataTable();
        //                            //DataTable dtImageTile = new DataTable();


        //                            break;
        //                        case 9:

        //                            //Tab
        //                            if (values.Length != 4)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tab length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {

        //                                // Charecter Layout Id
        //                                if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tab Id Number ";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tab Id Number <=0 ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        int TabId = Convert.ToInt32(FormatCSV(values[1]));
        //                                        _TabList = TabList.Where(x => x.TabId == TabId).ToList();

        //                                        if (_TabList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character TabId  ";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                        int LayoutId = Convert.ToInt32(FormatCSV(values[2]));
        //                                        _LayoutList = LayoutList.Where(x => x.LayoutId == LayoutId).ToList();

        //                                        if (_LayoutList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character LayoutId (at TabId) ";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                    }

        //                                    dtTab.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]));
        //                                    // break

        //                                }
        //                            }

        //                            break;

        //                        case 10:

        //                            // Tile

        //                            if (values.Length != 11)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tile length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {

        //                                // Charecter Tile Id
        //                                if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tile Id Number ";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-Tile Id Number <=0 ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        int TileId = Convert.ToInt32(FormatCSV(values[1]));
        //                                        _TileList = TileList.Where(x => x.TileId == TileId).ToList();

        //                                        if (_TileList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character TileId  ";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                        int TabId = Convert.ToInt32(FormatCSV(values[2]));
        //                                        _TabList = TabList.Where(x => x.TabId == TabId).ToList();

        //                                        if (_TabList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character TabId (at TileId )  ";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                        //int LayoutId = Convert.ToInt32(FormatCSV(values[2]));
        //                                        //_LayoutList = LayoutList.Where(x => x.LayoutId == LayoutId).ToList();

        //                                        //if (_LayoutList.Count == 0)
        //                                        //{
        //                                        //    resultStatus = 1;
        //                                        //    _serviceResponseModel.ErrorMessage = "Invalid Data at Character LayoutId (at TileId) ";
        //                                        //    _serviceResponseModel.StatusCode = 400;
        //                                        //    break;
        //                                        //}

        //                                    }

        //                                    dtTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]), FormatCSV(values[5]), FormatCSV(values[6]), FormatCSV(values[7]), FormatCSV(values[8]), FormatCSV(values[9]), FormatCSV(values[10]));
        //                                    // break

        //                                }
        //                            }

        //                            break;

        //                        case 11:
        //                            // Counter Tile
        //                            if (values.Length != 8)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character- Counter Tile length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {

        //                                // Charecter CounterTile
        //                                if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character-CounterTile Id Number ";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-CounterTile Id Number <=0 ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        int CounterId = Convert.ToInt32(FormatCSV(values[1]));
        //                                        _CounterTileList = CounterTileList.Where(x => x.CounterId == CounterId).ToList();

        //                                        if (_CounterTileList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character CounterTile  ";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                        //int TabId = Convert.ToInt32(FormatCSV(values[2]));
        //                                        //_TabList = TabList.Where(x => x.TabId == TabId).ToList();

        //                                        //if (_TabList.Count == 0)
        //                                        //{
        //                                        //    resultStatus = 1;
        //                                        //    _serviceResponseModel.ErrorMessage = "Invalid Data at Character TabId (at TileId )  ";
        //                                        //    _serviceResponseModel.StatusCode = 400;
        //                                        //    break;
        //                                        //}


        //                                        int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
        //                                        _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                        if (_characterProfileList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at CounterTile) Not valid";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }



        //                                    }

        //                                    dtCounterTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]), FormatCSV(values[5]));
        //                                    // break

        //                                }
        //                            }

        //                            break;

        //                        case 12:
        //                            //AttributeTile
        //                            if (values.Length != 5)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character- AttributeTile Id length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {
        //                                // Charecter AttributeTile
        //                                if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character-AttributeTile Id Number ";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-AttributeTileId/CharacterProfile Number <=0 ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        int AttributeId = Convert.ToInt32(FormatCSV(values[1]));
        //                                        _AttributeTile = AttributeTileList.Where(x => x.AttributeId == AttributeId).ToList();

        //                                        if (_AttributeTile.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character AttributeTile  ";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                        int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
        //                                        _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                        if (_characterProfileList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at AttributeTile) Not valid";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }

        //                                    }

        //                                }
        //                            }

        //                            dtAttributeTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]));

        //                            break;

        //                        case 13:
        //                            //LinkTile

        //                            if (values.Length != 6)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character- LinkTile Id length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {
        //                                // Charecter LinkTile
        //                                if (validateIsNumaric(FormatCSV(values[1])) == false || validateIsNumaric(FormatCSV(values[2])) == false)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character-LinkTile Id Number ";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character-LinkTileId/CharacterProfileId Number <=0 ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                    else
        //                                    {

        //                                        int LinkId = Convert.ToInt32(FormatCSV(values[1]));
        //                                        _LinkTileList = LinkTileList.Where(x => x.LinkId == LinkId).ToList();

        //                                        if (_LinkTileList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at LinkTile Id Not Exist (at LinkTile Count)  ";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }


        //                                        int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
        //                                        _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                        if (_characterProfileList.Count == 0)
        //                                        {
        //                                            resultStatus = 1;
        //                                            _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at LinkTile Count)";
        //                                            _serviceResponseModel.StatusCode = 400;
        //                                            break;
        //                                        }

        //                                    }

        //                                }
        //                            }

        //                            dtLinkTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]), FormatCSV(values[5]));

        //                            break;

        //                        case 14:
        //                            //ExecuteTile
        //                            if (values.Length != 6)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character- ExecuteTile Id length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {
        //                                if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character-ExecuteTile Id/CharacterProfileId Number <=0 ";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {


        //                                    int ExecuteId = Convert.ToInt32(FormatCSV(values[1]));
        //                                    _ExecuteTileList = ExecuteTileList.Where(x => x.ExecuteId == ExecuteId).ToList();

        //                                    if (_ExecuteTileList.Count == 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at ExecuteTile Id Not Exist (at ExecuteTile Count)  ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }


        //                                    int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
        //                                    _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                    if (_characterProfileList.Count == 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at ExecuteTile Count)";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }

        //                                }

        //                            }

        //                            dtExecuteTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]), FormatCSV(values[5]));

        //                            break;
        //                        case 15:
        //                            //CommandTile

        //                            if (values.Length != 6)
        //                            {
        //                                resultStatus = 1;
        //                                _serviceResponseModel.ErrorMessage = "Invalid Data at Character- CommandTile Id length";
        //                                _serviceResponseModel.StatusCode = 400;
        //                                break;
        //                            }
        //                            else
        //                            {
        //                                if (Convert.ToInt32(FormatCSV(values[1])) <= 0 || Convert.ToInt32(FormatCSV(values[2])) <= 0)
        //                                {
        //                                    resultStatus = 1;
        //                                    _serviceResponseModel.ErrorMessage = "Invalid Data at Character-CommandTile Id/CharacterProfileId Number <=0 ";
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    break;
        //                                }
        //                                else
        //                                {

        //                                    int CommandId = Convert.ToInt32(FormatCSV(values[1]));
        //                                    _CommandTileList = CommandTileList.Where(x => x.CommandId == CommandId).ToList();

        //                                    if (_CommandTileList.Count == 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at CommandTile Id Not Exist (at CommandTile Count)  ";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }


        //                                    int CharacterProfileId = Convert.ToInt32(FormatCSV(values[2]));
        //                                    _characterProfileList = CharacterProfileList.Where(x => x.CharacterProfileId == CharacterProfileId).ToList();

        //                                    if (_characterProfileList.Count == 0)
        //                                    {
        //                                        resultStatus = 1;
        //                                        _serviceResponseModel.ErrorMessage = "Invalid Data at Character ProfileId (at CommandTile Count)";
        //                                        _serviceResponseModel.StatusCode = 400;
        //                                        break;
        //                                    }
        //                                }
        //                            }

        //                            dtCommandTile.Rows.Add(FormatCSV(values[0]), FormatCSV(values[1]), FormatCSV(values[2]), FormatCSV(values[3]), FormatCSV(values[4]), FormatCSV(values[5]));

        //                            break;
        //                        case 16:
        //                            //ImageTile

        //                            break;

        //                    }
        //                }

        //                if (resultStatus == 0)
        //                {

        //                    //Note : Ruleset Id to save data
        //                    //if (dtRuleset.Rows.Count > 0 && dtContents.Rows.Count > 0)
        //                    if (dtRuleset.Rows.Count > 0 && resultStatus == 0)
        //                    {
        //                        if (rulesetId != 0)
        //                        {
        //                            string Result3 = validateForImportDuplicateName(dtContents, dtCorestats, rulesetId, out resultStatus);

        //                            if (resultStatus == 1)
        //                            {
        //                                _serviceResponseModel.ErrorMessage = Result3;
        //                                _serviceResponseModel.StatusCode = 400;
        //                                _serviceResponseModel.ShowToUser = true;
        //                            }
        //                            else
        //                            {
        //                                //Save data
        //                                string Erros1 = "";
        //                                int FinalresultStatus;

        //                                Erros1 = saveRulesetContentData(dtRuleset, dtCorestats, dtContents, dtItemSpells, dtCharacterProfile, dtCharacterISA, dtCharacterISAProperties, dtLayout, dtTab, dtTile, dtCounterTile, dtAttributeTile, dtLinkTile, dtExecuteTile, dtCommandTile, dtImageTile, rulesetId, userId, out FinalresultStatus);

        //                                if (FinalresultStatus == 1)
        //                                {
        //                                    _serviceResponseModel.ErrorMessage = Erros1;
        //                                    _serviceResponseModel.StatusCode = 400;
        //                                    _serviceResponseModel.ShowToUser = true;

        //                                }
        //                                else
        //                                {
        //                                    _serviceResponseModel.Result = "Ruleset Imported Sucessfully";
        //                                    _serviceResponseModel.StatusCode = 200;
        //                                    _serviceResponseModel.ShowToUser = true;
        //                                }


        //                                //DataTable dtRuleset = new DataTable();
        //                                //DataTable dtCorestats = new DataTable();
        //                                //DataTable dtContents = new DataTable();
        //                                //DataTable dtItemSpells = new DataTable();
        //                                //DataTable dtCharacterProfile = new DataTable();
        //                                //DataTable dtCharacterISA = new DataTable();
        //                                //DataTable dtCharacterISAProperties = new DataTable();
        //                                //DataTable dtLayout = new DataTable();
        //                                //DataTable dtTab = new DataTable();
        //                                //DataTable dtTile = new DataTable();
        //                                //DataTable dtCounterTile = new DataTable();
        //                                //DataTable dtAttributeTile = new DataTable();
        //                                //DataTable dtLinkTile = new DataTable();
        //                                //DataTable dtExecuteTile = new DataTable();
        //                                //DataTable dtCommandTile = new DataTable();
        //                                //DataTable dtImageTile = new DataTable();



        //                            }

        //                        }
        //                    }


        //                }

        //            }

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        _serviceResponseModel.ErrorMessage = ex.Message;
        //        _serviceResponseModel.StatusCode = 500;
        //    }
        //    return _serviceResponseModel;

        //}
        public string validateForImportDuplicateName(DataTable dtContents, DataTable dtCorestats, int rulesetId, out int resultStatusOUT)
        {
            resultStatusOUT = 0;
            string Errors = "";
            int resultStatus = 0;
            string Result = "";

            if (dtContents.Rows.Count > 0)
            {
                Result = Valdate("Item", dtContents, rulesetId, out resultStatus);
                if (resultStatus == 1)
                {
                    Errors = Errors + Result;
                    resultStatusOUT = 1;
                }

                Result = Valdate("Spell", dtContents, rulesetId, out resultStatus);
                if (resultStatus == 1)
                {
                    Errors = Errors + Result;
                    resultStatusOUT = 1;
                }


                Result = Valdate("Ability", dtContents, rulesetId, out resultStatus);
                if (resultStatus == 1)
                {
                    Errors = Errors + Result;
                    resultStatusOUT = 1;
                }
            }

            if (dtCorestats.Rows.Count > 0)
            {

                Result = Valdate("Corestats", dtCorestats, rulesetId, out resultStatus);
                if (resultStatus == 1)
                {
                    Errors = Errors + Result;
                    resultStatusOUT = 1;
                }

            }
            return Errors;
        }
        public string Valdate(string validateType, DataTable dtContents, int rulesetId, out int resultStatus)
        {

            string Errors = "";
            resultStatus = 0;

            switch (validateType)
            {

                case "Item":

                    string itemFilterName = "Name";
                    int itemContentType = 1;

                    var ItemsList = (from _Items in _context.Items
                                     from _RulesetContentTypes in _context.RulesetContentTypes
                                     .Where(mapping => mapping.Id == _Items.ContentTypeId).DefaultIfEmpty()
                                     join _RuleSetItemsContents in _context.RuleSetItemsContents on _Items.ContentId equals _RuleSetItemsContents.ContentId
                                     join _RuleSets in _context.RuleSets on _RuleSetItemsContents.RulesetID equals _RuleSets.RulesetID
                                     where _RuleSets.RulesetID == rulesetId
                                     && _RulesetContentTypes.TypeId == 1 && _RulesetContentTypes.Name == itemFilterName
                                     && _RulesetContentTypes.IsActive == true
                                     && _RulesetContentTypes.ContentType == itemContentType
                                     && _RulesetContentTypes.IsRuleSet == true

                                     select new
                                     {
                                         ItemId = _Items.ItemId,
                                         ContentId = _Items.ContentId,
                                         ContentTypeId = _Items.ContentTypeId,
                                         Value = _Items.value,
                                         Name = _RulesetContentTypes.Name,
                                         TypeId = _RulesetContentTypes.TypeId
                                     });

                    List<ItemProperties> _rulesetItemPropertiesList = new List<ItemProperties>();
                    foreach (var val in ItemsList)
                    {
                        ItemProperties _rulesetItemPropertie = new ItemProperties();
                        _rulesetItemPropertie.Id = Convert.ToInt32(val.ItemId);
                        _rulesetItemPropertie.Value = Utility.ConvertTypeValueXMLtoClass(val.TypeId, Convert.ToString(val.Value), "");
                        _rulesetItemPropertiesList.Add(_rulesetItemPropertie);

                    }

                    string query = "ContentTypeId=1 and Type='IP'";
                    DataView dv = new DataView(dtContents);
                    dv.RowFilter = query;

                    DataTable dt = dv.ToTable("dtResult");


                    for (int j = 0; j < dt.Rows.Count; j++)
                    {
                        ItemProperties objItemProperties = new ItemProperties();
                        objItemProperties.TypeId = 1;
                        objItemProperties.Value = Utility.ConvertTypeValueXMLtoClass(Convert.ToInt32(1), (dt.Rows[j]["Value"]).ToString(), null);
                      
                        if (objItemProperties.Value != null)
                        {
                            if (objItemProperties.Value.Text != null && objItemProperties.Value.Text.value != "")
                            {
                                List<ItemProperties> _characterItems = _rulesetItemPropertiesList.Where(x => x.Value.Text.value == objItemProperties.Value.Text.value).ToList();
                                if (_characterItems.Count() > 0)
                                {
                                    resultStatus = 1;

                                }
                            }

                        }

                        if (resultStatus == 1)
                        {
                            Errors = Errors + "Item Name Already Exist <br/>";
                            break;
                        }
                    }

                    break;
                case "Spell":

                    string spellFilterName = "Name";
                    int spellContentType = 2; // spells
                    string spellQuery = "";


                    var SpellList = (from _Spells in _context.Spells
                                     from _RulesetContentTypes in _context.RulesetContentTypes
                                     .Where(mapping => mapping.Id == _Spells.ContentTypeId).DefaultIfEmpty()
                                     join _RuleSetItemsContents in _context.RuleSetItemsContents on _Spells.ContentId equals _RuleSetItemsContents.ContentId
                                     join _RuleSets in _context.RuleSets on _RuleSetItemsContents.RulesetID equals _RuleSets.RulesetID
                                     where _RuleSets.RulesetID == rulesetId
                                     && _RulesetContentTypes.TypeId == 1 && _RulesetContentTypes.Name == spellFilterName
                                     && _RulesetContentTypes.ContentType == spellContentType
                                  
                                     select new
                                     {
                                         SpellId = _Spells.SpellId,
                                         ContentId = _Spells.ContentId,
                                         ContentTypeId = _Spells.ContentTypeId,
                                         Value = _Spells.value,
                                         Name = _RulesetContentTypes.Name,
                                         TypeId = _RulesetContentTypes.TypeId
                                     });

                    List<SpellProperties> _rulesetSpellPropertiesList = new List<SpellProperties>();
                    foreach (var val in SpellList)
                    {
                        SpellProperties _rulesetSpellPropertie = new SpellProperties();
                        _rulesetSpellPropertie.Id = Convert.ToInt32(val.SpellId);
                        _rulesetSpellPropertie.Value = Utility.ConvertTypeValueXMLtoClass(val.TypeId, Convert.ToString(val.Value), "");
                        _rulesetSpellPropertiesList.Add(_rulesetSpellPropertie);

                    }

                    spellQuery = "ContentTypeId=10 and Type='SP'";
                    DataView dv2 = new DataView(dtContents);
                    dv2.RowFilter = spellQuery;

                    DataTable dtResult = dv2.ToTable("dtResult");


                    for (int j = 0; j < dtResult.Rows.Count; j++)
                    {
                        SpellProperties _rulesetSpellPropertie = new SpellProperties();
                        _rulesetSpellPropertie.TypeId = 1;
                        _rulesetSpellPropertie.Value = Utility.ConvertTypeValueXMLtoClass(Convert.ToInt32(1), (dtResult.Rows[j]["Value"]).ToString(), null);
                    
                        if (_rulesetSpellPropertie.Value != null)
                        {
                            if (_rulesetSpellPropertie.Value.Text != null && _rulesetSpellPropertie.Value.Text.value != "")
                            {
                                List<SpellProperties> _characterItems = _rulesetSpellPropertiesList.Where(x => x.Value.Text.value == _rulesetSpellPropertie.Value.Text.value).ToList();
                                if (_characterItems.Count() > 0)
                                {
                                    resultStatus = 1;
                                }
                            }

                        }

                        if (resultStatus == 1)
                        {
                            Errors = Errors + "Spell Name Already Exist <br/>";
                            break;
                        }
                    }

                    break;




                case "Ability":
                    string AbilityFilterName = "Name";
                    int AbilityContentType = 3; // Abilitys
                    string AbilityQuery = "";


                    var AbilityList = (from _Abilities in _context.Abilities
                                       from _RulesetContentTypes in _context.RulesetContentTypes
                                       .Where(mapping => mapping.Id == _Abilities.ContentTypeId).DefaultIfEmpty()
                                       join _RuleSetItemsContents in _context.RuleSetItemsContents on _Abilities.ContentId equals _RuleSetItemsContents.ContentId
                                       join _RuleSets in _context.RuleSets on _RuleSetItemsContents.RulesetID equals _RuleSets.RulesetID
                                       where _RuleSets.RulesetID == rulesetId
                                       && _RulesetContentTypes.TypeId == 1 && _RulesetContentTypes.Name == AbilityFilterName
                                       && _RulesetContentTypes.ContentType == AbilityContentType
                                     
                                       select new
                                       {
                                           AbilityId = _Abilities.AbilityId,
                                           ContentId = _Abilities.ContentId,
                                           ContentTypeId = _Abilities.ContentTypeId,
                                           Value = _Abilities.value,
                                           Name = _RulesetContentTypes.Name,
                                           TypeId = _RulesetContentTypes.TypeId
                                       });

                    List<AbilityProperties> _rulesetAbilityPropertiesList = new List<AbilityProperties>();
                    foreach (var val in AbilityList)
                    {
                        AbilityProperties _rulesetAbilityPropertie = new AbilityProperties();
                        _rulesetAbilityPropertie.Id = Convert.ToInt32(val.AbilityId);
                        _rulesetAbilityPropertie.Value = Utility.ConvertTypeValueXMLtoClass(val.TypeId, Convert.ToString(val.Value), "");
                        _rulesetAbilityPropertiesList.Add(_rulesetAbilityPropertie);

                    }

                    AbilityQuery = "ContentTypeId=19 and Type='AP'";
                    DataView dv3 = new DataView(dtContents);
                    dv3.RowFilter = AbilityQuery;

                    DataTable dtResult3 = dv3.ToTable("dtResult");


                    for (int j = 0; j < dtResult3.Rows.Count; j++)
                    {
                        AbilityProperties _rulesetAbilityPropertie = new AbilityProperties();
                        _rulesetAbilityPropertie.TypeId = 1;
                        _rulesetAbilityPropertie.Value = Utility.ConvertTypeValueXMLtoClass(Convert.ToInt32(1), (dtResult3.Rows[j]["Value"]).ToString(), null);
                    
                        if (_rulesetAbilityPropertie.Value != null)
                        {
                            if (_rulesetAbilityPropertie.Value.Text != null && _rulesetAbilityPropertie.Value.Text.value != "")
                            {
                                List<AbilityProperties> _characterItems = _rulesetAbilityPropertiesList.Where(x => x.Value.Text.value == _rulesetAbilityPropertie.Value.Text.value).ToList();
                                if (_characterItems.Count() > 0)
                                {
                                    // Errors = Errors + "Item Name Already Exist <br/>";
                                    resultStatus = 1;
                                }
                            }

                        }

                        if (resultStatus == 1)
                        {
                            Errors = Errors + "Ability Name Already Exist <br/>";
                            break;
                        }
                    }

                    break;

                case "Corestats":


                    var CorestatsList = (from _Abilities in _context.CoreStats
                                         where _Abilities.RulesetID == rulesetId
                                         select _Abilities);


                    List<Corestats> _rulesetCorestatsPropertiesList = new List<Corestats>();

                    foreach (var val in CorestatsList)
                    {
                        Corestats _rulesetCorestatsPropertie = new Corestats();
                        _rulesetCorestatsPropertie.TypeId = 1;
                        _rulesetCorestatsPropertie.Name = val.Name;
                        _rulesetCorestatsPropertie.Description = val.Description;
                        _rulesetCorestatsPropertiesList.Add(_rulesetCorestatsPropertie);

                    }

                    for (int j = 0; j < dtContents.Rows.Count; j++)
                    {

                        List<Corestats> _Corestats = _rulesetCorestatsPropertiesList.Where(x => x.Name == dtContents.Rows[j]["Name"].ToString()).ToList();
                        if (_Corestats.Count() > 0)
                        {
                         
                            resultStatus = 1;
                        }

                        if (resultStatus == 1)
                        {
                            Errors = Errors + "Corestat Name Already Exist <br/>";
                            break;
                        }
                    }


                    break;
            }


            return Errors;
        }
        public string verifyForDupliacteCorestatNames(string val, int caseId, int RuleSetId)
        {

            var Result = _context.CoreStats.Where(p => p.RulesetID == RuleSetId && p.Name == val).FirstOrDefault();

            if (Result != null)
            {
                val = val + "_1";
            }

            return val;
        }
        public DataTable getRuleSetContentsData(DataTable dtContents, DataTable dtItemSpells, List<Data.Models.RuleSetItemsContent> _ruleSetContentsList, int Type)
        {
            string RecordType = "";
            string ContentId = "";
            string ContentTypeId = "";
            string Value = "";

            if (Type == 3)
            {
                RecordType = "\"AP\"";

                foreach (var _ruleSetItem in _ruleSetContentsList)
                {
                    var _ruleSetAbilityProperties = (from _abilityProperties in _context.RulesetContentTypes
                                                     join rpgType in _context.RPGSmithTypes on _abilityProperties.TypeId equals rpgType.TypeID
                                                     join _abilityPropertyValue in _context.Abilities on _abilityProperties.Id equals _abilityPropertyValue.ContentTypeId into ps
                                                     from _abilityPropertyValue in ps.DefaultIfEmpty()
                                                     where _abilityPropertyValue.ContentId == _ruleSetItem.ContentId
                                                     select new
                                                     {
                                                         Id = _abilityPropertyValue.AbilityId,
                                                         ContentTypeId = _abilityPropertyValue.ContentTypeId,
                                                         TypeId = _abilityProperties.TypeId,
                                                         Name = _abilityProperties.Name,
                                                         Description = _abilityProperties.Description,
                                                         Value = _abilityPropertyValue.value,
                                                         Units = rpgType.Units
                                                     }).ToList();

                    if (_ruleSetAbilityProperties != null)
                    {
                        dtContents.Rows.Add("\"A\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"3\"", "\"Start\"");

                        foreach (var _ruleSetAbilityPropertie in _ruleSetAbilityProperties)
                        {
                            if (_ruleSetItem.ContentId.ToString() != null || _ruleSetItem.ContentId.ToString() != "")
                            {
                                ContentId = "\"" + _ruleSetItem.ContentId.ToString() + "\"";
                            }
                            else
                            {
                                ContentId = "";
                            }

                            if (_ruleSetAbilityPropertie.ContentTypeId.ToString() != null || _ruleSetAbilityPropertie.ContentTypeId.ToString() != "")
                            {
                                ContentTypeId = "\"" + _ruleSetAbilityPropertie.ContentTypeId.ToString() + "\"";


                            }
                            else
                            {
                                ContentTypeId = "\"\"";
                            }

                            if (_ruleSetAbilityPropertie.Value == null)
                            {
                                Value = "\"\"";
                            }
                            else
                            {
                                Value = "\"" + _ruleSetAbilityPropertie.Value.ToString() + "\"";
                            }
                            dtContents.Rows.Add(RecordType, ContentId, ContentTypeId, Value);
                        }

                        dtContents.Rows.Add("\"A\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"3\"", "\"End\"");
                    }

                }
            }
            else if (Type == 2)
            {
                RecordType = "\"SP\"";

                foreach (var _ruleSetItem in _ruleSetContentsList)
                {
                    Items _ruleSetItemVM = new Items();
                    _ruleSetItemVM.ItemProperties = new List<ItemProperties>();
                    var _ruleSetSpellProperties = (from _spellProperties in _context.RulesetContentTypes
                                                   join rpgType in _context.RPGSmithTypes on _spellProperties.TypeId equals rpgType.TypeID
                                                   join _spellPropertyValue in _context.Spells on _spellProperties.Id equals _spellPropertyValue.ContentTypeId into ps
                                                   from _spellPropertyValue in ps.DefaultIfEmpty()
                                                   where _spellPropertyValue.ContentId == _ruleSetItem.ContentId
                                                   select new
                                                   {
                                                       Id = _spellPropertyValue.SpellId,
                                                       ContentTypeId = _spellPropertyValue.ContentTypeId,
                                                       TypeId = _spellProperties.TypeId,
                                                       Name = _spellProperties.Name,
                                                       Description = _spellProperties.Description,
                                                       Value = _spellPropertyValue.value,
                                                       Units = rpgType.Units
                                                   }).ToList();

                    if (_ruleSetSpellProperties != null)
                    {

                        dtContents.Rows.Add("\"S\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"2\"", "\"Start\"");

                        foreach (var _ruleSetSpellPropertie in _ruleSetSpellProperties)
                        {
                            if (_ruleSetItem.ContentId.ToString() != null || _ruleSetItem.ContentId.ToString() != "")
                            {
                                ContentId = "\"" + _ruleSetItem.ContentId.ToString() + "\"";

                            }
                            else
                            {
                                ContentId = "";
                            }

                            if (_ruleSetSpellPropertie.ContentTypeId.ToString() != null || _ruleSetSpellPropertie.ContentTypeId.ToString() != "")
                            {
                                ContentTypeId = "\"" + _ruleSetSpellPropertie.ContentTypeId.ToString() + "\"";
                            }
                            else
                            {
                                ContentTypeId = "\"\"";
                            }



                            if (_ruleSetSpellPropertie.Value == null)
                            {
                                Value = "\"\"";
                            }
                            else
                            {
                                Value = "\"" + _ruleSetSpellPropertie.Value.ToString() + "\"";
                            }
                            dtContents.Rows.Add(RecordType, ContentId, ContentTypeId, Value);
                        }

                        dtContents.Rows.Add("\"S\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"2\"", "\"End\"");
                    }
                }

            }

            else if (Type == 1)
            {
                RecordType = "\"IP\"";
                foreach (var _ruleSetItem in _ruleSetContentsList)
                {
                    Items _ruleSetItemVM = new Items();
                    _ruleSetItemVM.ItemProperties = new List<ItemProperties>();
                    var _ruleSetItemProperties = (from _itemProperties in _context.RulesetContentTypes
                                                  join rpgType in _context.RPGSmithTypes on _itemProperties.TypeId equals rpgType.TypeID
                                                  join _itemPropertyValue in _context.Items on _itemProperties.Id equals _itemPropertyValue.ContentTypeId into ps
                                                  from _itemPropertyValue in ps.DefaultIfEmpty()
                                                  where _itemPropertyValue.ContentId == _ruleSetItem.ContentId
                                                  select new
                                                  {
                                                      Id = _itemPropertyValue.ItemId,
                                                      ContentTypeId = _itemPropertyValue.ContentTypeId,
                                                      TypeId = _itemProperties.TypeId,
                                                      Name = _itemProperties.Name,
                                                      Description = _itemProperties.Description,
                                                      Value = _itemPropertyValue.value,
                                                      Units = rpgType.Units
                                                  }).ToList();

                    if (_ruleSetItemProperties != null)
                    {
                        dtContents.Rows.Add("\"I\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"1\"", "\"Start\"");

                        foreach (var _ruleSetItemProperty in _ruleSetItemProperties)
                        {

                            if (_ruleSetItem.ContentId.ToString() != null || _ruleSetItem.ContentId.ToString() != "")
                            {
                                ContentId = "\"" + _ruleSetItem.ContentId.ToString() + "\"";
                            }
                            else
                            {
                                ContentId = "";
                            }

                            if (_ruleSetItemProperty.ContentTypeId.ToString() != null || _ruleSetItemProperty.ContentTypeId.ToString() != "")
                            {
                                ContentTypeId = "\"" + _ruleSetItemProperty.ContentTypeId.ToString() + "\"";

                            }
                            else
                            {
                                ContentTypeId = "\"\"";
                            }



                            if (_ruleSetItemProperty.Value == null)
                            {
                                Value = "\"\"";
                            }
                            else
                            {
                                Value = "\"" + _ruleSetItemProperty.Value.ToString() + "\"";
                            }

                            dtContents.Rows.Add(RecordType, ContentId, ContentTypeId, Value);

                        }

                        dtContents.Rows.Add("\"I\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"1\"", "\"End\"");
                     
                    }



                }

            }

            return dtContents;
        }
        public static string FormatCSV(string input)
        {
            try
            {
                string Find = "";
                string Replace = "";

                //Source = input;
                Find = "\"";
                Replace = "";

                input = ReplaceFirstOccurrence(input, Find, Replace);
                input = ReplaceLastOccurrence(input, Find, Replace);

                return input;
            }
            catch
            {
                throw;
            }
        }
        public static string ReplaceFirstOccurrence(string Source, string Find, string Replace)
        {
            int Place = Source.IndexOf(Find);
            string result = string.Empty;
            if (Place > -1)
            {
                result = Source.Remove(Place, Find.Length).Insert(Place, Replace);
            }
            else
            {
                result = Source;
            }
            return result;
        }
        public static string ReplaceLastOccurrence(string Source, string Find, string Replace)
        {
            int Place = Source.LastIndexOf(Find);
            string result = string.Empty;
            if (Place > -1)
            {
                result = Source.Remove(Place, Find.Length).Insert(Place, Replace);
            }
            else
            {
                result = Source;
            }
            return result;
        }
       
        public void saveRulesetContentData1(DataTable dtRuleset, DataTable dtCorestats, DataTable dtContents, DataTable dtItemSpells, int RulesetId)
        {
            try
            {

                if (dtCorestats.Rows.Count > 0)
                {
                    List<CoreStat> objCoreStatList = new List<CoreStat>();


                    for (int j = 0; j < dtCorestats.Rows.Count; j++)
                    {
                        CoreStat objCoreStat = new CoreStat();
                        objCoreStat.RulesetID = RulesetId;
                        objCoreStat.TypeId = Convert.ToInt32((dtCorestats.Rows[j]["TypeId"].ToString()));
                        objCoreStat.Name = dtCorestats.Rows[j]["Name"].ToString();
                        objCoreStat.Description = dtCorestats.Rows[j]["Description"].ToString();
                        objCoreStat.Metadata = dtCorestats.Rows[j]["Metadata"].ToString();

                        objCoreStatList.Add(objCoreStat);

                    }

                    foreach (var CoreStat in objCoreStatList)
                    {
                        _context.CoreStats.Add(CoreStat);
                    }

                    _context.SaveChanges();

                }

                if (dtContents.Rows.Count > 0)
                {
                    int NewItemContentId = 0;
                    int NewSpellContentId = 0;
                    int NewAbilityContentId = 0;

                    string ItemContentId = "";
                    string SpellContentId = "";
                    string AbilityContentId = "";


                    for (int j = 0; j < dtContents.Rows.Count; j++)
                    {
                        int value = 0;


                        if ((dtContents.Rows[j]["Type"].ToString()) == "A" || (dtContents.Rows[j]["Type"].ToString() == "AP"))
                        {
                            value = 3;
                        }
                        else if ((dtContents.Rows[j]["Type"].ToString()) == "S" || (dtContents.Rows[j]["Type"].ToString() == "SP"))
                        {
                            value = 2;
                        }
                        else if ((dtContents.Rows[j]["Type"].ToString()) == "I" || (dtContents.Rows[j]["Type"].ToString() == "IP"))
                        {
                            value = 1;
                        }

                        //int value = 5;
                        switch (value)
                        {
                            case 1:
                                if (((dtContents.Rows[j]["Type"].ToString()) == "I") && ((dtContents.Rows[j]["Value"].ToString()) == "Start"))
                                {
                                    if (NewItemContentId == 0)
                                    {
                                        RuleSetItemsContent objRuleSetItemsContent = new RuleSetItemsContent();
                                        objRuleSetItemsContent.RulesetID = RulesetId;
                                        objRuleSetItemsContent.Type = Convert.ToInt32((dtContents.Rows[j]["ContentTypeId"].ToString()));
                                        _context.RuleSetItemsContents.Add(objRuleSetItemsContent);
                                        _context.SaveChanges();

                                        NewItemContentId = objRuleSetItemsContent.ContentId;
                                        ItemContentId = (dtContents.Rows[j]["ContentId"].ToString());
                                        DataRow[] foundRows;
                                        string filter = "ItemId =" + ItemContentId;
                                        foundRows = dtItemSpells.Select(filter);

                                        foreach (DataRow dr in foundRows)
                                        {
                                            dtItemSpells.Rows[dr.Table.Rows.IndexOf(dr)]["NewItemId"] = NewItemContentId;
                                        }

                                    }
                                }
                                else if ((dtContents.Rows[j]["Type"].ToString() == "I") && (dtContents.Rows[j]["ContentId"].ToString() == ItemContentId) && (dtContents.Rows[j]["Value"].ToString() == "End"))
                                {
                                    NewItemContentId = 0;
                                    break;
                                }
                                else
                                {
                                    if ((dtContents.Rows[j]["Type"].ToString()) == "IP")
                                    {
                                        if (NewItemContentId != 0)
                                        {
                                            Item objItem = new Item();
                                            objItem.ContentId = NewItemContentId;
                                            objItem.ContentTypeId = Convert.ToInt32((dtContents.Rows[j]["ContentTypeId"].ToString()));
                                            objItem.value = (dtContents.Rows[j]["Value"].ToString());
                                            _context.Items.Add(objItem);
                                            _context.SaveChanges();


                                        }

                                    }

                                }

                                break;
                            case 2:

                                if (((dtContents.Rows[j]["Type"].ToString()) == "S") && ((dtContents.Rows[j]["Value"].ToString()) == "Start"))
                                {
                                    if (NewSpellContentId == 0)
                                    {
                                        RuleSetItemsContent objRuleSetItemsContent = new RuleSetItemsContent();
                                        objRuleSetItemsContent.RulesetID = RulesetId;
                                        objRuleSetItemsContent.Type = Convert.ToInt32((dtContents.Rows[j]["ContentTypeId"].ToString()));
                                        _context.RuleSetItemsContents.Add(objRuleSetItemsContent);
                                        _context.SaveChanges();

                                        NewSpellContentId = objRuleSetItemsContent.ContentId;
                                        SpellContentId = (dtContents.Rows[j]["ContentId"].ToString());

                                        DataRow[] foundRows;
                                        string filter = "SpellId =" + SpellContentId;
                                        foundRows = dtItemSpells.Select(filter);

                                        foreach (DataRow dr in foundRows)
                                        {
                                            dtItemSpells.Rows[dr.Table.Rows.IndexOf(dr)]["NewSpellId"] = NewSpellContentId;
                                        }

                                    }
                                }
                                else if ((dtContents.Rows[j]["Type"].ToString() == "S") && (dtContents.Rows[j]["ContentId"].ToString() == SpellContentId) && (dtContents.Rows[j]["Value"].ToString() == "End"))
                                {
                                    NewSpellContentId = 0;
                                    break;
                                }
                                else
                                {
                                    if ((dtContents.Rows[j]["Type"].ToString()) == "SP")
                                    {
                                        if (NewSpellContentId != 0)
                                        {
                                            Spell objSpell = new Spell();
                                            objSpell.ContentId = NewSpellContentId;
                                            objSpell.ContentTypeId = Convert.ToInt32((dtContents.Rows[j]["ContentTypeId"].ToString()));
                                            objSpell.value = (dtContents.Rows[j]["Value"].ToString());
                                            _context.Spells.Add(objSpell);
                                            _context.SaveChanges();



                                        }
                                    }
                                }

                                break;
                            case 3:

                                if (((dtContents.Rows[j]["Type"].ToString()) == "A") && ((dtContents.Rows[j]["Value"].ToString()) == "Start"))
                                {
                                    if (NewAbilityContentId == 0)
                                    {

                                        RuleSetItemsContent objRuleSetItemsContent = new RuleSetItemsContent();
                                        objRuleSetItemsContent.RulesetID = RulesetId;
                                        objRuleSetItemsContent.Type = Convert.ToInt32((dtContents.Rows[j]["ContentTypeId"].ToString()));
                                        _context.RuleSetItemsContents.Add(objRuleSetItemsContent);
                                        _context.SaveChanges();

                                        NewAbilityContentId = objRuleSetItemsContent.ContentId;
                                        AbilityContentId = (dtContents.Rows[j]["ContentId"].ToString());

                                    }
                                }
                                else if ((dtContents.Rows[j]["Type"].ToString() == "A") && (dtContents.Rows[j]["ContentId"].ToString() == AbilityContentId) && (dtContents.Rows[j]["Value"].ToString() == "End"))
                                {
                                    NewAbilityContentId = 0;
                                    break;
                                }
                                else
                                {
                                    if ((dtContents.Rows[j]["Type"].ToString()) == "AP")
                                    {
                                        if (NewAbilityContentId != 0)
                                        {
                                            Ability objAbility = new Ability();
                                            objAbility.ContentId = NewAbilityContentId;
                                            objAbility.ContentTypeId = Convert.ToInt32((dtContents.Rows[j]["ContentTypeId"].ToString()));
                                            objAbility.value = (dtContents.Rows[j]["Value"].ToString());
                                            _context.Abilities.Add(objAbility);
                                            _context.SaveChanges();
                                        }

                                    }

                                }

                                break;
                            default: /* Optional */

                                break;
                        }

                    }

                    if (dtItemSpells.Rows.Count > 0)
                    {
                        for (int j = 0; j < dtItemSpells.Rows.Count; j++)
                        {
                            if (dtItemSpells.Rows[j]["NewItemId"].ToString() != "" && dtItemSpells.Rows[j]["NewSpellId"].ToString() != "")
                            {
                                ItemSpell objItemSpell = new ItemSpell();
                                objItemSpell.ItemId = Convert.ToInt32((dtItemSpells.Rows[j]["NewItemId"].ToString()));
                                objItemSpell.SpellId = Convert.ToInt32((dtItemSpells.Rows[j]["NewSpellId"].ToString()));
                                _context.ItemSpells.Add(objItemSpell);
                                _context.SaveChanges();
                            }
                        }
                    }

                }
                else
                {
                    return;
                }



            }
            catch (Exception ex)
            {
                throw;
            }
        }
        public DataTable getItemSpellData(int _rulesertId, DataTable dtItemSpells)
        {
            try
            {
                dtItemSpells.Rows.Add("\"IS\"", "\"ItemId\"", "\"SpellId\"", "\"Start\"");

                var _itemSpellsList = (from _itemspells in _context.ItemSpells
                                       join _ruleSetItemsContents in _context.RuleSetItemsContents
                                       on _itemspells.ItemId equals _ruleSetItemsContents.ContentId
                                       where _ruleSetItemsContents.RulesetID == _rulesertId
                                       select new
                                       {
                                           ItemId = _itemspells.ItemId,
                                           SpellId = _itemspells.SpellId
                                       }).ToList();

                if (_itemSpellsList != null)
                {
                    foreach (var _itemSpells in _itemSpellsList)
                    {
                        dtItemSpells.Rows.Add("\"ISP\"", "\"" + _itemSpells.ItemId + "\"", "\"" + _itemSpells.SpellId + "\"", "\"\"");
                    }
                }

                dtItemSpells.Rows.Add("\"IS\"", "\"ItemId\"", "\"SpellId\"", "\"End\"");

            }
            catch (Exception ex)
            {
                throw ex;
            }

            return dtItemSpells;
        }
        public string ValidateFileName(string filename)
        {
            string ErrorMessage = "";
            try
            {
                if (filename != "")
                {
                 
                    var supportedTypes = new[] { "csv" };
                    var fileExt = System.IO.Path.GetExtension(filename).Substring(1);
                    if (supportedTypes.Contains(fileExt))
                    {
                        ErrorMessage = "";
                    }
                    else
                    {
                        ErrorMessage = "Please upload valid csv file";
                    }

                    return ErrorMessage;
                }
                else
                {
                    ErrorMessage = "Please upload valid csv file";
                }

            }
            catch (Exception ex)
            {
                return ex.Message;
            }
            return ErrorMessage;
        }

        //New
        public string saveRulesetContentData(string rulesetName, DataTable dtGeneralSetttings, DataTable dtCorestats, DataTable dtContents, DataTable dtItemSpells, DataTable dtCharacterProfile, DataTable dtCharacterISA, DataTable dtCharacterISAProperties, DataTable dtLayout, DataTable dtTab, DataTable dtTile, DataTable dtCounterTile, DataTable dtAttributeTile, DataTable dtLinkTile, DataTable dtExecuteTile, DataTable dtCommandTile, DataTable dtImageTile, string userId, out int FinalresultStatus, string storedFilePath)
        {
            string Erros = "";
            FinalresultStatus = 0;

            try
            {
                //int k = 0;

                int NewRulesetId = 0;

                RuleSet objRuleSet = new RuleSet();
                objRuleSet.Name = rulesetName;
                objRuleSet.UserId = userId;
                objRuleSet.Authored = DateTime.Now;

                _context.RuleSets.Add(objRuleSet);
                _context.SaveChanges();
                NewRulesetId = objRuleSet.RulesetID;
                string[] FilePaths = Directory.GetFiles(storedFilePath);

                if (dtGeneralSetttings.Rows.Count > 0)
                {
                    List<RulesetPropertyValue> objRulesetPropertyValueList = new List<RulesetPropertyValue>();
                    List<MemoryStream> list = new List<MemoryStream>();

                    for (int j = 0; j < dtGeneralSetttings.Rows.Count; j++)
                    {
                        RulesetPropertyValue objRulesetPropertyValue = new RulesetPropertyValue();
                        objRulesetPropertyValue.RulesetID = NewRulesetId;
                        objRulesetPropertyValue.PropertyId = Convert.ToInt32((dtGeneralSetttings.Rows[j]["PropertyId"].ToString()));

                        if (Convert.ToInt32((dtGeneralSetttings.Rows[j]["PropertyId"].ToString())) == 10)
                        {

                            foreach (var _filePath in FilePaths)
                            {
                                string FileName = Path.GetFileName(_filePath);
                                string FileExt = Path.GetExtension(FileName);
                                var ExactFileName = FileName.Replace(FileExt, "");
                                if (ExactFileName == dtGeneralSetttings.Rows[j]["Value"].ToString())
                                {
                                    var ExcatPath = _filePath.Replace(HttpContext.Current.Server.MapPath("/"), "/").Replace(@"\", "/");
                                    string RuleSetItemimagephysicalmappathsource = HttpContext.Current.Server.MapPath(ExcatPath);
                                    string virtualPathDest = "/wwwroot/images/RuleSetImages/" + rulesetName + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                    string RuleSetItemimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                    if (File.Exists(RuleSetItemimagephysicalmappathsource))
                                    {
                                        File.Copy(RuleSetItemimagephysicalmappathsource, RuleSetItemimagephysicalmappathdest);
                                    }

                                    CustomTypes objCustomTypeimg = new CustomTypes();
                                    objCustomTypeimg.Image = new Image();
                                    objCustomTypeimg.Image.image = virtualPathDest;

                                    string ConvertedXmlFormat = "";
                                    ConvertedXmlFormat = Utility.ConvertTypeValueClasstoXML(8, objCustomTypeimg, "").OuterXml;
                                    objRulesetPropertyValue.Value = ConvertedXmlFormat;
                                }
                            }
                        }
                        else
                        {
                            objRulesetPropertyValue.Value = dtGeneralSetttings.Rows[j]["Value"].ToString();
                        }


                        objRulesetPropertyValueList.Add(objRulesetPropertyValue);

                    }

                    foreach (var RulesetPropertyValue in objRulesetPropertyValueList)
                    {
                        _context.RulesetPropertyValues.Add(RulesetPropertyValue);
                    }

                    _context.SaveChanges();
                }

                if (dtCorestats.Rows.Count > 0)
                {
                    List<CoreStat> objCoreStatList = new List<CoreStat>();


                    for (int j = 0; j < dtCorestats.Rows.Count; j++)
                    {
                        CoreStat objCoreStat = new CoreStat();
                        objCoreStat.RulesetID = NewRulesetId;
                        objCoreStat.TypeId = Convert.ToInt32((dtCorestats.Rows[j]["TypeId"].ToString()));
                        objCoreStat.Name = dtCorestats.Rows[j]["Name"].ToString();
                        objCoreStat.Description = dtCorestats.Rows[j]["Description"].ToString();
                        objCoreStat.Metadata = dtCorestats.Rows[j]["Metadata"].ToString();

                        objCoreStatList.Add(objCoreStat);

                    }

                    foreach (var CoreStat in objCoreStatList)
                    {
                        _context.CoreStats.Add(CoreStat);
                    }

                    _context.SaveChanges();

                }

                if (dtContents.Rows.Count > 0)
                {

                    List<string> objTransactionsList = new List<string>();
                    objTransactionsList.Add("AP");
                    objTransactionsList.Add("SP");
                    objTransactionsList.Add("IP");
                    objTransactionsList.Add("ISP");

                    for (int M = 0; M < objTransactionsList.Count; M++)
                    {
                        int CaseId = 0;

                        if (objTransactionsList[M].ToString() == "IP")
                        {
                            CaseId = 1;
                        }
                        else if (objTransactionsList[M].ToString() == "SP")
                        {
                            CaseId = 2;
                        }
                        else if (objTransactionsList[M].ToString() == "AP")
                        {
                            CaseId = 3;
                        }
                        else if (objTransactionsList[M].ToString() == "ISP")
                        {
                            CaseId = 4;
                        }


                        string filter_Start = "";
                        DataView dv_Start;
                        DataTable dt_start;
                        string filter_Records = "";

                        switch (CaseId)
                        {
                            case 1:

                                filter_Start = "Type='I' and Value='Start'";

                                dv_Start = new DataView(dtContents);
                                dv_Start.RowFilter = filter_Start;
                                dt_start = dv_Start.ToTable();


                                for (int i = 0; i < dt_start.Rows.Count; i++)
                                {
                                    filter_Records = "Type='IP' and ContentId = " + dt_start.Rows[i]["ContentId"].ToString();

                                    DataView dv_Records = new DataView(dtContents);
                                    dv_Records.RowFilter = filter_Records;
                                    DataTable dt_Records = dv_Records.ToTable();

                                    RuleSetItemsContent objRuleSetItemsContent = new RuleSetItemsContent();
                                    objRuleSetItemsContent.RulesetID = NewRulesetId;
                                    objRuleSetItemsContent.Type = Convert.ToInt32(1);
                                    _context.RuleSetItemsContents.Add(objRuleSetItemsContent);
                                    _context.SaveChanges();

                                    int NewItemContentId = objRuleSetItemsContent.ContentId;


                                    // Saving New Item_ContentId for ItemSpell
                                    DataRow[] foundRows;
                                    string filter = "ItemId =" + dt_start.Rows[i]["ContentId"].ToString();
                                    foundRows = dtItemSpells.Select(filter);

                                    foreach (DataRow dr in foundRows)
                                    {
                                        dtItemSpells.Rows[dr.Table.Rows.IndexOf(dr)]["NewItemId"] = NewItemContentId;
                                    }

                                    var ItemName = string.Empty;
                                    for (int j = 0; j < dt_Records.Rows.Count; j++)
                                    {
                                        if (NewItemContentId != 0)
                                        {

                                            Item objItem = new Item();
                                            objItem.ContentId = NewItemContentId;
                                            objItem.ContentTypeId = Convert.ToInt32((dt_Records.Rows[j]["ContentTypeId"].ToString()));
                                            if (Convert.ToInt32((dt_Records.Rows[j]["ContentTypeId"].ToString())) == 1)
                                            {
                                                var ItemCustom = Utility.ConvertTypeValueXMLtoClass(1, (dt_Records.Rows[j]["Value"].ToString()), null);
                                                ItemName = ItemCustom.Text.value;
                                            }
                                            if (Convert.ToInt32((dt_Records.Rows[j]["ContentTypeId"].ToString())) == 2)
                                            {
                                                foreach (var _filePath in FilePaths)
                                                {
                                                    string FileName = Path.GetFileName(_filePath);
                                                    string FileExt = Path.GetExtension(FileName);
                                                    var ExactFileName = FileName.Replace(FileExt, "");
                                                    if (ExactFileName == (dt_Records.Rows[j]["Value"].ToString()))
                                                    {
                                                        var ExcatPath = _filePath.Replace(HttpContext.Current.Server.MapPath("/"), "/").Replace(@"\", "/");
                                                        string RuleSetItemimagephysicalmappathsource = HttpContext.Current.Server.MapPath(ExcatPath);
                                                        string virtualPathDest = "/wwwroot/images/RuleSetItemImages/" + ItemName + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                                        string RuleSetItemimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                                        if (File.Exists(RuleSetItemimagephysicalmappathsource))
                                                        {
                                                            File.Copy(RuleSetItemimagephysicalmappathsource, RuleSetItemimagephysicalmappathdest);
                                                        }

                                                        CustomTypes objCustomTypeimg = new CustomTypes();
                                                        objCustomTypeimg.Image = new Image();
                                                        objCustomTypeimg.Image.image = virtualPathDest;
                                                        var ConvertedXmlFormat = Utility.ConvertTypeValueClasstoXML(8, objCustomTypeimg, "").OuterXml;
                                                        objItem.value = ConvertedXmlFormat;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                objItem.value = dt_Records.Rows[j]["Value"].ToString();
                                            }


                                            _context.Items.Add(objItem);
                                        }
                                    }
                                    _context.SaveChanges();

                                }


                                break;
                            case 2:

                                filter_Start = "Type='S' and Value='Start'";

                                dv_Start = new DataView(dtContents);
                                dv_Start.RowFilter = filter_Start;
                                dt_start = dv_Start.ToTable();


                                for (int i = 0; i < dt_start.Rows.Count; i++)
                                {
                                    filter_Records = "Type='SP' and ContentId = " + dt_start.Rows[i]["ContentId"].ToString();

                                    DataView dv_Records = new DataView(dtContents);
                                    dv_Records.RowFilter = filter_Records;
                                    DataTable dt_Records = dv_Records.ToTable();

                                    RuleSetItemsContent objRuleSetItemsContent = new RuleSetItemsContent();
                                    objRuleSetItemsContent.RulesetID = NewRulesetId;
                                    objRuleSetItemsContent.Type = Convert.ToInt32(2);
                                    _context.RuleSetItemsContents.Add(objRuleSetItemsContent);
                                    _context.SaveChanges();

                                    int NewSpellContentId = objRuleSetItemsContent.ContentId;


                                    // Saving New Spell_ContentId for ItemSpell
                                    DataRow[] foundRows;
                                    string filter = "SpellId =" + dt_start.Rows[i]["ContentId"].ToString();
                                    foundRows = dtItemSpells.Select(filter);

                                    foreach (DataRow dr in foundRows)
                                    {
                                        dtItemSpells.Rows[dr.Table.Rows.IndexOf(dr)]["NewSpellId"] = NewSpellContentId;
                                    }


                                    var SpellName = string.Empty;
                                    for (int j = 0; j < dt_Records.Rows.Count; j++)
                                    {
                                        if (NewSpellContentId != 0)
                                        {

                                            Spell objSpell = new Spell();
                                            objSpell.ContentId = NewSpellContentId;
                                            objSpell.ContentTypeId = Convert.ToInt32((dt_Records.Rows[j]["ContentTypeId"].ToString()));
                                            if (Convert.ToInt32((dt_Records.Rows[j]["ContentTypeId"].ToString())) == 10)
                                            {
                                                var SpellCustom = Utility.ConvertTypeValueXMLtoClass(1, (dt_Records.Rows[j]["Value"].ToString()), null);
                                                SpellName = SpellCustom.Text.value;
                                            }
                                            if (Convert.ToInt32((dt_Records.Rows[j]["ContentTypeId"].ToString())) == 11)
                                            {
                                                foreach (var _filePath in FilePaths)
                                                {
                                                    string FileName = Path.GetFileName(_filePath);
                                                    string FileExt = Path.GetExtension(FileName);
                                                    var ExactFileName = FileName.Replace(FileExt, "");
                                                    if (ExactFileName == (dt_Records.Rows[j]["Value"].ToString()))
                                                    {
                                                        var ExcatPath = _filePath.Replace(HttpContext.Current.Server.MapPath("/"), "/").Replace(@"\", "/");
                                                        string RuleSetItemimagephysicalmappathsource = HttpContext.Current.Server.MapPath(ExcatPath);
                                                        string virtualPathDest = "/wwwroot/images/RuleSetSpellsImages/" + SpellName + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                                        string RuleSetItemimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                                        if (File.Exists(RuleSetItemimagephysicalmappathsource))
                                                        {
                                                            File.Copy(RuleSetItemimagephysicalmappathsource, RuleSetItemimagephysicalmappathdest);
                                                        }

                                                        CustomTypes objCustomTypeimg = new CustomTypes();
                                                        objCustomTypeimg.Image = new Image();
                                                        objCustomTypeimg.Image.image = virtualPathDest;
                                                        var ConvertedXmlFormat = Utility.ConvertTypeValueClasstoXML(8, objCustomTypeimg, "").OuterXml;
                                                        objSpell.value = ConvertedXmlFormat;
                                                    }

                                                }
                                            }
                                            else
                                            {
                                                objSpell.value = dt_Records.Rows[j]["Value"].ToString();
                                            }
                                            _context.Spells.Add(objSpell);

                                        }
                                    }
                                    _context.SaveChanges();

                                }

                                break;
                            case 3:

                                filter_Start = "Type='A' and Value='Start'";

                                dv_Start = new DataView(dtContents);
                                dv_Start.RowFilter = filter_Start;
                                dt_start = dv_Start.ToTable();

                                for (int i = 0; i < dt_start.Rows.Count; i++)
                                {
                                    filter_Records = "Type='AP' and ContentId = " + dt_start.Rows[i]["ContentId"].ToString();

                                    DataView dv_Records = new DataView(dtContents);
                                    dv_Records.RowFilter = filter_Records;
                                    DataTable dt_Records = dv_Records.ToTable();

                                    RuleSetItemsContent objRuleSetItemsContent = new RuleSetItemsContent();
                                    objRuleSetItemsContent.RulesetID = NewRulesetId;
                                    objRuleSetItemsContent.Type = Convert.ToInt32(3);
                                    _context.RuleSetItemsContents.Add(objRuleSetItemsContent);
                                    _context.SaveChanges();

                                    int NewAbilityContentId = objRuleSetItemsContent.ContentId;
                                    var AbilityName = string.Empty;
                                    for (int j = 0; j < dt_Records.Rows.Count; j++)
                                    {
                                        if (NewAbilityContentId != 0)
                                        {
                                            Ability objAbility = new Ability();
                                            objAbility.ContentId = NewAbilityContentId;
                                            objAbility.ContentTypeId = Convert.ToInt32((dt_Records.Rows[j]["ContentTypeId"].ToString()));
                                            if (Convert.ToInt32((dt_Records.Rows[j]["ContentTypeId"].ToString())) == 19)
                                            {
                                                var SpellCustom = Utility.ConvertTypeValueXMLtoClass(1, (dt_Records.Rows[j]["Value"].ToString()), null);
                                                AbilityName = SpellCustom.Text.value;
                                            }
                                            if (Convert.ToInt32((dt_Records.Rows[j]["ContentTypeId"].ToString())) == 20)
                                            {

                                                foreach (var _filePath in FilePaths)
                                                {
                                                    string FileName = Path.GetFileName(_filePath);
                                                    string FileExt = Path.GetExtension(FileName);
                                                    var ExactFileName = FileName.Replace(FileExt, "");
                                                    if (ExactFileName == (dt_Records.Rows[j]["Value"].ToString()))
                                                    {
                                                        var ExcatPath = _filePath.Replace(HttpContext.Current.Server.MapPath("/"), "/").Replace(@"\", "/");
                                                        string RuleSetItemimagephysicalmappathsource = HttpContext.Current.Server.MapPath(ExcatPath);
                                                        string virtualPathDest = "/wwwroot/images/RuleSetAbilitiesImages/" + AbilityName + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                                        string RuleSetItemimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                                        if (File.Exists(RuleSetItemimagephysicalmappathsource))
                                                        {
                                                            File.Copy(RuleSetItemimagephysicalmappathsource, RuleSetItemimagephysicalmappathdest);
                                                        }

                                                        CustomTypes objCustomTypeimg = new CustomTypes();
                                                        objCustomTypeimg.Image = new Image();
                                                        objCustomTypeimg.Image.image = virtualPathDest;
                                                        var ConvertedXmlFormat = Utility.ConvertTypeValueClasstoXML(8, objCustomTypeimg, "").OuterXml;
                                                        objAbility.value = ConvertedXmlFormat;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                objAbility.value = dt_Records.Rows[j]["Value"].ToString();
                                            }
                                            _context.Abilities.Add(objAbility);

                                        }
                                    }

                                    _context.SaveChanges();


                                }

                                break;

                            case 4:

                                if (dtItemSpells.Rows.Count > 0)
                                {
                                    for (int j = 0; j < dtItemSpells.Rows.Count; j++)
                                    {
                                        if (dtItemSpells.Rows[j]["NewItemId"].ToString() != "" && dtItemSpells.Rows[j]["NewSpellId"].ToString() != "")
                                        {
                                            ItemSpell objItemSpell = new ItemSpell();
                                            objItemSpell.ItemId = Convert.ToInt32((dtItemSpells.Rows[j]["NewItemId"].ToString()));
                                            objItemSpell.SpellId = Convert.ToInt32((dtItemSpells.Rows[j]["NewSpellId"].ToString()));
                                            _context.ItemSpells.Add(objItemSpell);
                                        }
                                    }

                                    _context.SaveChanges();
                                }


                                break;


                            default: /* Optional */

                                break;
                        }

                    }


                }

                // Charecter Begin :
                if (dtCharacterProfile.Rows.Count > 0)
                {
                    for (int M = 0; M < dtCharacterProfile.Rows.Count; M++)
                    {
                        string virtualPathDest = string.Empty;
                        CharacterProfile objCharacterProfile = new CharacterProfile();
                        objCharacterProfile.UserId = userId;
                        objCharacterProfile.CampaignId = 1;
                        Random rnd = new Random();
                        int rnd_Num = rnd.Next(1, 9);

                        objCharacterProfile.Name = dtCharacterProfile.Rows[M]["Name"].ToString() + "_ImportCopy" + rnd_Num;

                        if (dtCharacterProfile.Rows[M]["Portrait"].ToString() != null && dtCharacterProfile.Rows[M]["Portrait"].ToString() != "")
                        {
                            string characterimagephysicalmappathsource = HttpContext.Current.Server.MapPath(dtCharacterProfile.Rows[M]["Portrait"].ToString());

                            virtualPathDest = "/wwwroot/images/characters/" + objCharacterProfile.Name + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";

                            string characterimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);

                            if (File.Exists(characterimagephysicalmappathsource))
                            {
                                File.Copy(characterimagephysicalmappathsource, characterimagephysicalmappathdest);
                            }

                        }
                        objCharacterProfile.Portrait = virtualPathDest;
                        DateTime DT = DateTime.Now;
                        objCharacterProfile.Authored = DT;
                        objCharacterProfile.RulesetId = NewRulesetId;


                        _context.CharacterProfiles.Add(objCharacterProfile);
                        _context.SaveChanges();


                        // Copy New saved CharacterProfileId CharacterProfiles

                        dtCharacterProfile.Rows[M]["NewCharacterProfileId"] = objCharacterProfile.CharacterProfileId;

                        // string C_Name = ChangeName_for_duplicate(Convert.ToInt32(dtCharacterProfile.Rows[M]["RulesetId"].ToString()), dtCharacterProfile.Rows[M]["Name"].ToString());

                    }


                }

                if (dtCharacterISA.Rows.Count > 0)
                {
                    int NewCharacterProfileId = 0;

                    // Chareacter Items
                    DataView dvItem = new DataView(dtCharacterISA);

                    dvItem.RowFilter = "Type='CI'";
                    DataTable dtItem = new DataTable();
                    dtItem = dvItem.ToTable("dtItem");

                    for (int i = 0; i < dtItem.Rows.Count; i++)
                    {
                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows;
                        string filter = "CharacterProfileId =" + dtItem.Rows[i]["CharacterProfileId"].ToString();
                        foundRows = dtCharacterProfile.Select(filter);

                        NewCharacterProfileId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewCharacterProfileId = Convert.ToInt32(dr.ItemArray[5].ToString());
                        }


                        CharacterItem objCharacterItem = new CharacterItem();
                        objCharacterItem.CharacterProfileId = NewCharacterProfileId;
                        objCharacterItem.UserId = userId;
                        objCharacterItem.ContentId = 0;
                        DateTime DT = DateTime.Now;
                        objCharacterItem.Authored = DT;

                        _context.CharacterItems.Add(objCharacterItem);
                        _context.SaveChanges();

                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows1;
                        string filter1 = "CharacterProfileId =" + dtItem.Rows[i]["CharacterProfileId"].ToString();
                        foundRows1 = dtCharacterISA.Select(filter1);

                        foreach (DataRow dr in foundRows1)
                        {
                            dtCharacterISA.Rows[dr.Table.Rows.IndexOf(dr)]["NewCharacterItemId"] = objCharacterItem.CharacterItemId;
                        }


                        // Chareacter Items Propertys
                        DataView dvISAPropertys = new DataView(dtCharacterISAProperties);
                        dvISAPropertys.RowFilter = "Type='CIP' and CharacterItemId=" + dtItem.Rows[i]["CharacterItemId"].ToString();

                        DataTable dtISAPropertys = new DataTable();
                        dtISAPropertys = dvISAPropertys.ToTable("dtISAPropertys");

                        string ItemName = string.Empty;
                        for (int K = 0; K < dtISAPropertys.Rows.Count; K++)
                        {
                            CharacterItemProperty objCharacterItemProperty = new CharacterItemProperty();
                            objCharacterItemProperty.CharacterItemId = objCharacterItem.CharacterItemId;
                            objCharacterItemProperty.TypeId = Convert.ToInt32(dtISAPropertys.Rows[K]["TypeId"]);
                            if (Convert.ToInt32((dtISAPropertys.Rows[K]["TypeId"].ToString())) == 1 && (dtISAPropertys.Rows[K]["Name"].ToString() == "Name"))
                            {
                                var ItemCustom = Utility.ConvertTypeValueXMLtoClass(1, (dtISAPropertys.Rows[K]["Value"].ToString()), null);
                                ItemName = ItemCustom.Text.value;
                            }
                            if (Convert.ToInt32((dtISAPropertys.Rows[K]["TypeId"].ToString())) == 8)
                            {
                                foreach (var _filePath in FilePaths)
                                {
                                    string FileName = Path.GetFileName(_filePath);
                                    string FileExt = Path.GetExtension(FileName);
                                    var ExactFileName = FileName.Replace(FileExt, "");
                                    if (ExactFileName == (dtISAPropertys.Rows[K]["Value"].ToString()))
                                    {
                                        var ExcatPath = _filePath.Replace(HttpContext.Current.Server.MapPath("/"), "/").Replace(@"\", "/");
                                        string RuleSetItemimagephysicalmappathsource = HttpContext.Current.Server.MapPath(ExcatPath);
                                        string virtualPathDest = "/wwwroot/images/RuleSetItemImages/" + ItemName + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                        string RuleSetItemimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                        if (File.Exists(RuleSetItemimagephysicalmappathsource))
                                        {
                                            File.Copy(RuleSetItemimagephysicalmappathsource, RuleSetItemimagephysicalmappathdest);
                                        }

                                        CustomTypes objCustomTypeimg = new CustomTypes();
                                        objCustomTypeimg.Image = new Image();
                                        objCustomTypeimg.Image.image = virtualPathDest;
                                        var ConvertedXmlFormat = Utility.ConvertTypeValueClasstoXML(8, objCustomTypeimg, "").OuterXml;
                                        objCharacterItemProperty.Value = ConvertedXmlFormat;
                                    }
                                }
                            }
                            else
                            {
                                objCharacterItemProperty.Value = dtISAPropertys.Rows[K]["Value"].ToString();
                            }
                            _context.CharacterItemProperties.Add(objCharacterItemProperty);

                        }

                        _context.SaveChanges();

                    }


                    // Character Spells
                    DataView dvSpell = new DataView(dtCharacterISA);

                    dvSpell.RowFilter = "Type='CS'";
                    DataTable dtSpell = new DataTable();
                    dtSpell = dvSpell.ToTable("dtSpell");

                    for (int i = 0; i < dtSpell.Rows.Count; i++)
                    {
                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows;
                        string filter = "CharacterProfileId =" + dtSpell.Rows[i]["CharacterProfileId"].ToString();
                        foundRows = dtCharacterProfile.Select(filter);

                        NewCharacterProfileId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewCharacterProfileId = Convert.ToInt32(dr.ItemArray[5].ToString());
                        }

                        CharacterSpell objCharacterSpell = new CharacterSpell();
                        objCharacterSpell.CharacterProfileId = NewCharacterProfileId;
                        objCharacterSpell.UserId = userId;
                        objCharacterSpell.ContentId = 0;
                        DateTime DT = DateTime.Now;
                        objCharacterSpell.Authored = DT;
                        _context.CharacterSpells.Add(objCharacterSpell);
                        _context.SaveChanges();

                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows1;
                        string filter1 = "CharacterProfileId =" + dtSpell.Rows[i]["CharacterProfileId"].ToString();
                        foundRows1 = dtCharacterISA.Select(filter1);

                        foreach (DataRow dr in foundRows1)
                        {
                            dtCharacterISA.Rows[dr.Table.Rows.IndexOf(dr)]["NewCharacterItemId"] = objCharacterSpell.CharacterSpellId;
                        }



                        // Chareacter Spell Propertys
                        DataView dvISAPropertys = new DataView(dtCharacterISAProperties);
                        dvISAPropertys.RowFilter = "Type='CSP' and CharacterItemId=" + dtSpell.Rows[i]["CharacterItemId"].ToString();

                        DataTable dtISAPropertys = new DataTable();
                        dtISAPropertys = dvISAPropertys.ToTable("dtISAPropertys");

                        string SpellName = string.Empty;
                        for (int l = 0; l < dtISAPropertys.Rows.Count; l++)
                        {
                            CharacterSpellProperty objCharacterSpellProperty = new CharacterSpellProperty();
                            objCharacterSpellProperty.CharacterSpellId = objCharacterSpell.CharacterSpellId;
                            objCharacterSpellProperty.TypeId = Convert.ToInt32(dtISAPropertys.Rows[l]["TypeId"]);
                            if (Convert.ToInt32((dtISAPropertys.Rows[l]["TypeId"].ToString())) == 1 && (dtISAPropertys.Rows[l]["Name"].ToString() == "Name"))
                            {
                                var SpellCustom = Utility.ConvertTypeValueXMLtoClass(1, (dtISAPropertys.Rows[l]["Value"].ToString()), null);
                                SpellName = SpellCustom.Text.value;
                            }
                            if (Convert.ToInt32((dtISAPropertys.Rows[l]["TypeId"].ToString())) == 8)
                            {

                                foreach (var _filePath in FilePaths)
                                {
                                    string FileName = Path.GetFileName(_filePath);
                                    string FileExt = Path.GetExtension(FileName);
                                    var ExactFileName = FileName.Replace(FileExt, "");
                                    if (ExactFileName == (dtISAPropertys.Rows[l]["Value"].ToString()))
                                    {
                                        var ExcatPath = _filePath.Replace(HttpContext.Current.Server.MapPath("/"), "/").Replace(@"\", "/");
                                        string RuleSetItemimagephysicalmappathsource = HttpContext.Current.Server.MapPath(ExcatPath);
                                        string virtualPathDest = "/wwwroot/images/RuleSetSpellsImages/" + SpellName + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                        string RuleSetItemimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                        if (File.Exists(RuleSetItemimagephysicalmappathsource))
                                        {
                                            File.Copy(RuleSetItemimagephysicalmappathsource, RuleSetItemimagephysicalmappathdest);
                                        }

                                        CustomTypes objCustomTypeimg = new CustomTypes();
                                        objCustomTypeimg.Image = new Image();
                                        objCustomTypeimg.Image.image = virtualPathDest;
                                        var ConvertedXmlFormat = Utility.ConvertTypeValueClasstoXML(8, objCustomTypeimg, "").OuterXml;
                                        objCharacterSpellProperty.Value = ConvertedXmlFormat;
                                    }

                                }
                            }
                            else
                            {
                                objCharacterSpellProperty.Value = dtISAPropertys.Rows[l]["Value"].ToString();
                            }
                            _context.CharacterSpellProperties.Add(objCharacterSpellProperty);

                        }

                        _context.SaveChanges();


                    }

                    // Character Ability
                    DataView dvAbility = new DataView(dtCharacterISA);

                    dvAbility.RowFilter = "Type='CA'";
                    DataTable dtAbility = new DataTable();
                    dtAbility = dvAbility.ToTable("dtAbility");
                    string CharacterAbilityName = string.Empty;
                    for (int i = 0; i < dtAbility.Rows.Count; i++)
                    {
                        // Saving New Ability_ContentId for ItemSpell
                        DataRow[] foundRows;
                        string filter = "CharacterProfileId =" + dtAbility.Rows[i]["CharacterProfileId"].ToString();
                        foundRows = dtCharacterProfile.Select(filter);

                        NewCharacterProfileId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewCharacterProfileId = Convert.ToInt32(dr.ItemArray[5].ToString());
                        }


                        CharacterAbility objCharacterAbility = new CharacterAbility();
                        objCharacterAbility.CharacterProfileId = NewCharacterProfileId;
                        objCharacterAbility.UserId = userId;
                        objCharacterAbility.ContentId = 0;
                        DateTime DT = DateTime.Now;
                        objCharacterAbility.Authored = DT;
                        _context.CharacterAbilities.Add(objCharacterAbility);
                        _context.SaveChanges();


                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows1;
                        string filter1 = "CharacterProfileId =" + dtAbility.Rows[i]["CharacterProfileId"].ToString();
                        foundRows1 = dtCharacterISA.Select(filter1);

                        foreach (DataRow dr in foundRows1)
                        {
                            dtCharacterISA.Rows[dr.Table.Rows.IndexOf(dr)]["NewCharacterItemId"] = objCharacterAbility.CharacterAbilityId;
                        }



                        // Chareacter Ability Propertys
                        DataView dvISAPropertys = new DataView(dtCharacterISAProperties);
                        dvISAPropertys.RowFilter = "Type='CAP' and CharacterItemId=" + dtAbility.Rows[i]["CharacterItemId"].ToString();

                        DataTable dtISAPropertys = new DataTable();
                        dtISAPropertys = dvISAPropertys.ToTable("dtISAPropertys");


                        for (int j = 0; j < dtISAPropertys.Rows.Count; j++)
                        {

                            CharacterAbilityProperty objCharacterAbilityProperty = new CharacterAbilityProperty();
                            objCharacterAbilityProperty.CharacterAbilityId = objCharacterAbility.CharacterAbilityId;
                            objCharacterAbilityProperty.TypeId = Convert.ToInt32(dtISAPropertys.Rows[j]["TypeId"]);
                            if (Convert.ToInt32((dtISAPropertys.Rows[j]["TypeId"].ToString())) == 1 && (dtISAPropertys.Rows[j]["Name"].ToString() == "Name"))
                            {
                                var SpellCustom = Utility.ConvertTypeValueXMLtoClass(1, (dtISAPropertys.Rows[j]["Value"].ToString()), null);
                                CharacterAbilityName = SpellCustom.Text.value;
                            }
                            if (Convert.ToInt32((dtISAPropertys.Rows[j]["TypeId"].ToString())) == 8)
                            {

                                foreach (var _filePath in FilePaths)
                                {
                                    string FileName = Path.GetFileName(_filePath);
                                    string FileExt = Path.GetExtension(FileName);
                                    var ExactFileName = FileName.Replace(FileExt, "");
                                    if (ExactFileName == (dtISAPropertys.Rows[j]["Value"].ToString()))
                                    {
                                        var ExcatPath = _filePath.Replace(HttpContext.Current.Server.MapPath("/"), "/").Replace(@"\", "/");
                                        string RuleSetItemimagephysicalmappathsource = HttpContext.Current.Server.MapPath(ExcatPath);
                                        string virtualPathDest = "/wwwroot/images/RuleSetAbilitiesImages/" + CharacterAbilityName + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                        string RuleSetItemimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                        if (File.Exists(RuleSetItemimagephysicalmappathsource))
                                        {
                                            File.Copy(RuleSetItemimagephysicalmappathsource, RuleSetItemimagephysicalmappathdest);
                                        }

                                        CustomTypes objCustomTypeimg = new CustomTypes();
                                        objCustomTypeimg.Image = new Image();
                                        objCustomTypeimg.Image.image = virtualPathDest;
                                        var ConvertedXmlFormat = Utility.ConvertTypeValueClasstoXML(8, objCustomTypeimg, "").OuterXml;
                                        objCharacterAbilityProperty.Value = ConvertedXmlFormat;
                                    }
                                }
                            }
                            else
                            {
                                objCharacterAbilityProperty.Value = dtISAPropertys.Rows[j]["Value"].ToString();
                            }
                            _context.CharacterAbilityProperties.Add(objCharacterAbilityProperty);

                        }

                        _context.SaveChanges();
                    }


                }

                if (dtLayout.Rows.Count > 0)
                {

                    for (int i = 0; i < dtLayout.Rows.Count; i++)
                    {
                        // Saving New ExecuteTile 
                        DataRow[] foundRows;
                        string filter = "CharacterProfileId =" + dtLayout.Rows[i]["CharacterProfileId"].ToString();
                        foundRows = dtCharacterProfile.Select(filter);

                        int NewCharacterProfileId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewCharacterProfileId = Convert.ToInt32(dr.ItemArray[5].ToString());
                        }

                        Layout objLayout = new Layout();
                        objLayout.CharacterProfileId = NewCharacterProfileId;
                        objLayout.UserId = userId;
                        objLayout.LayoutName = dtLayout.Rows[i]["LayoutName"].ToString();
                        DateTime DT = DateTime.Now;
                        objLayout.Authored = DT;

                        _context.Layouts.Add(objLayout);

                        _context.SaveChanges();

                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows1;
                        string filter1 = "LayoutId =" + dtLayout.Rows[i]["LayoutId"].ToString();
                        foundRows1 = dtLayout.Select(filter1);

                        foreach (DataRow dr in foundRows1)
                        {
                            dtLayout.Rows[dr.Table.Rows.IndexOf(dr)]["NewLayoutId"] = objLayout.LayoutId;
                        }


                    }



                }

                if (dtTab.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTab.Rows.Count; i++)
                    {
                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows;
                        string filter = "LayoutId =" + dtTab.Rows[i]["LayoutId"].ToString();
                        foundRows = dtLayout.Select(filter);

                        int NewLayoutId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewLayoutId = Convert.ToInt32(dr.ItemArray[4].ToString());
                        }


                        Tab objTab = new Tab();
                        objTab.LayoutId = NewLayoutId;
                        objTab.UserId = userId;
                        objTab.TabName = dtTab.Rows[i]["TabName"].ToString();
                        DateTime DT = DateTime.Now;
                        objTab.Authored = DT;
                        objTab.TabOrder = 0;

                        _context.Tabs.Add(objTab);
                        _context.SaveChanges();


                        // Saving New TabId 
                        DataRow[] foundRows1;
                        string filter1 = "TabId =" + dtTab.Rows[i]["TabId"].ToString();
                        foundRows1 = dtTab.Select(filter1);

                        foreach (DataRow dr in foundRows1)
                        {
                            dtTab.Rows[dr.Table.Rows.IndexOf(dr)]["NewTabId"] = objTab.TabId;
                        }

                    }

                }
                if (dtTile.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTile.Rows.Count; i++)
                    {

                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows;
                        string filter = "TabId =" + dtTile.Rows[i]["TileContentId"].ToString();
                        foundRows = dtTab.Select(filter);

                        int NEWTabId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NEWTabId = Convert.ToInt32(dr.ItemArray[4].ToString());
                        }

                        Tile objTile = new Tile();
                        objTile.TileContentId = NEWTabId;
                        objTile.UserId = userId;
                        objTile.TileTypeId = Convert.ToInt32(dtTile.Rows[i]["TileTypeId"].ToString());
                        objTile.EntityId = Convert.ToInt32(dtTile.Rows[i]["EntityId"].ToString());
                        objTile.Style = dtTile.Rows[i]["Style"].ToString();
                        objTile.X = Convert.ToInt32(dtTile.Rows[i]["X"].ToString());
                        objTile.Y = Convert.ToInt32(dtTile.Rows[i]["Y"].ToString());
                        objTile.Width = Convert.ToInt32(dtTile.Rows[i]["Width"].ToString());
                        objTile.Height = Convert.ToInt32(dtTile.Rows[i]["Height"].ToString());
                        objTile.TileLocationId = Convert.ToInt32(dtTile.Rows[i]["TileLocationId"].ToString());
                        objTile.IsEditable = true;

                        //if(Convert.ToInt32(dtTile.Rows[i]["IsEditable"].ToString())==1)
                        //{
                        //    objTile.IsEditable = true;
                        //}
                        //else
                        //{
                        //    objTile.IsEditable = false;
                        //}


                        DateTime DT = DateTime.Now;
                        objTile.Authored = DT;

                        _context.Tiles.Add(objTile);

                    }

                    _context.SaveChanges();


                }
                if (dtCounterTile.Rows.Count > 0)
                {
                    for (int i = 0; i < dtCounterTile.Rows.Count; i++)
                    {

                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows;
                        string filter = "CharacterProfileId =" + dtCounterTile.Rows[i]["CharacterProfileId"].ToString();
                        foundRows = dtCharacterProfile.Select(filter);

                        int NewCharacterProfileId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewCharacterProfileId = Convert.ToInt32(dr.ItemArray[5].ToString());
                        }

                        CounterTile objCounterTile = new CounterTile();
                        objCounterTile.CharacterProfileId = NewCharacterProfileId;
                        objCounterTile.UserId = userId;
                        objCounterTile.Name = dtCounterTile.Rows[i]["Name"].ToString();
                        DateTime DT = DateTime.Now;
                        objCounterTile.Authored = DT;

                        if (dtCounterTile.Rows[i]["Value"].ToString() != "")
                        {
                            objCounterTile.Value = Convert.ToDecimal(dtCounterTile.Rows[i]["Value"].ToString());
                        }
                        else
                            objCounterTile.Value = 0;

                        if (dtCounterTile.Rows[i]["Min"].ToString() != "")
                        {
                            objCounterTile.Min = Convert.ToDecimal(dtCounterTile.Rows[i]["Min"].ToString());
                        }
                        else
                            objCounterTile.Min = 0;

                        if (dtCounterTile.Rows[i]["Max"].ToString() != "")
                        {
                            objCounterTile.Max = Convert.ToDecimal(dtCounterTile.Rows[i]["Max"].ToString());
                        }
                        else
                            objCounterTile.Max = 0;


                        // objCounterTile.Step = Convert.ToDecimal(dtCounterTile.Rows[i]["Step"].ToString());    // Need to add

                        _context.CounterTiles.Add(objCounterTile);

                    }

                    _context.SaveChanges();

                }
                if (dtAttributeTile.Rows.Count > 0)
                {
                    for (int i = 0; i < dtAttributeTile.Rows.Count; i++)
                    {
                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows;
                        string filter = "CharacterProfileId =" + dtAttributeTile.Rows[i]["CharacterProfileId"].ToString();
                        foundRows = dtCharacterProfile.Select(filter);

                        int NewCharacterProfileId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewCharacterProfileId = Convert.ToInt32(dr.ItemArray[5].ToString());
                        }

                        AttributeTile objAttributeTile = new AttributeTile();
                        objAttributeTile.CharacterProfileId = NewCharacterProfileId;
                        objAttributeTile.UserId = userId;
                        objAttributeTile.Name = dtAttributeTile.Rows[i]["Name"].ToString();
                        objAttributeTile.CorestatValue = dtAttributeTile.Rows[i]["CorestatValue"].ToString();

                        _context.AttributeTiles.Add(objAttributeTile);

                    }

                    _context.SaveChanges();


                }
                if (dtLinkTile.Rows.Count > 0)
                {

                    for (int i = 0; i < dtLinkTile.Rows.Count; i++)
                    {
                        // Saving New Spell_ContentId for ItemSpell
                        DataRow[] foundRows;
                        string filter = "CharacterProfileId =" + dtLinkTile.Rows[i]["CharacterProfileId"].ToString();
                        foundRows = dtCharacterProfile.Select(filter);

                        int NewCharacterProfileId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewCharacterProfileId = Convert.ToInt32(dr.ItemArray[5].ToString());
                        }


                        LinkTile objLinkTile = new LinkTile();
                        objLinkTile.CharacterProfileId = NewCharacterProfileId;
                        objLinkTile.UserId = userId;
                        objLinkTile.Name = dtLinkTile.Rows[i]["Name"].ToString();
                        objLinkTile.SelectedProperty = dtLinkTile.Rows[i]["SelectedProperty"].ToString();
                        objLinkTile.SelectedPropertyValue = dtLinkTile.Rows[i]["SelectedPropertyValue"].ToString();

                        _context.LinkTiles.Add(objLinkTile);
                        _context.SaveChanges();

                    }



                }
                if (dtExecuteTile.Rows.Count > 0)
                {
                    for (int i = 0; i < dtExecuteTile.Rows.Count; i++)
                    {
                        // Saving New ExecuteTile 
                        DataRow[] foundRows;
                        string filter = "CharacterProfileId =" + dtExecuteTile.Rows[i]["CharacterProfileId"].ToString();
                        foundRows = dtCharacterProfile.Select(filter);

                        int NewCharacterProfileId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewCharacterProfileId = Convert.ToInt32(dr.ItemArray[5].ToString());
                        }

                        ExecuteTile objExecuteTile = new ExecuteTile();
                        objExecuteTile.CharacterProfileId = NewCharacterProfileId;
                        objExecuteTile.UserId = userId;
                        objExecuteTile.Name = dtExecuteTile.Rows[i]["Name"].ToString();
                        objExecuteTile.SelectedProperty = dtExecuteTile.Rows[i]["SelectedProperty"].ToString();
                        objExecuteTile.SelectedPropertyValue = dtExecuteTile.Rows[i]["SelectedPropertyValue"].ToString();

                        _context.ExecuteTiles.Add(objExecuteTile);

                    }

                    _context.SaveChanges();


                }
                if (dtCommandTile.Rows.Count > 0)
                {
                    for (int i = 0; i < dtCommandTile.Rows.Count; i++)
                    {
                        // Saving New ExecuteTile 
                        DataRow[] foundRows;
                        string filter = "CharacterProfileId =" + dtCommandTile.Rows[i]["CharacterProfileId"].ToString();
                        foundRows = dtCharacterProfile.Select(filter);

                        int NewCharacterProfileId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewCharacterProfileId = Convert.ToInt32(dr.ItemArray[5].ToString());
                        }

                        CommandTile objCommandTile = new CommandTile();
                        objCommandTile.CharacterProfileId = NewCharacterProfileId;
                        objCommandTile.UserId = userId;
                        objCommandTile.Name = dtCommandTile.Rows[i]["Name"].ToString();
                        objCommandTile.Command = dtCommandTile.Rows[i]["Command"].ToString();
                        objCommandTile.CommandLastResult = dtCommandTile.Rows[i]["CommandLastResult"].ToString();

                        _context.CommandTiles.Add(objCommandTile);

                    }

                    _context.SaveChanges();

                }
                if (dtImageTile.Rows.Count > 0)
                {

                    for (int i = 0; i < dtImageTile.Rows.Count; i++)
                    {
                        // Saving New ExecuteTile 
                        DataRow[] foundRows;
                        string filter = "CharacterProfileId =" + dtImageTile.Rows[i]["CharacterProfileId"].ToString();
                        foundRows = dtCharacterProfile.Select(filter);

                        int NewCharacterProfileId = 0;
                        foreach (DataRow dr in foundRows)
                        {
                            NewCharacterProfileId = Convert.ToInt32(dr.ItemArray[5].ToString());
                        }

                        ImageTile objImageTile = new ImageTile();
                        objImageTile.CharacterProfileId = NewCharacterProfileId;
                        objImageTile.UserId = userId;
                        objImageTile.Name = dtCommandTile.Rows[i]["Name"].ToString();
                        objImageTile.ImagePath = dtCommandTile.Rows[i]["ImagePath"].ToString();
                        objImageTile.Description = dtCommandTile.Rows[i]["Description"].ToString();

                        _context.ImageTiles.Add(objImageTile);

                    }

                    _context.SaveChanges();
                }

                return Erros;
            }
            catch (Exception ex)
            {
                FinalresultStatus = 1;
                Erros = ex.Message;
                return Erros;
            }
        }

        
        public string verifyForDupliacte(string val, int caseId, int RuleSetId)
        {
            string Errors = "";

         
            return Errors;
        }
        public bool validateIsNumaric(string val)
        {
            bool Result = true;
            int n;
            bool isNumeric = int.TryParse(val, out n);
            if (isNumeric == false)
            {
                // Note: Is Not Numaric
                Result = false;
            }
            return Result;
        }
        public ServiceResponseModel Export(int RuleSetID, string userId)
        {
            StringBuilder sb = new StringBuilder();

            try
            {
                int Id = Convert.ToInt32(RuleSetID);

                if (RuleSetID > 0)
                {
                    // int RuleSetId = 5160;
                    int RuleSetId = Convert.ToInt32(RuleSetID);
                    Hashtable rulesetImages = new Hashtable();

                    DataTable dtRuleset = new DataTable();
                    dtRuleset.Columns.Add("Type", typeof(string));
                    dtRuleset.Columns.Add("RulesetId", typeof(string));
                    dtRuleset.Columns.Add("RulesetName", typeof(string));
                    dtRuleset.Columns.Add("UserName", typeof(string));
                    dtRuleset.Columns.Add("CreatedDate", typeof(string));

                    DataTable dtGenralsettings = new DataTable();
                    dtGenralsettings.Columns.Add("Type", typeof(string));
                    dtGenralsettings.Columns.Add("PropertyId", typeof(string));
                    dtGenralsettings.Columns.Add("Value", typeof(string));

                    DataTable dtCorestats = new DataTable();
                    dtCorestats.Columns.Add("Type", typeof(string));
                    dtCorestats.Columns.Add("TypeId", typeof(string));
                    dtCorestats.Columns.Add("Name", typeof(string));
                    dtCorestats.Columns.Add("Description", typeof(string));
                    dtCorestats.Columns.Add("Metadata", typeof(string));


                    DataTable dtContents = new DataTable();
                    dtContents.Columns.Add("Type", typeof(string));
                    dtContents.Columns.Add("ContentId", typeof(string));
                
                    dtContents.Columns.Add("ContentTypeId", typeof(string));
                    dtContents.Columns.Add("Value", typeof(string));
                
                    DataTable dtItemSpells = new DataTable();
                    dtItemSpells.Columns.Add("Type", typeof(string));
                    dtItemSpells.Columns.Add("ItemId", typeof(string));
                    dtItemSpells.Columns.Add("SpellId", typeof(string));
                    dtItemSpells.Columns.Add("Value", typeof(string));
                    dtItemSpells.Columns.Add("NewItemId", typeof(string));
                  
                    DataTable dtCharacterProfile = new DataTable();
                    dtCharacterProfile.Columns.Add("Type", typeof(string));
                    dtCharacterProfile.Columns.Add("CharacterProfileId", typeof(string));
                    dtCharacterProfile.Columns.Add("RulesetId", typeof(string));
                    dtCharacterProfile.Columns.Add("Name", typeof(string));
                    dtCharacterProfile.Columns.Add("Portrait", typeof(string));

                    DataTable dtCharacterISA = new DataTable();
                    dtCharacterISA.Columns.Add("Type", typeof(string));
                    dtCharacterISA.Columns.Add("CharacterItemId", typeof(string));
                    dtCharacterISA.Columns.Add("CharacterProfileId", typeof(string));


                    DataTable dtCharacterISAProperties = new DataTable();
                    dtCharacterISAProperties.Columns.Add("Type", typeof(string));
                    dtCharacterISAProperties.Columns.Add("CharacterItemId", typeof(string));
                    dtCharacterISAProperties.Columns.Add("TypeId", typeof(string));
                    dtCharacterISAProperties.Columns.Add("Value", typeof(string));
                    dtCharacterISAProperties.Columns.Add("Name", typeof(string));

                    DataTable dtLayout = new DataTable();
                    dtLayout.Columns.Add("Type", typeof(string));
                    dtLayout.Columns.Add("LayoutId", typeof(string));
                    dtLayout.Columns.Add("CharacterProfileId", typeof(string));
                    dtLayout.Columns.Add("LayoutName", typeof(string));

                    DataTable dtTab = new DataTable();
                    dtTab.Columns.Add("Type", typeof(string));
                    dtTab.Columns.Add("TabId", typeof(string));
                    dtTab.Columns.Add("LayoutId", typeof(string));
                    dtTab.Columns.Add("TabName", typeof(string));


                    DataTable dtTile = new DataTable();
                    dtTile.Columns.Add("Type", typeof(string));
                    dtTile.Columns.Add("TileId", typeof(string));
                    dtTile.Columns.Add("TileContentId", typeof(string));
                    dtTile.Columns.Add("TileTypeId", typeof(string));
                    dtTile.Columns.Add("EntityId", typeof(string));
                    dtTile.Columns.Add("Style", typeof(string));
                    dtTile.Columns.Add("X", typeof(string));
                    dtTile.Columns.Add("Y", typeof(string));
                    dtTile.Columns.Add("Width", typeof(string));
                    dtTile.Columns.Add("Height", typeof(string));
                    dtTile.Columns.Add("TileLocationId", typeof(string));


                    DataTable dtCounterTile = new DataTable();
                    dtCounterTile.Columns.Add("Type", typeof(string));
                    dtCounterTile.Columns.Add("CounterId", typeof(string));
                    dtCounterTile.Columns.Add("CharacterProfileId", typeof(string));
                    dtCounterTile.Columns.Add("Name", typeof(string));
                    dtCounterTile.Columns.Add("Value", typeof(string));
                    dtCounterTile.Columns.Add("Min", typeof(string));
                    dtCounterTile.Columns.Add("Max", typeof(string));
                    dtCounterTile.Columns.Add("Step", typeof(string));
                  
                    DataTable dtAttributeTile = new DataTable();
                    dtAttributeTile.Columns.Add("Type", typeof(string));
                    dtAttributeTile.Columns.Add("AttributeId", typeof(string));
                    dtAttributeTile.Columns.Add("CharacterProfileId", typeof(string));
                    dtAttributeTile.Columns.Add("Name", typeof(string));
                    dtAttributeTile.Columns.Add("CorestatValue", typeof(string));
                  
                    DataTable dtLinkTile = new DataTable();
                    dtLinkTile.Columns.Add("Type", typeof(string));
                    dtLinkTile.Columns.Add("LinkId", typeof(string));
                    dtLinkTile.Columns.Add("CharacterProfileId", typeof(string));
                    dtLinkTile.Columns.Add("Name", typeof(string));
                    dtLinkTile.Columns.Add("SelectedProperty", typeof(string));
                    dtLinkTile.Columns.Add("SelectedPropertyValue", typeof(string));
                 

                    DataTable dtExecuteTile = new DataTable();
                    dtExecuteTile.Columns.Add("Type", typeof(string));
                    dtExecuteTile.Columns.Add("ExecuteId", typeof(string));
                    dtExecuteTile.Columns.Add("CharacterProfileId", typeof(string));
                    dtExecuteTile.Columns.Add("Name", typeof(string));
                    dtExecuteTile.Columns.Add("SelectedProperty", typeof(string));
                    dtExecuteTile.Columns.Add("SelectedPropertyValue", typeof(string));
                    //ExecuteId CharacterProfileId Name SelectedProperty SelectedPropertyValue


                    DataTable dtCommandTile = new DataTable();
                    dtCommandTile.Columns.Add("Type", typeof(string));
                    dtCommandTile.Columns.Add("CommandId", typeof(string));
                    dtCommandTile.Columns.Add("CharacterProfileId", typeof(string));
                    dtCommandTile.Columns.Add("Name", typeof(string));
                    dtCommandTile.Columns.Add("Command", typeof(string));
                    dtCommandTile.Columns.Add("CommandLastResult", typeof(string));
                    //CommandId CharacterProfileId Name Command CommandLastResult


                    DataTable dtImageTile = new DataTable();
                    dtImageTile.Columns.Add("Type", typeof(string));
                    dtImageTile.Columns.Add("ImageId", typeof(string));
                    dtImageTile.Columns.Add("CharacterProfileId", typeof(string));
                    dtImageTile.Columns.Add("Name", typeof(string));
                    dtImageTile.Columns.Add("ImagePath", typeof(string));
                    //ImageId CharacterProfileId Name ImagePath



                    var _dataQueryRuleSet = _context.RuleSets.Where(p => p.RulesetID == RuleSetId).SingleOrDefault();
                
                    var userDetaisls = (from rulesetprop in _context.AspNetUsers
                                        where rulesetprop.Id == _dataQueryRuleSet.UserId
                                        select rulesetprop
                                           ).FirstOrDefault();

                    string RecordType = "\"R\"";
                    string RulesetIdNum = "\"" + RuleSetId + "\"";
                    string RulesetName = "\"" + _dataQueryRuleSet.Name + "\"";
                    string UserName = "\"" + userDetaisls.Name + "\"";
                    string CreatedDate = "\"" + DateTime.Now + "\"";


                    dtRuleset.Rows.Add(RecordType, RulesetIdNum, RulesetName, UserName, CreatedDate);

                    Hashtable clientImagesPath = new Hashtable();
                  
                    List<string> rulesetpropertyDeleteImage = new List<string>();



                    // Note:- General Settings
                 

                    var generalSettings = (from _RulesetPropertyValues in _context.RulesetPropertyValues
                                           join _RulesetProperties in _context.RulesetProperties on _RulesetPropertyValues.PropertyId equals _RulesetProperties.PropertyId
                                           where _RulesetPropertyValues.RulesetID == RuleSetId
                                           select new { _RulesetPropertyValues.Id, _RulesetPropertyValues.PropertyId, _RulesetPropertyValues.Value, _RulesetPropertyValues.RulesetID, _RulesetProperties.TypeId }).ToList();


                    if (generalSettings != null && generalSettings.Count > 0)
                    {

                        foreach (var _generalSetting in generalSettings)
                        {
                            string Value = "";
                            string PropertyId = "\"" + _generalSetting.PropertyId + "\"";
                            if (_generalSetting.TypeId == 8)
                            {
                                string ImageName = "RuleSetImage_" + (rulesetImages.Count + 1);
                                CustomTypes ImagePath = Utility.ConvertTypeValueXMLtoClass(8, _generalSetting.Value, "");
                                rulesetImages.Add(ImageName, ImagePath.Image.image);
                                Value = "\"" + ImageName + "\"";

                               
                            }
                            else
                            {
                                Value = "\"" + _generalSetting.Value + "\"";
                            }

                            dtGenralsettings.Rows.Add("\"G\"", PropertyId, Value);

                        }

                    }



                    // Note:- CoreStats
                    List<Corestats> corestats = new List<Corestats>();
                    var _dataQueryCoreStat = _context.CoreStats.Where(x => x.RulesetID == RuleSetId).ToList();
                    if (_dataQueryCoreStat != null && _dataQueryCoreStat.Count > 0)
                    {
                        foreach (var type in _dataQueryCoreStat.ToList())
                        {
                            string TypeId;
                            string Name;
                            string Description;
                            string Metadata;

                            Corestats stats = new Corestats();
                          
                            TypeId = "\"" + type.TypeId.ToString() + "\"";
                            Name = type.Name;
                            Description = type.Description;
                            Metadata = type.Metadata;

                            dtCorestats.Rows.Add("\"CO\"", "\"" + type.TypeId.ToString() + "\"", "\"" + type.Name + "\"", "\"" + type.Description + "\"", "\"" + type.Metadata + "\"");

                        }
                    }


                    var _ruleSetItems = _context.RuleSetItemsContents.Where(p => p.RulesetID == RuleSetId && p.Type == 1).ToList();
                    var _ruleSetSpells = _context.RuleSetItemsContents.Where(p => p.RulesetID == RuleSetId && p.Type == 2).ToList();
                    var _ruleSetAbilitys = _context.RuleSetItemsContents.Where(p => p.RulesetID == RuleSetId && p.Type == 3).ToList();

                    //Hashtable clientImagesPath2 = new Hashtable();

                    if (_ruleSetAbilitys != null && _ruleSetAbilitys.Count > 0)
                    {
                        dtContents = getRuleSetContentsData(dtContents, dtItemSpells, _ruleSetAbilitys, 3, ref rulesetImages);
                    }
                    if (_ruleSetSpells != null && _ruleSetSpells.Count > 0)
                    {
                        dtContents = getRuleSetContentsData(dtContents, dtItemSpells, _ruleSetSpells, 2, ref rulesetImages);
                    }
                    if (_ruleSetItems != null && _ruleSetItems.Count > 0)
                    {
                        dtContents = getRuleSetContentsData(dtContents, dtItemSpells, _ruleSetItems, 1, ref rulesetImages);

                    }

                    if (_ruleSetItems != null)
                    {
                        dtItemSpells = getItemSpellData(Convert.ToInt32(RuleSetID), dtItemSpells);
                    }



                    // Charecter Data Binding

                    var _CharacterProfileList = (from _CharacterProfiles in _context.CharacterProfiles
                                                 where _CharacterProfiles.RulesetId == RuleSetId
                                                 select _CharacterProfiles).ToList();

                    var _CharacterItemsList = (from _CharacterItems in _context.CharacterItems
                                               join _CharacterProfiles in _context.CharacterProfiles
                                               on _CharacterItems.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                               where _CharacterProfiles.RulesetId == RuleSetId
                                               select _CharacterItems).ToList();


                    var _CharacterItemsPropertysList = (from _CharacterItemProperties in _context.CharacterItemProperties
                                                        from _CharacterItems in _context.CharacterItems
                                                        .Where(mapping => mapping.CharacterItemId == _CharacterItemProperties.CharacterItemId)
                                                        join _CharacterProfiles in _context.CharacterProfiles
                                                        on _CharacterItems.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                        where _CharacterProfiles.RulesetId == RuleSetId
                                                        select _CharacterItemProperties).ToList();

                    var _CharacterSpellsList = (from _CharacterSpells in _context.CharacterSpells
                                                join _CharacterProfiles in _context.CharacterProfiles
                                                on _CharacterSpells.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                where _CharacterProfiles.RulesetId == RuleSetId
                                                select _CharacterSpells).ToList();



                    var _CharacterSpellsPropertysList = (from _CharacterSpellProperties in _context.CharacterSpellProperties
                                                         from _CharacterSpells in _context.CharacterSpells
                                                         .Where(mapping => mapping.CharacterSpellId == _CharacterSpellProperties.CharacterSpellId)
                                                         join _CharacterProfiles in _context.CharacterProfiles
                                                         on _CharacterSpells.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                         where _CharacterProfiles.RulesetId == RuleSetId
                                                         select _CharacterSpellProperties).ToList();


                    var _CharacterAbilityList = (from _CharacterAbilities in _context.CharacterAbilities
                                                 join _CharacterProfiles in _context.CharacterProfiles
                                                 on _CharacterAbilities.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                 where _CharacterProfiles.RulesetId == RuleSetId
                                                 select _CharacterAbilities).ToList();



                    var _CharacterAbilityPropertysList = (from _CharacterAbilityProperties in _context.CharacterAbilityProperties
                                                          from _CharacterAbilities in _context.CharacterAbilities
                                                          .Where(mapping => mapping.CharacterAbilityId == _CharacterAbilityProperties.CharacterAbilityId)
                                                          join _CharacterProfiles in _context.CharacterProfiles
                                                          on _CharacterAbilities.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                                          where _CharacterProfiles.RulesetId == RuleSetId
                                                          select _CharacterAbilityProperties).ToList();


                    var _LayoutList = (from _Layouts in _context.Layouts
                                       join _CharacterProfiles in _context.CharacterProfiles
                                       on _Layouts.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                       where _CharacterProfiles.RulesetId == RuleSetId
                                       select _Layouts).ToList();


                    var _TabList = (from _Tabs in _context.Tabs
                                    join _Layouts in _context.Layouts
                                    on _Tabs.LayoutId equals _Layouts.LayoutId
                                    join _CharacterProfiles in _context.CharacterProfiles
                                    on _Layouts.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                    where _CharacterProfiles.RulesetId == RuleSetId
                                    select _Tabs).ToList();

                    var _TileList = (from _Tiles in _context.Tiles
                                     join _Tabs in _context.Tabs on _Tiles.TileContentId equals _Tabs.TabId
                                     join _Layouts in _context.Layouts on _Tabs.LayoutId equals _Layouts.LayoutId
                                     join _CharacterProfiles in _context.CharacterProfiles
                                     on _Layouts.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                     where _CharacterProfiles.RulesetId == RuleSetId
                                     select _Tiles).ToList();


                    var _CounterTileList = (from _CounterTiles in _context.CounterTiles
                                            join _CharacterProfiles in _context.CharacterProfiles
                                            on _CounterTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                            where _CharacterProfiles.RulesetId == RuleSetId
                                            select _CounterTiles).ToList();

                    var _AttributeTilesList = (from _AttributeTiles in _context.AttributeTiles
                                               join _CharacterProfiles in _context.CharacterProfiles
                                                on _AttributeTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                               where _CharacterProfiles.RulesetId == RuleSetId
                                               select _AttributeTiles).ToList();

                    var _LinkTilesList = (from _LinkTiles in _context.LinkTiles
                                          join _CharacterProfiles in _context.CharacterProfiles
                                           on _LinkTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                          where _CharacterProfiles.RulesetId == RuleSetId
                                          select _LinkTiles).ToList();



                    var _ExecuteTilesList = (from _ExecuteTiles in _context.ExecuteTiles
                                             join _CharacterProfiles in _context.CharacterProfiles
                                              on _ExecuteTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                             where _CharacterProfiles.RulesetId == RuleSetId
                                             select _ExecuteTiles).ToList();


                    var _CommandTilesList = (from _CommandTiles in _context.CommandTiles
                                             join _CharacterProfiles in _context.CharacterProfiles
                                              on _CommandTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                             where _CharacterProfiles.RulesetId == RuleSetId
                                             select _CommandTiles).ToList();


                    var _ImageTilesList = (from _ImageTiles in _context.ImageTiles
                                           join _CharacterProfiles in _context.CharacterProfiles
                                            on _ImageTiles.CharacterProfileId equals _CharacterProfiles.CharacterProfileId
                                           where _CharacterProfiles.RulesetId == RuleSetId
                                           select _ImageTiles).ToList();


                    foreach (var _CharacterProfile in _CharacterProfileList)
                    {

                        dtCharacterProfile.Rows.Add("\"CP\"", "\"" + _CharacterProfile.CharacterProfileId.ToString() + "\"", "\"" + _CharacterProfile.RulesetId.ToString() + "\"", "\"" + _CharacterProfile.Name.ToString() + "\"", _CharacterProfile.Portrait);
                    }


                    // Character Items,Spells,Abilitys
                    foreach (var _CharacterItems in _CharacterItemsList)
                    {
                        dtCharacterISA.Rows.Add("\"CI\"", "\"" + _CharacterItems.CharacterItemId.ToString() + "\"", "\"" + _CharacterItems.CharacterProfileId.ToString() + "\"");
                    }

                    foreach (var _CharacterSpells in _CharacterSpellsList)
                    {
                        dtCharacterISA.Rows.Add("\"CS\"", "\"" + _CharacterSpells.CharacterSpellId.ToString() + "\"", "\"" + _CharacterSpells.CharacterProfileId.ToString() + "\"");
                    }

                    foreach (var _CharacterAbility in _CharacterAbilityList)
                    {
                        dtCharacterISA.Rows.Add("\"CA\"", "\"" + _CharacterAbility.CharacterAbilityId.ToString() + "\"", "\"" + _CharacterAbility.CharacterProfileId.ToString() + "\"");
                    }


                    // Character ISA Propertiys
                    foreach (var _CharacterItemsProperty in _CharacterItemsPropertysList)
                    {
                        string value = "";

                        if (_CharacterItemsProperty.TypeId == 8)
                        {
                            string ImageName = "RuleSetImage_" + (rulesetImages.Count + 1);
                            CustomTypes ImagePath = Utility.ConvertTypeValueXMLtoClass(8, _CharacterItemsProperty.Value, "");
                            rulesetImages.Add(ImageName, ImagePath.Image.image);

                            value = ImageName;
                        }
                        else
                        {
                            value = _CharacterItemsProperty.Value;
                        }

                        dtCharacterISAProperties.Rows.Add("\"CIP\"", "\"" + _CharacterItemsProperty.CharacterItemId.ToString() + "\"", "\"" + _CharacterItemsProperty.TypeId.ToString() + "\"", "\"" + value + "\"", "\"" + _CharacterItemsProperty.Name.ToString() + "\"");
                        


                    }

                    foreach (var _CharacterSpellsProperty in _CharacterSpellsPropertysList)
                    {
                        string value = "";
                        if (_CharacterSpellsProperty.TypeId == 8)
                        {
                            string ImageName = "RuleSetImage_" + (rulesetImages.Count + 1);
                            CustomTypes ImagePath = Utility.ConvertTypeValueXMLtoClass(8, _CharacterSpellsProperty.Value, "");
                            rulesetImages.Add(ImageName, ImagePath.Image.image);

                            value = ImageName;
                        }
                        else
                        {
                            value = _CharacterSpellsProperty.Value;
                        }

                        dtCharacterISAProperties.Rows.Add("\"CSP\"", "\"" + _CharacterSpellsProperty.CharacterSpellId.ToString() + "\"", "\"" + _CharacterSpellsProperty.TypeId.ToString() + "\"", "\"" + value + "\"", "\"" + _CharacterSpellsProperty.Name.ToString() + "\"");
                        

                    }

                    foreach (var _CharacterAbilityProperty in _CharacterAbilityPropertysList)
                    {

                        string value = "";
                        if (_CharacterAbilityProperty.TypeId == 8)
                        {
                            string ImageName = "RuleSetImage_" + (rulesetImages.Count + 1);
                            CustomTypes ImagePath = Utility.ConvertTypeValueXMLtoClass(8, _CharacterAbilityProperty.Value, "");
                            rulesetImages.Add(ImageName, ImagePath.Image.image);

                            value = ImageName;
                        }
                        else
                        {
                            value = _CharacterAbilityProperty.Value;
                        }


                        dtCharacterISAProperties.Rows.Add("\"CAP\"", "\"" + _CharacterAbilityProperty.CharacterAbilityId.ToString() + "\"", "\"" + _CharacterAbilityProperty.TypeId.ToString() + "\"", "\"" + value + "\"", "\"" + _CharacterAbilityProperty.Name.ToString() + "\"");
                        
                    }


                    // Character Layout 
                    foreach (var _Layout in _LayoutList)
                    {
                        dtLayout.Rows.Add("\"CL\"", "\"" + _Layout.LayoutId.ToString() + "\"", "\"" + _Layout.CharacterProfileId.ToString() + "\"", "\"" + _Layout.LayoutName.ToString() + "\"");

                    }

                    // Character Tab 
                    foreach (var _Tab in _TabList)
                    {
                        dtTab.Rows.Add("\"CTB\"", "\"" + _Tab.TabId.ToString() + "\"", "\"" + _Tab.LayoutId.ToString() + "\"", "\"" + _Tab.TabName.ToString() + "\"");
                    }

                    // Character Tile 
                    foreach (var _Tile in _TileList)
                    {
                        dtTile.Rows.Add("\"CT\"", "\"" + _Tile.TileId.ToString() + "\"", "\"" + _Tile.TileContentId.ToString() + "\"", "\"" + _Tile.TileTypeId.ToString() + "\"", "\"" + _Tile.EntityId.ToString() + "\"", "\"" + _Tile.Style.ToString() + "\"", "\"" + _Tile.X.ToString() + "\"", "\"" + _Tile.Y.ToString() + "\"", "\"" + _Tile.Width.ToString() + "\"", "\"" + _Tile.Height.ToString() + "\"", "\"" + _Tile.TileLocationId.ToString() + "\"");
                    }

                    // Counter Tile 
                    foreach (var _CounterTile in _CounterTileList)
                    {
                        dtCounterTile.Rows.Add("\"COT\"", "\"" + _CounterTile.CounterId.ToString() + "\"", "\"" + _CounterTile.CharacterProfileId.ToString() + "\"", "\"" + _CounterTile.Name.ToString() + "\"", "\"" + _CounterTile.Value.ToString() + "\"", "\"" + _CounterTile.Min.ToString() + "\"", "\"" + _CounterTile.Max.ToString() + "\"", "\"" + _CounterTile.Step.ToString() + "\"");
                    }

                    // Attribute Tiles 
                    foreach (var _AttributeTile in _AttributeTilesList)
                    {
                        dtAttributeTile.Rows.Add("\"CAT\"", "\"" + _AttributeTile.AttributeId.ToString() + "\"", "\"" + _AttributeTile.CharacterProfileId.ToString() + "\"", "\"" + _AttributeTile.Name.ToString() + "\"", "\"" + _AttributeTile.CorestatValue.ToString() + "\"");
                    }

                    // Link Tiles 
                    foreach (var _LinkTile in _LinkTilesList)
                    {

                        string ImageName = "RuleSetImage_" + (rulesetImages.Count + 1);

                        rulesetImages.Add(ImageName, _LinkTile.SelectedPropertyValue);

                        dtLinkTile.Rows.Add("\"CLT\"", "\"" + _LinkTile.LinkId.ToString() + "\"", "\"" + _LinkTile.CharacterProfileId.ToString() + "\"", "\"" + _LinkTile.Name.ToString() + "\"", "\"" + _LinkTile.SelectedProperty.ToString() + "\"", "\"" + ImageName + "\"");
                    }

                    // Execute Tiles
                    foreach (var _ExecuteTile in _ExecuteTilesList)
                    {
                        dtExecuteTile.Rows.Add("\"CET\"", "\"" + _ExecuteTile.ExecuteId.ToString() + "\"", "\"" + _ExecuteTile.CharacterProfileId.ToString() + "\"", "\"" + _ExecuteTile.Name.ToString() + "\"", "\"" + _ExecuteTile.SelectedProperty.ToString() + "\"", "\"" + _ExecuteTile.SelectedPropertyValue.ToString() + "\"");
                    }

                    // Command Tile
                    foreach (var _CommandTile in _CommandTilesList)
                    {
                        dtCommandTile.Rows.Add("\"CCT\"", "\"" + _CommandTile.CommandId.ToString() + "\"", "\"" + _CommandTile.CharacterProfileId.ToString() + "\"", "\"" + _CommandTile.Name.ToString() + "\"", "\"" + _CommandTile.Command.ToString() + "\"", "\"" + _CommandTile.CommandLastResult.ToString() + "\"");
                    }

                    // Image Tile
                    foreach (var _ImageTile in _ImageTilesList)
                    {
                        string ImageName = "RuleSetImage_" + (rulesetImages.Count + 1);
                        rulesetImages.Add(ImageName, _ImageTile.ImagePath != null ? _ImageTile.ImagePath : "");
                        dtImageTile.Rows.Add("\"CIM\"", "\"" + _ImageTile.ImageId.ToString() + "\"", "\"" + _ImageTile.CharacterProfileId.ToString() + "\"", "\"" + _ImageTile.Name.ToString() + "\"", "\"" + ImageName + "\"");

                    }


                    if (dtRuleset.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtRuleset.Rows)
                        {
                            foreach (DataColumn dc in dtRuleset.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }


                    if (dtGenralsettings.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtGenralsettings.Rows)
                        {
                            foreach (DataColumn dc in dtGenralsettings.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }


                    if (dtCorestats.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtCorestats.Rows)
                        {
                            foreach (DataColumn dc in dtCorestats.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }

                    }

                    if (dtContents.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dtContents.Rows)
                        {
                            foreach (DataColumn dc in dtContents.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }

                        if (dtItemSpells.Rows.Count > 0)
                        {
                            foreach (DataRow dr in dtItemSpells.Rows)
                            {
                                foreach (DataColumn dc in dtItemSpells.Columns)
                                    sb.Append(dr[dc.ColumnName].ToString() + ",");
                                sb.Remove(sb.Length - 1, 1);
                                sb.AppendLine();
                            }

                        }

                    }


                    // charecter Profile

                    if (dtCharacterProfile.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dtCharacterProfile.Rows)
                        {
                            foreach (DataColumn dc in dtCharacterProfile.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }

                    }
                    if (dtCharacterISA.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtCharacterISA.Rows)
                        {
                            foreach (DataColumn dc in dtCharacterISA.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }

                    }
                    if (dtCharacterISAProperties.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtCharacterISAProperties.Rows)
                        {
                            foreach (DataColumn dc in dtCharacterISAProperties.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }


                    if (dtLayout.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtLayout.Rows)
                        {
                            foreach (DataColumn dc in dtLayout.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }

                    if (dtTab.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtTab.Rows)
                        {
                            foreach (DataColumn dc in dtTab.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }

                    if (dtTile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtTile.Rows)
                        {
                            foreach (DataColumn dc in dtTile.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }

                    if (dtCounterTile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtCounterTile.Rows)
                        {
                            foreach (DataColumn dc in dtCounterTile.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }

                    if (dtAttributeTile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtAttributeTile.Rows)
                        {
                            foreach (DataColumn dc in dtAttributeTile.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }

                    if (dtLinkTile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtLinkTile.Rows)
                        {
                            foreach (DataColumn dc in dtLinkTile.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }

                    if (dtExecuteTile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtExecuteTile.Rows)
                        {
                            foreach (DataColumn dc in dtExecuteTile.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }

                    if (dtCommandTile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtCommandTile.Rows)
                        {
                            foreach (DataColumn dc in dtCommandTile.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }

                    if (dtImageTile.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtImageTile.Rows)
                        {
                            foreach (DataColumn dc in dtImageTile.Columns)
                                sb.Append(dr[dc.ColumnName].ToString() + ",");
                            sb.Remove(sb.Length - 1, 1);
                            sb.AppendLine();
                        }
                    }

                    //Image Save
                  
                    MemoryStream ms = new MemoryStream();

                    string UserRuleSetMappedFolderPath2 = "";
                    string UserRuleSetFolder = "";
                    Guid guid = Guid.NewGuid();

                    UserRuleSetFolder = "User_" + userId + guid.ToString();

                    string UserRuleSetMappedFolderPath = HttpContext.Current.Server.MapPath("/wwwroot/images/RuleSetExport/" + UserRuleSetFolder);
                   

                    DirectoryInfo dirInfo3 = new DirectoryInfo(UserRuleSetMappedFolderPath);

                    if (dirInfo3.Exists)
                    {
                        dirInfo3.Delete(true);
                    }

                    dirInfo3.Create();
                    List<string> FileNames = new List<string>();
                    StreamWriter file = new System.IO.StreamWriter(UserRuleSetMappedFolderPath + "/RuleSetDataExport.csv");
                    file.WriteLine(sb.ToString());
                    file.Close();

                 

                    var csvFilePath = UserRuleSetMappedFolderPath + "/RuleSetDataExport.csv";
                    FileNames.Add(csvFilePath);
                    foreach (DictionaryEntry _rulesetImages in rulesetImages)
                    {
                        if (File.Exists(HttpContext.Current.Server.MapPath(_rulesetImages.Value.ToString())))
                        {
                            FileNames.Add(UserRuleSetMappedFolderPath + "/" + _rulesetImages.Key.ToString() + Path.GetExtension(_rulesetImages.Value.ToString()));
                            File.Copy(HttpContext.Current.Server.MapPath(_rulesetImages.Value.ToString()), UserRuleSetMappedFolderPath + "/" + _rulesetImages.Key.ToString() + Path.GetExtension(_rulesetImages.Value.ToString()));
                        }
                    }

                    UserRuleSetMappedFolderPath2 = Path.Combine(HttpContext.Current.Server.MapPath("/wwwroot/images/RuleSetExport/"), UserRuleSetFolder + ".zip");

                    using (ZipFile zip = new ZipFile())
                    {
                        zip.AlternateEncodingUsage = ZipOption.AsNecessary;
                        zip.AddDirectoryByName("RuleSet_" + _dataQueryRuleSet.Name);
                   
                        foreach (var filename in FileNames)
                        {
                            zip.AddFile(filename, "RuleSet_" + _dataQueryRuleSet.Name);

                        }
                        HttpContext.Current.Response.Clear();
                        HttpContext.Current.Response.BufferOutput = false;
                        string zipName = String.Format("RuleSet_" + _dataQueryRuleSet.Name + "{0}.zip", Guid.NewGuid());
                        HttpContext.Current.Response.ContentType = "application/zip";
                        HttpContext.Current.Response.AddHeader("content-disposition", "attachment; filename=" + zipName);
                        zip.Save(HttpContext.Current.Response.OutputStream);
                        HttpContext.Current.Response.End();
                    }

                    //  }

                    string Path2 = HttpContext.Current.Server.MapPath("/wwwroot/images/RuleSetExport/") + UserRuleSetFolder + ".zip";
                    _serviceResponseModel.Result = Path2;  // UserRuleSetMappedFolderPath2;
                    _serviceResponseModel.StatusCode = 200;

                }
                else
                {

                }

            }
            catch (Exception ex)
            {

                _serviceResponseModel.ErrorMessage = "Invalid data ";
                _serviceResponseModel.StatusCode = 400;

            }


            return _serviceResponseModel;


        }
        

        public DataTable getRuleSetContentsData(DataTable dtContents, DataTable dtItemSpells, List<Data.Models.RuleSetItemsContent> _ruleSetContentsList, int Type, ref Hashtable rulesetImages)
        {
            string RecordType = "";
            string ContentId = "";
            string ContentTypeId = "";
            string Value = "";



            List<string> rulesetpropertyDeleteImage = new List<string>();

            if (Type == 3)
            {
                //  RecordType = "\"AP\"";
                RecordType = "AP";


                foreach (var _ruleSetItem in _ruleSetContentsList)
                {
                    var _ruleSetAbilityProperties = (from _abilityProperties in _context.RulesetContentTypes
                                                     join rpgType in _context.RPGSmithTypes on _abilityProperties.TypeId equals rpgType.TypeID
                                                     join _abilityPropertyValue in _context.Abilities on _abilityProperties.Id equals _abilityPropertyValue.ContentTypeId into ps
                                                     from _abilityPropertyValue in ps.DefaultIfEmpty()
                                                     where _abilityPropertyValue.ContentId == _ruleSetItem.ContentId
                                                     select new
                                                     {
                                                         Id = _abilityPropertyValue.AbilityId,
                                                         ContentTypeId = _abilityPropertyValue.ContentTypeId,
                                                         TypeId = _abilityProperties.TypeId,
                                                         Name = _abilityProperties.Name,
                                                         Description = _abilityProperties.Description,
                                                         Value = _abilityPropertyValue.value,
                                                         Units = rpgType.Units
                                                     }).ToList();

                    if (_ruleSetAbilityProperties != null)
                    {
                        dtContents.Rows.Add("\"A\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"3\"", "\"Start\"");

                        foreach (var _ruleSetAbilityProperty in _ruleSetAbilityProperties)
                        {
                            if (_ruleSetItem.ContentId.ToString() != null || _ruleSetItem.ContentId.ToString() != "")
                            {
                                ContentId = "\"" + _ruleSetItem.ContentId.ToString() + "\"";
                            }
                            else
                            {
                                ContentId = "";
                            }

                            if (_ruleSetAbilityProperty.ContentTypeId.ToString() != null || _ruleSetAbilityProperty.ContentTypeId.ToString() != "")
                            {
                                ContentTypeId = "\"" + _ruleSetAbilityProperty.ContentTypeId.ToString() + "\"";
                             
                            }
                            else
                            {
                                ContentTypeId = "\"\"";
                              
                            }

                            if (_ruleSetAbilityProperty.Value == null)
                            {
                                Value = "\"\"";
                              
                            }
                            else
                            {
                                Value = "\"" + _ruleSetAbilityProperty.Value.ToString() + "\"";
                                
                            }


                            if (_ruleSetAbilityProperty.TypeId == 8)
                            {

                                string ImageName = "RuleSetImage_" + (rulesetImages.Count + 1);
                                CustomTypes ImagePath = Utility.ConvertTypeValueXMLtoClass(8, _ruleSetAbilityProperty.Value, "");
                                rulesetImages.Add(ImageName, ImagePath.Image.image);

                                Value = "\"" + ImageName + "\"";

                            }

                            dtContents.Rows.Add(RecordType, ContentId, ContentTypeId, Value);
                        }

                        dtContents.Rows.Add("\"A\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"3\"", "\"End\"");
                    }

                }
            }
            else if (Type == 2)
            {
                RecordType = "\"SP\"";

                foreach (var _ruleSetItem in _ruleSetContentsList)
                {
                    Items _ruleSetItemVM = new Items();
                    _ruleSetItemVM.ItemProperties = new List<ItemProperties>();
                    var _ruleSetSpellProperties = (from _spellProperties in _context.RulesetContentTypes
                                                   join rpgType in _context.RPGSmithTypes on _spellProperties.TypeId equals rpgType.TypeID
                                                   join _spellPropertyValue in _context.Spells on _spellProperties.Id equals _spellPropertyValue.ContentTypeId into ps
                                                   from _spellPropertyValue in ps.DefaultIfEmpty()
                                                   where _spellPropertyValue.ContentId == _ruleSetItem.ContentId
                                                   select new
                                                   {
                                                       Id = _spellPropertyValue.SpellId,
                                                       ContentTypeId = _spellPropertyValue.ContentTypeId,
                                                       TypeId = _spellProperties.TypeId,
                                                       Name = _spellProperties.Name,
                                                       Description = _spellProperties.Description,
                                                       Value = _spellPropertyValue.value,
                                                       Units = rpgType.Units
                                                   }).ToList();

                    if (_ruleSetSpellProperties != null)
                    {

                        dtContents.Rows.Add("\"S\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"2\"", "\"Start\"");

                        foreach (var _ruleSetSpellProperty in _ruleSetSpellProperties)
                        {
                            if (_ruleSetItem.ContentId.ToString() != null || _ruleSetItem.ContentId.ToString() != "")
                            {
                                ContentId = "\"" + _ruleSetItem.ContentId.ToString() + "\"";

                            }
                            else
                            {
                                ContentId = "";
                            }

                            if (_ruleSetSpellProperty.ContentTypeId.ToString() != null || _ruleSetSpellProperty.ContentTypeId.ToString() != "")
                            {
                                ContentTypeId = "\"" + _ruleSetSpellProperty.ContentTypeId.ToString() + "\"";
                            }
                            else
                            {
                                ContentTypeId = "\"\"";
                            }



                            if (_ruleSetSpellProperty.Value == null)
                            {
                                Value = "\"\"";
                            }
                            else
                            {
                                if (_ruleSetSpellProperty.TypeId == 8)
                                {

                                    string ImageName = "RuleSetImage_" + (rulesetImages.Count + 1);
                                    CustomTypes ImagePath = Utility.ConvertTypeValueXMLtoClass(8, _ruleSetSpellProperty.Value, "");
                                    rulesetImages.Add(ImageName, ImagePath.Image.image);

                                    Value = "\"" + ImageName + "\"";
                                }
                                else
                                {
                                    Value = "\"" + _ruleSetSpellProperty.Value.ToString() + "\"";
                                }
                            }


                            dtContents.Rows.Add(RecordType, ContentId, ContentTypeId, Value);
                        }

                        dtContents.Rows.Add("\"S\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"2\"", "\"End\"");
                    }
                }

            }

            else if (Type == 1)
            {
                RecordType = "\"IP\"";
                foreach (var _ruleSetItem in _ruleSetContentsList)
                {
                    Items _ruleSetItemVM = new Items();
                    _ruleSetItemVM.ItemProperties = new List<ItemProperties>();
                    var _ruleSetItemProperties = (from _itemProperties in _context.RulesetContentTypes
                                                  join rpgType in _context.RPGSmithTypes on _itemProperties.TypeId equals rpgType.TypeID
                                                  join _itemPropertyValue in _context.Items on _itemProperties.Id equals _itemPropertyValue.ContentTypeId into ps
                                                  from _itemPropertyValue in ps.DefaultIfEmpty()
                                                  where _itemPropertyValue.ContentId == _ruleSetItem.ContentId
                                                  select new
                                                  {
                                                      Id = _itemPropertyValue.ItemId,
                                                      ContentTypeId = _itemPropertyValue.ContentTypeId,
                                                      TypeId = _itemProperties.TypeId,
                                                      Name = _itemProperties.Name,
                                                      Description = _itemProperties.Description,
                                                      Value = _itemPropertyValue.value,
                                                      Units = rpgType.Units
                                                  }).ToList();

                    if (_ruleSetItemProperties != null)
                    {
                        dtContents.Rows.Add("\"I\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"1\"", "\"Start\"");

                        foreach (var _ruleSetItemProperty in _ruleSetItemProperties)
                        {

                            if (_ruleSetItem.ContentId.ToString() != null || _ruleSetItem.ContentId.ToString() != "")
                            {
                                ContentId = "\"" + _ruleSetItem.ContentId.ToString() + "\"";
                            }
                            else
                            {
                                ContentId = "";
                            }

                            if (_ruleSetItemProperty.ContentTypeId.ToString() != null || _ruleSetItemProperty.ContentTypeId.ToString() != "")
                            {
                                ContentTypeId = "\"" + _ruleSetItemProperty.ContentTypeId.ToString() + "\"";

                            }
                            else
                            {
                                ContentTypeId = "\"\"";
                            }



                            if (_ruleSetItemProperty.Value == null)
                            {
                                Value = "\"\"";
                            }
                            else
                            {
                                if (_ruleSetItemProperty.TypeId == 8)
                                {

                                    string ImageName = "RuleSetImage_" + (rulesetImages.Count + 1);
                                    CustomTypes ImagePath = Utility.ConvertTypeValueXMLtoClass(8, _ruleSetItemProperty.Value, "");
                                    rulesetImages.Add(ImageName, ImagePath.Image.image);

                                    Value = "\"" + ImageName + "\"";
                                }
                                else
                                {
                                    Value = "\"" + _ruleSetItemProperty.Value.ToString() + "\"";
                                }
                            }

                            dtContents.Rows.Add(RecordType, ContentId, ContentTypeId, Value);

                        }

                        dtContents.Rows.Add("\"I\"", "\"" + _ruleSetItem.ContentId.ToString() + "\"", "\"1\"", "\"End\"");
                    
                    }



                }

            }

            return dtContents;
        }


        #endregion
        #region Ruleset
        public List<RuleSetViewModel> GetRulesetsByUserId(string UserId)
        {
            List<RuleSetViewModel> _rulesetViewModel = new List<RuleSetViewModel>();

            List<RuleSetProperty> _rulesetProperty = new List<RuleSetProperty>();
            var rulesets = _context.RuleSets.Where(x => x.UserId == UserId).ToList();
            foreach (var _ruleset in rulesets)
            {
                _rulesetViewModel.Add(new RuleSetViewModel()
                {
                    Id = _ruleset.RulesetID,
                    Name = _ruleset.Name,
                    UserId = _ruleset.UserId,
                    Rulesetproperty = GetRulesetGeneralSettingsByRulesetId(_ruleset.RulesetID)
                });
            }
            return _rulesetViewModel;
          
        }
        public ServiceResponseModel CopyRulesetByRulesetId(int RulesetId, string UserId, string Name)
        {
            int NewRulesetId = 0;
            var GeneralSettings = GetRulesetGeneralSettingsByRulesetId(RulesetId);
            if (GeneralSettings != null)
            {
                GeneralSettings[0].RulesetName = Name;
                var CopySettings = CreateRulesetGeneralSettings(GeneralSettings, null, UserId);
                if (CopySettings.Result != null)
                {
                    var id = _context.RuleSets.Where(x => x.Name == Name).FirstOrDefault();
                    NewRulesetId = id.RulesetID;
                }
            }



            var Corestats = GetCorestatsByRulesetId(RulesetId);
            foreach (var rulesetid in Corestats)
            {
                rulesetid.RulesetId = NewRulesetId;
            }
            if (Corestats.Count > 0)
            {
                var CopyCorestats = CreateCorestats(Corestats, UserId);
            }

            var items = GetRulesetItemsByRulesetId(RulesetId);
            foreach (var rulesetid in items)
            {
                rulesetid.RulesetId = NewRulesetId;
            }
            if (items.Count > 0)
            {
                var CopyItems = CopyRulesetItems(items, null, UserId);
            }

            var spells = GetRulesetSpellsByRulesetId(RulesetId);
            foreach (var rulesetid in spells)
            {
                rulesetid.RulesetId = NewRulesetId;
            }
            if (spells.Count > 0)
            {
                var CopySpells = CopyRulesetSpells(spells, null, UserId);
            }

            var abilities = GetRulesetAbilitiesByRulesetId(RulesetId);
            foreach (var rulesetid in abilities)
            {
                rulesetid.RulesetID = NewRulesetId;
            }
            if (abilities.Count > 0)

            {
                var CopyAbilities = CopyRulesetAbilities(abilities, null, UserId);
            }
            _serviceResponseModel.Result = "Ruleset Copied Successfully";
            return _serviceResponseModel;
        }
        public ServiceResponseModel DeleteRuleSetByRulesetId(int? RuleSetID, string userId)
        {
            try
            {
                RuleSetViewModel ruleSetModel = new RuleSetViewModel();
                ruleSetModel.Id = Convert.ToInt32(RuleSetID);
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";
                    Errors = ValidationForDeleteRuleset(ruleSetModel, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        //Deleting  Ruleset Relationship  tables data
                        var CoreStatlst = _context.CoreStats.Where(r => r.RulesetID == RuleSetID).ToList();
                        foreach (var _corestats in CoreStatlst)
                        {
                            _context.CoreStats.Remove(_corestats);
                            _context.SaveChanges();
                        }
                        var RuleSetItemsContentlst = _context.RuleSetItemsContents.Where(r => r.RulesetID == RuleSetID).ToList();
                        foreach (var _ruleSetItemsContent in RuleSetItemsContentlst)
                        {
                            var Itemlst = _context.Items.Where(r => r.ContentId == _ruleSetItemsContent.ContentId).ToList();

                            foreach (var _item in Itemlst)
                            {

                                //Deleting the Associated Spells in the Items.

                                _context.ItemSpells.RemoveRange(_context.ItemSpells.Where(x => x.ItemId == _item.ItemId));
                                _context.SaveChanges();

                                _context.ItemAbilities.RemoveRange(_context.ItemAbilities.Where(x => x.ItemId == _item.ItemId));
                                _context.SaveChanges();

                                _context.Items.Remove(_item);
                                _context.SaveChanges();
                            }
                            var Spellslst = _context.Spells.Where(r => r.ContentId == _ruleSetItemsContent.ContentId).ToList();
                            foreach (var _spells in Spellslst)
                            {
                                _context.Spells.Remove(_spells);
                                _context.SaveChanges();
                            }
                            var Abilitylst = _context.Abilities.Where(r => r.ContentId == _ruleSetItemsContent.ContentId).ToList();
                            foreach (var _ability in Abilitylst)
                            {
                                _context.Abilities.Remove(_ability);
                                _context.SaveChanges();
                            }
                            _context.RuleSetItemsContents.Remove(_ruleSetItemsContent);
                            _context.SaveChanges();
                        }
                        var RulesetPropertyValuelst = _context.RulesetPropertyValues.Where(r => r.RulesetID == RuleSetID).ToList();
                        foreach (var _rulePropertyvalue in RulesetPropertyValuelst)
                        {
                            _context.RulesetPropertyValues.Remove(_rulePropertyvalue);
                            _context.SaveChanges();
                        }
                        //Deleting RuleSet 
                        var deleteruleset = _context.RuleSets.Where(r => r.RulesetID == RuleSetID).FirstOrDefault();
                        var message = string.Empty;
                        _context.RuleSets.Remove(deleteruleset);
                        _context.SaveChanges();
                     
                        _serviceResponseModel.Result = "RuleSet Deleted Successfully";
                        _serviceResponseModel.StatusCode = 200;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }
            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;


        }
        #endregion
        #region Ruleset General Settings
        public List<RuleSetProperty> GetRulesetGeneralSettingsByRulesetId(int RulesetId)
        {
            List<RuleSetProperty> _ruleSetProperties = new List<RuleSetProperty>();
            var _dataQueryRuleSetProperty = (from rulesetprop in _context.RulesetProperties
                                             join rpgType in _context.RPGSmithTypes on rulesetprop.TypeId equals rpgType.TypeID
                                             join rulesets in _context.RuleSets on RulesetId equals rulesets.RulesetID
                                             join rulesetpropval in _context.RulesetPropertyValues on rulesetprop.PropertyId equals rulesetpropval.PropertyId into ps
                                             from rulesetpropval in ps.DefaultIfEmpty()
                                             where rulesetprop.IsActive == 1 && rulesetpropval.RulesetID == RulesetId
                                             select new { Id = rulesetprop.PropertyId, PropertyValueId = rulesetpropval.Id, Name = rulesetprop.Name, TypeId = rulesetprop.TypeId, Units = rpgType.Units, unitvalue = rulesetpropval.Value, RuleSetPropertyValueRuleSetId = rulesetpropval.RulesetID, RulesetName = rulesets.Name, RulesetId = rulesets.RulesetID }).ToList();
            if (_dataQueryRuleSetProperty.Count == 0) return _ruleSetProperties;
            foreach (var val in _dataQueryRuleSetProperty)
            {
                RuleSetProperty _ruleSetProperty = new RuleSetProperty();
                _ruleSetProperty.Units = new Utilities.RPGSmithTypes.Units();
                _ruleSetProperty.Id = val.Id;
                _ruleSetProperty.PropertyValueId = val.PropertyValueId;
                _ruleSetProperty.Name = val.Name;
                _ruleSetProperty.TypeId = val.TypeId;
                _ruleSetProperty.Value = Utility.ConvertTypeValueXMLtoClass(val.TypeId, val.unitvalue, val.Units);
                _ruleSetProperty.Units = Utility.ConvertUnitsXMLtoClass(val.TypeId, val.Units, val.unitvalue);
                _ruleSetProperty.RulesetName = val.RulesetName;
                _ruleSetProperty.RulesetId = val.RulesetId;
                _ruleSetProperties.Add(_ruleSetProperty);

            }
            return _ruleSetProperties;
        }
        public RuleSetViewModel GetGeneralSettingsMetaData()
        {
            RuleSetViewModel _ruleSetViewModel = new RuleSetViewModel();

            List<RuleSetProperty> _ruleSetProperties = new List<RuleSetProperty>();

            var _dataQueryRuleSetProperty = (from rulesetprop in _context.RulesetProperties
                                             join rpgType in _context.RPGSmithTypes
                                             on rulesetprop.TypeId equals rpgType.TypeID
                                             where rulesetprop.IsActive == 1
                                             select new { Id = rulesetprop.PropertyId, Name = rulesetprop.Name, TypeId = rulesetprop.TypeId, Units = rpgType.Units, Mandatory = rulesetprop.Mandatory }).ToList();

            foreach (var val in _dataQueryRuleSetProperty)
            {
                RuleSetProperty _ruleSetProperty = new RuleSetProperty();

                _ruleSetProperty.Id = val.Id;
                _ruleSetProperty.Name = val.Name;
                _ruleSetProperty.TypeId = val.TypeId;
                _ruleSetProperty.IsMandotary = val.Mandatory == true ? val.Mandatory : false;
                _ruleSetProperty.RulesetName = "";
                _ruleSetProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                var selectedUnit = String.Empty;
                if (val.Units != null && val.Units != "")
                {
                    _ruleSetProperty.Units = Utility.ConvertUnitsXMLtoClass(val.TypeId, val.Units, selectedUnit);
                }
                _ruleSetProperties.Add(_ruleSetProperty);
            }

            _ruleSetViewModel.Rulesetproperty = _ruleSetProperties;
            return _ruleSetViewModel;
        }

        // Validations for Ruleset Generalsettings
        public string ValidationForCreateGeneralSettings(List<RuleSetProperty> _rulesetProperty, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0; // 0-NoError   1-Error

            // General Settings
            if (_rulesetProperty.Count > 0)
            {
                var IsActive = 1;
                var Mandatory = true;

                List<RulesetProperty> _rulesetPropertyList = (from _rulesetPropertie in _context.RulesetProperties
                                                              where _rulesetPropertie.IsActive == IsActive && _rulesetPropertie.Mandatory == Mandatory
                                                              select _rulesetPropertie).ToList();

                if (_rulesetProperty[0].RulesetName == "" || _rulesetProperty[0].RulesetName == null)
                {
                    Errors = Errors + " Ruleset Name " + " Required,";
                    resultStatus = 1;
                }
                else
                {
                    string RulesetName = "";

                    RulesetName = _rulesetProperty[0].RulesetName.ToString();
                    List<RuleSet> _ruleSet = _context.RuleSets.Where(x => x.UserId == userId && x.Name == RulesetName).ToList();
                    if (_ruleSet.Count() > 0)
                    {
                        Errors = Errors + "Ruleset Name Already Exist,";
                        resultStatus = 1;
                    }
                }


                foreach (var rulesetproperty in _rulesetProperty)
                {
                    if (rulesetproperty != null)
                    {
                        if (rulesetproperty.IsMandotary == true && rulesetproperty.Value != null)
                        {

                            List<RulesetProperty> _rulesetPropertyResult = _rulesetPropertyList.Where(x => x.TypeId == rulesetproperty.TypeId && x.PropertyId == rulesetproperty.Id).ToList();
                            if (_rulesetPropertyResult.Count > 0)
                            {
                                XmlDocument _xmlDocument;
                                _xmlDocument = Utility.ConvertRuleSetPropertyValueClasstoXMLValidate(rulesetproperty.TypeId, rulesetproperty.Value, rulesetproperty.Units);


                                if (_xmlDocument.InnerText == "")
                                {
                                    Errors = Errors + rulesetproperty.Name + " Required,";
                                    resultStatus = 1;
                                }
                            }
                            else
                            {
                                Errors = Errors + rulesetproperty.Name + " Not valid, ";
                                resultStatus = 1;
                            }

                        }
                        else if (rulesetproperty.IsMandotary == false && rulesetproperty.Value == null)
                        {
                            Errors = Errors + rulesetproperty.Name + " Required,";
                            resultStatus = 1;
                        }
                    }

                }

            }

            return Errors;

        }

        public string ValidationForUpdateGeneralSettings(List<RuleSetProperty> _rulesetUpdateProperty, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0; // 0-NoError   1-Error

            // General Settings
            if (_rulesetUpdateProperty.Count > 0)
            {
                var IsActive = 1;
                var Mandatory = true;

                List<RulesetProperty> _rulesetPropertyList = (from _rulesetPropertie in _context.RulesetProperties
                                                              where _rulesetPropertie.IsActive == IsActive && _rulesetPropertie.Mandatory == Mandatory
                                                              select _rulesetPropertie).ToList();

                if (_rulesetUpdateProperty[0].RulesetName == "" || _rulesetUpdateProperty[0].RulesetName == null)
                {
                    Errors = Errors + " Ruleset Name " + " Required,";
                    resultStatus = 1;
                }
                else
                {
                    int RulesetId = _rulesetUpdateProperty[0].RulesetId;
                    List<RuleSet> _ruleSet = _context.RuleSets.Where(x => x.UserId == userId && x.RulesetID == RulesetId).ToList();
                    if (_ruleSet.Count() < 1)
                    {
                        Errors = Errors + "Ruleset Not valid";
                        resultStatus = 1;
                    }
                }

                foreach (var rulesetproperty in _rulesetUpdateProperty)
                {
                    if (rulesetproperty != null)
                    {
                        if (rulesetproperty.IsMandotary == true && rulesetproperty.Value != null)
                        {
                            List<RulesetProperty> _rulesetPropertyResult = _rulesetPropertyList.Where(x => x.TypeId == rulesetproperty.TypeId && x.PropertyId == rulesetproperty.Id).ToList();
                            if (_rulesetPropertyResult.Count > 0)
                            {
                                //XmlDocument _xmlDocument = Utility.ConvertRuleSetPropertyValueClasstoXML(rulesetproperty.TypeId, rulesetproperty.Value, null);
                                //if (_xmlDocument.InnerText == "")
                                //{
                                //    Errors = Errors + rulesetproperty.Name + " Required,";
                                //    resultStatus = 1;
                                //}


                                XmlDocument _xmlDocument;
                                _xmlDocument = Utility.ConvertRuleSetPropertyValueClasstoXMLValidate(rulesetproperty.TypeId, rulesetproperty.Value, rulesetproperty.Units);


                                if (_xmlDocument.InnerText == "")
                                {
                                    Errors = Errors + rulesetproperty.Name + " Required,";
                                    resultStatus = 1;
                                }



                            }
                            else
                            {
                                Errors = Errors + rulesetproperty.Name + " Not valid, ";
                                resultStatus = 1;
                            }

                        }
                        else if (rulesetproperty.IsMandotary == false && rulesetproperty.Value == null)
                        {
                            //Errors = Errors + rulesetproperty.Name + " Required,";
                            //resultStatus = 1;
                        }
                    }

                }

            }

            return Errors;

        }

        public ServiceResponseModel CreateRulesetGeneralSettings(List<RuleSetProperty> _rulesetProperty, List<HttpPostedFileBase> ClientImages, string userId)
        {

            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForCreateGeneralSettings(_rulesetProperty, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {

                        Hashtable clientImagesPath = new Hashtable();

                        List<string> clientImagesPathForDelete = new List<string>();
                        RulesetPropertyValue _rulesetPropertyValue;
                        RuleSet _ruleset = new RuleSet();
                        _rulesetProperty = _rulesetProperty == null ? new List<RuleSetProperty>() : _rulesetProperty;
                        _ruleset.Name = _rulesetProperty[0].RulesetName;
                        _ruleset.UserId = userId;
                        _context.RuleSets.Add(_ruleset);
                        _context.SaveChanges();
                        foreach (var property in _rulesetProperty)
                        {
                            CustomTypes _temprulesetPropertyValueForImagePath = property.Value;
                            SetPathforClientImages(1, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                            property.Value = _temprulesetPropertyValueForImagePath;

                            XmlDocument _temprulesetPropertyValue = Utility.ConvertRuleSetPropertyValueClasstoXML(property.TypeId, property.Value, property.Units);
                            if (_temprulesetPropertyValue != null)
                            {
                                _rulesetPropertyValue = new RulesetPropertyValue();
                                _rulesetPropertyValue.RulesetID = _ruleset.RulesetID;
                                _rulesetPropertyValue.PropertyId = property.Id;
                                _rulesetPropertyValue.Value = _temprulesetPropertyValue.OuterXml;
                                _context.RulesetPropertyValues.Add(_rulesetPropertyValue);
                                _context.SaveChanges();
                            }
                        }
                        //_serviceResponseModel.Result = GetCorestatsByRulesetId(_ruleset.RulesetID);
                        SaveRuleSetClientImages(clientImagesPath, ClientImages);
                        _serviceResponseModel.Result = GetRulesetGeneralSettingsByRulesetId(_ruleset.RulesetID);
                        _serviceResponseModel.StatusCode = 200;
                        // return _serviceResponseModel;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;



        }

        public ServiceResponseModel UpdateRulesetGeneralSettings(List<RuleSetProperty> _rulesetUpdateProperty, List<HttpPostedFileBase> ClientImages, string userId)
        {

            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForUpdateGeneralSettings(_rulesetUpdateProperty, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        Hashtable clientImagesPath = new Hashtable();

                        List<string> rulesetpropertyDeleteImage = new List<string>();
                        var _rulesetid = _rulesetUpdateProperty[0].RulesetId;
                        //Updating RuleSet Name
                        var ruleSetDetails = _context.RuleSets.Where(p => p.RulesetID == _rulesetid).SingleOrDefault();
                        ruleSetDetails.Name = _rulesetUpdateProperty[0].RulesetName;
                        _context.SaveChanges();
                        foreach (var updateValue in _rulesetUpdateProperty)
                        {
                            XmlDocument _tempRulesetPropertyValue = Utility.ConvertRuleSetPropertyValueClasstoXML(updateValue.TypeId, updateValue.Value, updateValue.Units);
                            if (_tempRulesetPropertyValue != null)
                            {
                                //var _rulesetPropertyValues = _context.RulesetPropertyValues.Where(r => r.RulesetID == updateValue.Id).ToList();
                                var _UpdaterulesetPropertyValues = _context.RulesetPropertyValues.Where(r => r.RulesetID == updateValue.RulesetId && r.Id == updateValue.PropertyValueId).SingleOrDefault();
                                if (_UpdaterulesetPropertyValues != null)
                                {
                                    CustomTypes _temprulesetPropertyValueForImagePath = updateValue.Value;
                                    SetPathforClientImages(1, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, updateValue.Id);
                                    updateValue.Value = _temprulesetPropertyValueForImagePath;

                                    _tempRulesetPropertyValue = Utility.ConvertRuleSetPropertyValueClasstoXML(updateValue.TypeId, updateValue.Value, updateValue.Units);

                                    _UpdaterulesetPropertyValues.RulesetID = updateValue.RulesetId;
                                    _UpdaterulesetPropertyValues.PropertyId = updateValue.Id;
                                    _UpdaterulesetPropertyValues.Value = _tempRulesetPropertyValue.OuterXml;
                                    _context.SaveChanges();
                                }


                            }
                        }
                        SaveRuleSetClientImages(clientImagesPath, ClientImages);
                        _serviceResponseModel.Result = GetRulesetGeneralSettingsByRulesetId(_rulesetid);
                        _serviceResponseModel.StatusCode = 200;
                        // return _serviceResponseModel;

                    }

                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;

        }


        // Backup for Ruleset Generalsettings
        public ServiceResponseModel CreateRulesetGeneralSettings_Bkp(List<RuleSetProperty> _rulesetProperty, List<HttpPostedFileBase> ClientImages, string userId)
        {
            Hashtable clientImagesPath = new Hashtable();

            List<string> clientImagesPathForDelete = new List<string>();
            RulesetPropertyValue _rulesetPropertyValue;
            RuleSet _ruleset = new RuleSet();
            _rulesetProperty = _rulesetProperty == null ? new List<RuleSetProperty>() : _rulesetProperty;
            _ruleset.Name = _rulesetProperty[0].RulesetName;
            _ruleset.UserId = userId;
            _context.RuleSets.Add(_ruleset);
            _context.SaveChanges();
            foreach (var property in _rulesetProperty)
            {
                CustomTypes _temprulesetPropertyValueForImagePath = property.Value;
                SetPathforClientImages(1, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                property.Value = _temprulesetPropertyValueForImagePath;

                XmlDocument _temprulesetPropertyValue = Utility.ConvertRuleSetPropertyValueClasstoXML(property.TypeId, property.Value, property.Units);
                if (_temprulesetPropertyValue != null)
                {
                    _rulesetPropertyValue = new RulesetPropertyValue();
                    _rulesetPropertyValue.RulesetID = _ruleset.RulesetID;
                    _rulesetPropertyValue.PropertyId = property.Id;
                    _rulesetPropertyValue.Value = _temprulesetPropertyValue.OuterXml;
                    _context.RulesetPropertyValues.Add(_rulesetPropertyValue);
                    _context.SaveChanges();
                }
            }
            //_serviceResponseModel.Result = GetCorestatsByRulesetId(_ruleset.RulesetID);
            SaveRuleSetClientImages(clientImagesPath, ClientImages);
            _serviceResponseModel.Result = GetRulesetGeneralSettingsByRulesetId(_ruleset.RulesetID);
            return _serviceResponseModel;
        }
        public ServiceResponseModel UpdateRulesetGeneralSetting_Bkps(List<RuleSetProperty> _rulesetUpdateProperty, List<HttpPostedFileBase> ClientImages, string userId)
        {
            Hashtable clientImagesPath = new Hashtable();

            List<string> rulesetpropertyDeleteImage = new List<string>();
            var _rulesetid = _rulesetUpdateProperty[0].RulesetId;
            foreach (var updateValue in _rulesetUpdateProperty)
            {
                XmlDocument _tempRulesetPropertyValue = Utility.ConvertRuleSetPropertyValueClasstoXML(updateValue.TypeId, updateValue.Value, updateValue.Units);
                if (_tempRulesetPropertyValue != null)
                {
                    //var _rulesetPropertyValues = _context.RulesetPropertyValues.Where(r => r.RulesetID == updateValue.Id).ToList();
                    var _UpdaterulesetPropertyValues = _context.RulesetPropertyValues.Where(r => r.RulesetID == updateValue.RulesetId && r.Id == updateValue.PropertyValueId).SingleOrDefault();
                    if (_UpdaterulesetPropertyValues != null)
                    {
                        CustomTypes _temprulesetPropertyValueForImagePath = updateValue.Value;
                        SetPathforClientImages(1, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, updateValue.Id);
                        updateValue.Value = _temprulesetPropertyValueForImagePath;

                        _tempRulesetPropertyValue = Utility.ConvertRuleSetPropertyValueClasstoXML(updateValue.TypeId, updateValue.Value, updateValue.Units);

                        _UpdaterulesetPropertyValues.RulesetID = updateValue.RulesetId;
                        _UpdaterulesetPropertyValues.PropertyId = updateValue.Id;
                        _UpdaterulesetPropertyValues.Value = _tempRulesetPropertyValue.OuterXml;
                        _context.SaveChanges();
                    }


                }
            }
            SaveRuleSetClientImages(clientImagesPath, ClientImages);
            _serviceResponseModel.Result = GetRulesetGeneralSettingsByRulesetId(_rulesetid);
            return _serviceResponseModel;

        }


        #endregion
        #region Ruleset Corestats
        public List<Corestats> GetCorestatsByRulesetId(int RulesetId)
        {
            List<Corestats> corestatsList = new List<Corestats>();
            var dbCorestats = _context.CoreStats.Where(c => c.RulesetID == RulesetId).ToList();
            if (dbCorestats != null)
            {
                foreach (var _corestat in dbCorestats)
                {
                    corestatsList.Add(new Corestats()
                    {
                        Id = _corestat.CorestatID,
                        Name = _corestat.Name,
                        TypeId = _corestat.TypeId,
                        Description = _corestat.Description,
                        RulesetId = Convert.ToInt32(_corestat.RulesetID),
                        Value = (_corestat.Metadata == "System.Xml.XmlDocument" || _corestat.Metadata == "" || _corestat.Metadata == null) ? Utility.ConvertTypeMetaDataXMLtoClass(_corestat.TypeId, "") : Utility.ConvertTypeMetaDataXMLtoClass(_corestat.TypeId, _corestat.Metadata)
                    });
                }
            }
            return corestatsList;


        }
        public RuleSetViewModel GetCorestatsMetadata()
        {
            RuleSetViewModel _ruleSetViewModel = new RuleSetViewModel();
            _ruleSetViewModel.RuleSetMetaData.Corestats = new Corestats();
            var _tempCustomeTypeValue = new CustomTypes();
            _tempCustomeTypeValue = Utility.GetTypeClassMetaData(16);
            _ruleSetViewModel.RuleSetMetaData.Corestats.Value = _tempCustomeTypeValue;
            return _ruleSetViewModel;
        }
        public Corestats GetCorestatByCorestatId(int ID)
        {
            Corestats _corestat = new Corestats();
            var corestat = _context.CoreStats.Where(p => p.CorestatID == ID).FirstOrDefault();
            _corestat.Id = corestat.CorestatID;
            _corestat.Name = corestat.Name;
            _corestat.Description = corestat.Description;
            _corestat.RulesetId = Convert.ToInt32(corestat.RulesetID);
            _corestat.TypeId = corestat.TypeId;
            _corestat.Value = (corestat.Metadata == "System.Xml.XmlDocument" || corestat.Metadata == "" || corestat.Metadata == null) ? Utility.ConvertTypeMetaDataXMLtoClass(_corestat.TypeId, "") : Utility.ConvertTypeMetaDataXMLtoClass(_corestat.TypeId, corestat.Metadata);
            return _corestat;

        }


        public ServiceResponseModel CreateCorestats(List<Corestats> _rulesetCorestats, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";
                    List<Items> _rulesetItemsCreated = new List<Items>();

                    Errors = ValidationForCreateCorestats(_rulesetCorestats, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {

                        _rulesetCorestats = _rulesetCorestats == null ? new List<Corestats>() : _rulesetCorestats;
                        foreach (var _corestat in _rulesetCorestats)
                        {
                            XmlDocument _tempCoreStatPropertyValue = new XmlDocument();
                            if (_corestat.Value != null)
                            {
                                _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(_corestat.TypeId), _corestat.Value);
                            }
                            if (_tempCoreStatPropertyValue != null)
                            {
                                CoreStat coreStat = new CoreStat();
                                coreStat.TypeId = _corestat.TypeId;
                                coreStat.Name = _corestat.Name;
                                coreStat.Description = _corestat.Description;
                                coreStat.Metadata = _tempCoreStatPropertyValue.OuterXml;
                                coreStat.RulesetID = _corestat.RulesetId;
                                _context.CoreStats.Add(coreStat);
                                _context.SaveChanges();
                            }
                        }
                        _serviceResponseModel.Result = GetCorestatsByRulesetId(_rulesetCorestats[0].RulesetId);
                        //return _serviceResponseModel;
                        _serviceResponseModel.StatusCode = 200;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;



        }
        public ServiceResponseModel UpdateCorestats(List<Corestats> _updateCorestats, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";
                    List<Items> _rulesetItemsCreated = new List<Items>();

                    Errors = ValidationForUpdateCorestats(_updateCorestats, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {

                        var _deleteCorestatId = new List<int>();
                        var rulesetId = _updateCorestats[0].RulesetId;
                        if (_updateCorestats != null)
                        {
                            XmlDocument _tempCoreStatPropertyValue = new XmlDocument();
                            foreach (var _corestat in _updateCorestats)
                            {
                                CoreStat coreStat = new CoreStat();

                                if (_corestat.Id == 0)
                                {
                                    if (_corestat.Value != null)
                                    {
                                        _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(_corestat.TypeId), _corestat.Value);
                                    }
                                    if (_tempCoreStatPropertyValue != null)
                                    {
                                        coreStat.Name = _corestat.Name;
                                        coreStat.Description = _corestat.Description;
                                        coreStat.TypeId = _corestat.TypeId;
                                        coreStat.RulesetID = _corestat.RulesetId;
                                        coreStat.Metadata = _tempCoreStatPropertyValue.OuterXml;
                                    }
                                    _context.CoreStats.Add(coreStat);
                                    _context.SaveChanges();
                                }
                                else if (_corestat.Id != 0)
                                {
                                    var dbCorestats = _context.CoreStats.Where(p => p.CorestatID == _corestat.Id && p.RulesetID == _corestat.RulesetId).SingleOrDefault();
                                    if (_corestat.Value != null)
                                    {
                                        _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(_corestat.TypeId), _corestat.Value);
                                    }
                                    if (dbCorestats != null)
                                    {
                                        dbCorestats.Name = _corestat.Name;
                                        dbCorestats.TypeId = _corestat.TypeId;
                                        dbCorestats.Description = _corestat.Description;
                                        dbCorestats.RulesetID = _corestat.RulesetId;
                                        dbCorestats.CorestatID = _corestat.Id;
                                        dbCorestats.Metadata = _tempCoreStatPropertyValue.OuterXml;
                                        _context.SaveChanges();
                                    }

                                }

                                _deleteCorestatId.Add(coreStat.CorestatID);
                                //if(coreStat.CorestatID > 0)
                                //{
                                //    _serviceResponseModel.Result = GetCorestatByCorestatId(coreStat.CorestatID);
                                //}


                            }
                        }
                        _serviceResponseModel.Result = GetCorestatsByRulesetId(rulesetId);
                        //var deletecorestats = _context.CoreStats.Where(w => w.RulesetID == _updateCorestats[0].RulesetId).ToList().RemoveAll(r => !_deleteCorestatId.Any(a => a == r.CorestatID));

                        //return _serviceResponseModel;
                        _serviceResponseModel.StatusCode = 200;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;
        }
        public ServiceResponseModel CopyCorestats(List<Corestats> _copyCorestats, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";
                    List<Items> _rulesetItemsCreated = new List<Items>();

                    Errors = ValidationForCreateCorestats(_copyCorestats, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        _copyCorestats = _copyCorestats == null ? new List<Corestats>() : _copyCorestats;
                        foreach (var _corestat in _copyCorestats)
                        {
                            XmlDocument _tempCoreStatPropertyValue = new XmlDocument();
                            if (_corestat.Value != null)
                            {
                                _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(_corestat.TypeId), _corestat.Value);
                            }
                            if (_tempCoreStatPropertyValue != null)
                            {
                                CoreStat coreStat = new CoreStat();
                                coreStat.TypeId = _corestat.TypeId;
                                coreStat.Name = _corestat.Name;
                                coreStat.Description = _corestat.Description;
                                coreStat.Metadata = _tempCoreStatPropertyValue.OuterXml;
                                coreStat.RulesetID = _corestat.RulesetId;
                                _context.CoreStats.Add(coreStat);
                                _context.SaveChanges();
                            }
                        }
                        _serviceResponseModel.Result = GetCorestatsByRulesetId(_copyCorestats[0].RulesetId);
                        //return _serviceResponseModel;
                        _serviceResponseModel.StatusCode = 200;
                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;
        }
        public ServiceResponseModel DeleteCorestat(List<Corestats> deletecorestat, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";
                    List<Items> _rulesetItemsCreated = new List<Items>();

                    Errors = ValidationForDeleteCoresta(deletecorestat, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        var _rulesetId = deletecorestat[0].RulesetId;
                        foreach (var corestat in deletecorestat)
                        {
                            var deleteCorestatValues = _context.CoreStatValues.Where(p => p.CorestatID == corestat.Id).ToList();
                            if(deleteCorestatValues.Count > 0)
                            {
                                foreach (var _corestatvalue in deleteCorestatValues)
                                {
                                    _context.CoreStatValues.Remove(_corestatvalue);
                                    _context.SaveChanges();
                                }
                            }
                          
                            var deletecorestats = _context.CoreStats.Where(p => p.CorestatID == corestat.Id).FirstOrDefault();
                            _context.CoreStats.Remove(deletecorestats);
                            _context.SaveChanges();

                        }
                        _serviceResponseModel.Result = GetCorestatsByRulesetId(_rulesetId);
                        //return _serviceResponseModel;
                        _serviceResponseModel.StatusCode = 200;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;

        }

        // Validations for  Corestats
        // Validations for  Corestats
        public string ValidationForCreateCorestats(List<Corestats> _rulesetCorestats, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            foreach (var _rulesetCorestat in _rulesetCorestats)
            {
                if (_rulesetCorestat != null)
                {
                    int TypeId = 0;
                    int RulesetId = 0;

                    if (_rulesetCorestat.RulesetId != 0)
                    {
                        RulesetId = Convert.ToInt32(_rulesetCorestat.RulesetId);
                    }
                    if (_rulesetCorestat.TypeId != 0 && _rulesetCorestat.TypeId != null)
                    {
                        TypeId = Convert.ToInt32(_rulesetCorestat.TypeId);
                    }

                    if (_rulesetCorestat.Name == "" && _rulesetCorestat.Name != null)
                    {
                        Errors = Errors + " Corestat Name Required,";
                        resultStatus = 1;
                    }
                    else
                    {

                        // Get Records for Duplicate Name Checking
                        List<CoreStat> objcoreStatsList = (from _coreStats in _context.CoreStats
                                                           where _coreStats.RulesetID == RulesetId
                                                           && _coreStats.Name == _rulesetCorestat.Name.ToString()
                                                           select _coreStats).ToList();
                        if (objcoreStatsList.Count > 0)
                        {
                            Errors = Errors + " Corestat Name already Exist,";
                            resultStatus = 1;
                        }
                    }

                    if (_rulesetCorestat.TypeId == null || _rulesetCorestat.TypeId == 0)
                    {
                        Errors = Errors + " Corestat Type Required,";
                        resultStatus = 1;
                    }
                    else
                    {
                        TypeId = Convert.ToInt32(_rulesetCorestat.TypeId);
                    }


                    switch (TypeId)
                    {
                        case 2:
                            if (_rulesetCorestat.Value.Choices.choices != null)
                            {
                                if (_rulesetCorestat.Value.Choices.choices.Count < 1)
                                {
                                    //Errors = Errors + _rulesetCorestat.TypeName + " Required,";
                                    Errors = Errors + " Please add atleast one choice,";
                                    resultStatus = 1;
                                }

                            }
                            else
                            {
                                Errors = Errors + " Please add atleast one choice,";
                                resultStatus = 1;

                            }
                            break;
                        case 16:
                            if (_rulesetCorestat.Value.Calculation != null)
                            {
                                if (_rulesetCorestat.Value.Calculation.formulae == "" || _rulesetCorestat.Value.Calculation.formulae == null)
                                {
                                    //Errors = Errors + _rulesetCorestat.TypeName + " Required,";
                                    Errors = Errors + " Please add atleast one Corestat,";
                                    resultStatus = 1;
                                }

                            }
                            else
                            {
                                Errors = Errors + " Please add atleast one Corestat,";
                                resultStatus = 1;

                            }
                            break;
                    }

                }
            }
            return Errors;
        }
        public string ValidationForUpdateCorestats(List<Corestats> _updateCorestats, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            foreach (var _rulesetCorestat in _updateCorestats)
            {
                if (_rulesetCorestat != null)
                {
                    int TypeId = 0;
                    int RulesetId = 0;

                    if (_rulesetCorestat.RulesetId != 0)
                    {
                        RulesetId = Convert.ToInt32(_rulesetCorestat.RulesetId);
                    }
                    if (_rulesetCorestat.TypeId != 0 && _rulesetCorestat.TypeId != null)
                    {
                        TypeId = Convert.ToInt32(_rulesetCorestat.TypeId);
                    }

                    if (_rulesetCorestat.Name == "" && _rulesetCorestat.Name != null)
                    {
                        Errors = Errors + " Corestat Name Required,";
                        resultStatus = 1;
                    }

                    if (_rulesetCorestat.TypeId == null || _rulesetCorestat.TypeId == 0)
                    {
                        Errors = Errors + " Corestat Type Required,";
                        resultStatus = 1;
                    }
                    else
                    {
                        TypeId = Convert.ToInt32(_rulesetCorestat.TypeId);
                    }


                    switch (TypeId)
                    {
                        case 2:
                            if (_rulesetCorestat.Value.Choices.choices != null)
                            {
                                if (_rulesetCorestat.Value.Choices.choices.Count < 1)
                                {
                                    Errors = Errors + " Please add atleast one choice,";
                                    resultStatus = 1;
                                }

                            }
                            else
                            {
                                Errors = Errors + " Please add atleast one choice,";
                                resultStatus = 1;

                            }
                            break;
                        case 16:
                            if (_rulesetCorestat.Value.Calculation != null)
                            {
                                if (_rulesetCorestat.Value.Calculation.formulae == "" || _rulesetCorestat.Value.Calculation.formulae == null)
                                {
                                    Errors = Errors + " Please add atleast one Calculation,";
                                    resultStatus = 1;
                                }

                            }
                            else
                            {
                                Errors = Errors + " Please add atleast one Calculation,";
                                resultStatus = 1;

                            }
                            break;
                    }

                }
            }
            return Errors;

            //foreach (var _rulesetCorestat in _updateCorestats)
            //{
            //    if (_rulesetCorestat != null)
            //    {

            //        if (_rulesetCorestat.TypeId == null || _rulesetCorestat.TypeId == 0)
            //        {
            //            Errors = Errors + " Corestat Type Required,";
            //            resultStatus = 1;
            //        }

            //    }
            //}
            //return Errors;

        }
        public string ValidationForDeleteCoresta(List<Corestats> deletecorestat, string userId, out int resultStatus)
        {

            string Errors = "";
            resultStatus = 0;

            foreach (var _deletecorestat in deletecorestat)
            {
                if (_deletecorestat != null)
                {

                    int TypeId = 0;
                    int RulesetId = 0;
                    int CorestatId = 0;

                    if (_deletecorestat.RulesetId != 0)
                    {
                        RulesetId = Convert.ToInt32(_deletecorestat.RulesetId);
                    }
                    if (_deletecorestat.TypeId != 0 && _deletecorestat.TypeId != null)
                    {
                        TypeId = Convert.ToInt32(_deletecorestat.TypeId);
                    }
                    if (_deletecorestat.TypeId != 0 && _deletecorestat.TypeId != null)
                    {
                        CorestatId = Convert.ToInt32(_deletecorestat.Id);
                    }

                    // Get Records for Duplicate Name Checking
                    List<CoreStat> objcoreStatsList = (from _coreStats in _context.CoreStats
                                                       join
                 _RuleSets in _context.RuleSets on _coreStats.RulesetID equals _RuleSets.RulesetID
                                                       where _coreStats.RulesetID == RulesetId && _coreStats.CorestatID == CorestatId
                                                       && _RuleSets.UserId == userId
                                                       select _coreStats).ToList();
                    if (objcoreStatsList.Count == 0)
                    {
                        Errors = Errors + "Please select valid Corestat for Delete,";
                        resultStatus = 1;
                    }

                }

            }

            return Errors;
        }

        // Backup for rulesets Corestats
        public ServiceResponseModel CreateCorestats_Bkp(List<Corestats> _rulesetCorestats)
        {

            _rulesetCorestats = _rulesetCorestats == null ? new List<Corestats>() : _rulesetCorestats;
            foreach (var _corestat in _rulesetCorestats)
            {
                XmlDocument _tempCoreStatPropertyValue = new XmlDocument();
                if (_corestat.Value != null)
                {
                    _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(_corestat.TypeId), _corestat.Value);
                }
                if (_tempCoreStatPropertyValue != null)
                {
                    CoreStat coreStat = new CoreStat();
                    coreStat.TypeId = _corestat.TypeId;
                    coreStat.Name = _corestat.Name;
                    coreStat.Description = _corestat.Description;
                    coreStat.Metadata = _tempCoreStatPropertyValue.OuterXml;
                    coreStat.RulesetID = _corestat.RulesetId;
                    _context.CoreStats.Add(coreStat);
                    _context.SaveChanges();
                }
            }
            _serviceResponseModel.Result = GetCorestatsByRulesetId(_rulesetCorestats[0].RulesetId);
            return _serviceResponseModel;
        }
        public ServiceResponseModel UpdateCorestats_Bkp(List<Corestats> _updateCorestats)
        {
            var _deleteCorestatId = new List<int>();
            var rulesetId = _updateCorestats[0].RulesetId;
            if (_updateCorestats != null)
            {
                XmlDocument _tempCoreStatPropertyValue = new XmlDocument();
                foreach (var _corestat in _updateCorestats)
                {
                    CoreStat coreStat = new CoreStat();

                    if (_corestat.Id == 0)
                    {
                        if (_corestat.Value != null)
                        {
                            _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(_corestat.TypeId), _corestat.Value);
                        }
                        if (_tempCoreStatPropertyValue != null)
                        {
                            coreStat.Name = _corestat.Name;
                            coreStat.Description = _corestat.Description;
                            coreStat.TypeId = _corestat.TypeId;
                            coreStat.RulesetID = _corestat.RulesetId;
                            coreStat.Metadata = _tempCoreStatPropertyValue.OuterXml;
                        }
                        _context.CoreStats.Add(coreStat);
                        _context.SaveChanges();
                    }
                    else if (_corestat.Id != 0)
                    {
                        var dbCorestats = _context.CoreStats.Where(p => p.CorestatID == _corestat.Id && p.RulesetID == _corestat.RulesetId).SingleOrDefault();
                        if (_corestat.Value != null)
                        {
                            _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(_corestat.TypeId), _corestat.Value);
                        }
                        if (dbCorestats != null)
                        {
                            dbCorestats.Name = _corestat.Name;
                            dbCorestats.TypeId = _corestat.TypeId;
                            dbCorestats.Description = _corestat.Description;
                            dbCorestats.RulesetID = _corestat.RulesetId;
                            dbCorestats.CorestatID = _corestat.Id;
                            dbCorestats.Metadata = _tempCoreStatPropertyValue.OuterXml;
                            _context.SaveChanges();
                        }

                    }

                    _deleteCorestatId.Add(coreStat.CorestatID);
                    //if(coreStat.CorestatID > 0)
                    //{
                    //    _serviceResponseModel.Result = GetCorestatByCorestatId(coreStat.CorestatID);
                    //}


                }
            }
            _serviceResponseModel.Result = GetCorestatsByRulesetId(rulesetId);
            //var deletecorestats = _context.CoreStats.Where(w => w.RulesetID == _updateCorestats[0].RulesetId).ToList().RemoveAll(r => !_deleteCorestatId.Any(a => a == r.CorestatID));

            return _serviceResponseModel;
        }
        public ServiceResponseModel CopyCorestats_Bkp(List<Corestats> _copyCorestats)
        {
            _copyCorestats = _copyCorestats == null ? new List<Corestats>() : _copyCorestats;
            foreach (var _corestat in _copyCorestats)
            {
                XmlDocument _tempCoreStatPropertyValue = new XmlDocument();
                if (_corestat.Value != null)
                {
                    _tempCoreStatPropertyValue = Utility.ConvertTypeMetaDataClasstoXML(Convert.ToInt32(_corestat.TypeId), _corestat.Value);
                }
                if (_tempCoreStatPropertyValue != null)
                {
                    CoreStat coreStat = new CoreStat();
                    coreStat.TypeId = _corestat.TypeId;
                    coreStat.Name = _corestat.Name;
                    coreStat.Description = _corestat.Description;
                    coreStat.Metadata = _tempCoreStatPropertyValue.OuterXml;
                    coreStat.RulesetID = _corestat.RulesetId;
                    _context.CoreStats.Add(coreStat);
                    _context.SaveChanges();
                }
            }
            _serviceResponseModel.Result = GetCorestatsByRulesetId(_copyCorestats[0].RulesetId);
            return _serviceResponseModel;
        }
        public ServiceResponseModel DeleteCorestat_Bkp(List<Corestats> deletecorestat)
        {
            var _rulesetId = deletecorestat[0].RulesetId;
            foreach (var corestat in deletecorestat)
            {
                var deletecorestats = _context.CoreStats.Where(p => p.CorestatID == corestat.Id).FirstOrDefault();
                _context.CoreStats.Remove(deletecorestats);
                _context.SaveChanges();

            }
            _serviceResponseModel.Result = GetCorestatsByRulesetId(_rulesetId);
            return _serviceResponseModel;
        }
        #endregion
        #region Ruleset Items

        public List<Items> GetRulesetItemsByRulesetId(int RUlesetId)
        {
            List<Items> _ruleSetItemsVM = new List<Items>();
            RuleSetViewModel _rulesetViewModel = new RuleSetViewModel();
            _rulesetViewModel.Items = new List<Items>();
            //Getting RuleSetItems based on RuleSetId
            var _dbruleSetItems = _context.RuleSetItemsContents.Where(p => p.RulesetID == RUlesetId && p.Type == 1).ToList();
            foreach (var _ruleSetItem in _dbruleSetItems)
            {
                Items _ruleSetItemVM = new Items();
                _ruleSetItemVM.ItemProperties = new List<ItemProperties>();
                var _ruleSetItemProperties = (from _itemProperties in _context.RulesetContentTypes
                                              join rpgType in _context.RPGSmithTypes on _itemProperties.TypeId equals rpgType.TypeID
                                              join _itemPropertyValue in _context.Items on _itemProperties.Id equals _itemPropertyValue.ContentTypeId into ps
                                              from _itemPropertyValue in ps.DefaultIfEmpty()
                                              where _itemPropertyValue.ContentId == _ruleSetItem.ContentId
                                              select new
                                              {
                                                  Id = _itemPropertyValue.ItemId,
                                                  ContentTypeId = _itemPropertyValue.ContentTypeId,
                                                  ContentId = _itemPropertyValue.ContentId,
                                                  TypeId = _itemProperties.TypeId,
                                                  Name = _itemProperties.Name,
                                                  Description = _itemProperties.Description,
                                                  Mandatory = _itemProperties.Mandatory,
                                                  Value = _itemPropertyValue.value,
                                                  Units = rpgType.Units,
                                              }).ToList();

                foreach (var _ruleSetItemProperty in _ruleSetItemProperties)
                {
                    var _itemProperties = new ItemProperties();
                    _itemProperties.Id = _ruleSetItemProperty.Id;
                    _itemProperties.ContentTypeId = _ruleSetItemProperty.ContentTypeId;
                    _itemProperties.ContentId = _ruleSetItemProperty.ContentId;
                    _itemProperties.TypeId = _ruleSetItemProperty.TypeId;
                    _itemProperties.Name = _ruleSetItemProperty.Name;
                    _itemProperties.IsMandatory = _ruleSetItemProperty.Mandatory == true ? _ruleSetItemProperty.Mandatory : false;
                    _itemProperties.Description = _ruleSetItemProperty.Description;
                    _itemProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetItemProperty.TypeId, _ruleSetItemProperty.Value, _ruleSetItemProperty.Units);
                    _ruleSetItemVM.ItemProperties.Add(_itemProperties);
                }
                //Declare Model
                var _itemTileProperties = new ItemProperties();
                //Getting Item Tile Properties from db
                var ItemTileProperties = _context.Items.Where(p => p.ContentId == _ruleSetItem.ContentId && p.ContentTypeId == null).ToList();
                foreach (var _itemTileProperty in ItemTileProperties)
                {
                    // Setting RuleSet Item Tile Properties
                    _itemTileProperties = SetRuleSetContents(_itemTileProperty, null, null).ItemProperty;
                    _ruleSetItemVM.ItemProperties.Add(_itemTileProperties);
                }
                //Filling the Associated Spells into the Items.
                List<Spells> _ruleSetAssociatedSpellsVM = new List<Spells>();
                var _ruleSetAssociatedSpellContentIds = (from _ruleSetAssociatedItemsContents in _context.RuleSetItemsContents
                                                         join _itemSpells in _context.ItemSpells on _ruleSetAssociatedItemsContents.ContentId equals _itemSpells.ItemId
                                                         where _itemSpells.ItemId == _ruleSetItem.ContentId
                                                         select new
                                                         {
                                                             ContentId = _itemSpells.SpellId
                                                         }).ToList();

                if (_ruleSetAssociatedSpellContentIds.Count > 0)
                {
                    _ruleSetItemVM.AssociatedSpells = new List<Spells>();

                    foreach (var _ruleSetAssociatedSpellContentId in _ruleSetAssociatedSpellContentIds)
                    {
                        Spells _ruleAssociatedSetSpellVM = new Spells();
                        _ruleAssociatedSetSpellVM.SpellProperties = new List<SpellProperties>();
                        var _ruleSetAssociatedSpellProperties = (from _spellProperties in _context.RulesetContentTypes
                                                                 join rpgType in _context.RPGSmithTypes on _spellProperties.TypeId equals rpgType.TypeID
                                                                 join _spellPropertyValue in _context.Spells on _spellProperties.Id equals _spellPropertyValue.ContentTypeId into ps
                                                                 from _spellPropertyValue in ps.DefaultIfEmpty()
                                                                 where _spellPropertyValue.ContentId == _ruleSetAssociatedSpellContentId.ContentId
                                                                 select new
                                                                 {
                                                                     Id = _spellPropertyValue.SpellId,
                                                                     ContentTypeId = _spellPropertyValue.ContentTypeId,
                                                                     TypeId = _spellProperties.TypeId,
                                                                     Name = _spellProperties.Name,
                                                                     Description = _spellProperties.Description,
                                                                     Mandatory = _spellProperties.Mandatory,
                                                                     Value = _spellPropertyValue.value,
                                                                     Units = rpgType.Units
                                                                 }).ToList();

                        foreach (var _ruleSetSpellProperty in _ruleSetAssociatedSpellProperties)
                        {
                            var _spellProperties = new SpellProperties();
                            _spellProperties.Id = _ruleSetSpellProperty.Id;
                            _spellProperties.ContentTypeId = Convert.ToInt32(_ruleSetSpellProperty.ContentTypeId);
                            _spellProperties.TypeId = _ruleSetSpellProperty.TypeId;
                            _spellProperties.Name = _ruleSetSpellProperty.Name;
                            _spellProperties.IsMandatory = _ruleSetSpellProperty.Mandatory == true ? _ruleSetSpellProperty.Mandatory : false;
                            _spellProperties.Description = _ruleSetSpellProperty.Description;
                            _spellProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetSpellProperty.TypeId, _ruleSetSpellProperty.Value, _ruleSetSpellProperty.Units);

                            _ruleAssociatedSetSpellVM.SpellProperties.Add(_spellProperties);
                        }
                        //Declare Model
                        var _spellTileProperties = new SpellProperties();
                        //Getting Spell Tile Properties from db
                        var SpellTileProperties = _context.Spells.Where(p => p.ContentId == _ruleSetAssociatedSpellContentId.ContentId && p.ContentTypeId == null).ToList();
                        foreach (var _spellTileProperty in SpellTileProperties)
                        {
                            // Setting RuleSet Spell Tile Properties
                            _spellTileProperties = SetRuleSetContents(null, _spellTileProperty, null).SpellProperty;
                            _ruleAssociatedSetSpellVM.SpellProperties.Add(_spellTileProperties);
                        }
                        _ruleSetItemVM.AssociatedSpells.Add(_ruleAssociatedSetSpellVM);
                    }

                }

                //Filling the Associated Abilities into the Items.
                List<Spells> _ruleSetAssociatedAbilitiesVM = new List<Spells>();
                var _ruleSetAssociatedAbilityContentIds = (from _ruleSetAssociatedItemsContents in _context.RuleSetItemsContents
                                                           join _itemAbilities in _context.ItemAbilities on _ruleSetAssociatedItemsContents.ContentId equals _itemAbilities.ItemId
                                                           where _itemAbilities.ItemId == _ruleSetItem.ContentId
                                                           select new
                                                           {
                                                               ContentId = _itemAbilities.AbilityId
                                                           }).ToList();

                if (_ruleSetAssociatedAbilityContentIds.Count > 0)
                {
                    _ruleSetItemVM.AssociatedAbilities = new List<Abilities>();

                    foreach (var _ruleSetAssociatedAbilityContentId in _ruleSetAssociatedAbilityContentIds)
                    {
                        Abilities _ruleAssociatedSetAbilityVM = new Abilities();
                        _ruleAssociatedSetAbilityVM.AbilityProperties = new List<AbilityProperties>();
                        var _ruleSetAssociatedAbilityProperties = (from _abilityProperties in _context.RulesetContentTypes
                                                                   join rpgType in _context.RPGSmithTypes on _abilityProperties.TypeId equals rpgType.TypeID
                                                                   join _abilityPropertyValue in _context.Abilities on _abilityProperties.Id equals _abilityPropertyValue.ContentTypeId into ps
                                                                   from _abilityPropertyValue in ps.DefaultIfEmpty()
                                                                   where _abilityPropertyValue.ContentId == _ruleSetAssociatedAbilityContentId.ContentId
                                                                   select new
                                                                   {
                                                                       Id = _abilityPropertyValue.AbilityId,
                                                                       ContentTypeId = _abilityPropertyValue.ContentTypeId,
                                                                       TypeId = _abilityProperties.TypeId,
                                                                       Name = _abilityProperties.Name,
                                                                       Description = _abilityProperties.Description,
                                                                       Mandatory = _abilityProperties.Mandatory,
                                                                       Value = _abilityPropertyValue.value,
                                                                       Units = rpgType.Units
                                                                   }).ToList();

                        foreach (var _ruleSetAbilityProperty in _ruleSetAssociatedAbilityProperties)
                        {
                            var _abilityProperties = new AbilityProperties();
                            _abilityProperties.Id = _ruleSetAbilityProperty.Id;
                            _abilityProperties.ContentTypeId = Convert.ToInt32(_ruleSetAbilityProperty.ContentTypeId);
                            _abilityProperties.TypeId = _ruleSetAbilityProperty.TypeId;
                            _abilityProperties.Name = _ruleSetAbilityProperty.Name;
                            _abilityProperties.IsMandatory = _ruleSetAbilityProperty.Mandatory == true ? _ruleSetAbilityProperty.Mandatory : false;
                            _abilityProperties.Description = _ruleSetAbilityProperty.Description;
                            _abilityProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetAbilityProperty.TypeId, _ruleSetAbilityProperty.Value, _ruleSetAbilityProperty.Units);

                            _ruleAssociatedSetAbilityVM.AbilityProperties.Add(_abilityProperties);
                        }
                        //Declare Model
                        var _abilityTileProperties = new AbilityProperties();
                        //Getting Spell Tile Properties from db
                        var AbilityTileProperties = _context.Abilities.Where(p => p.ContentId == _ruleSetAssociatedAbilityContentId.ContentId && p.ContentTypeId == null).ToList();
                        foreach (var _abilityTileProperty in AbilityTileProperties)
                        {
                            // Setting RuleSet Spell Tile Properties
                            _abilityTileProperties = SetRuleSetContents(null, null, _abilityTileProperty).AbilityProperty;
                            _ruleAssociatedSetAbilityVM.AbilityProperties.Add(_abilityTileProperties);
                        }
                        _ruleSetItemVM.AssociatedAbilities.Add(_ruleAssociatedSetAbilityVM);
                    }

                }
                _ruleSetItemVM.ItemProperties = _ruleSetItemVM.ItemProperties.Where(p => p.ContentId != null || p.tile != null).ToList();

                _ruleSetItemsVM.Add(_ruleSetItemVM);
            }

            ////Filling Items Metadata for RuleSet
            //var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 1 && x.IsActive == true && x.IsRuleSet == true).Select(
            // x => new
            // {
            //     Id = x.Id,
            //     Name = x.Name,
            //     Description = x.Description,
            //     TypeId = x.TypeId,
            //     Mandatory = x.Mandatory,
            //     Metadata = x.Metadata,
            // }
            // ).ToList();

            //foreach (var val in _dataQuery)
            //    {
            //        ItemProperties _ruleSetItemProperty = new ItemProperties();
            //        _ruleSetItemProperty.Id = val.Id;
            //        _ruleSetItemProperty.Name = val.Name;
            //        _ruleSetItemProperty.Description = val.Description;
            //        _ruleSetItemProperty.TypeId = val.TypeId;
            //        _ruleSetItemProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
            //        _ruleSetItemProperty.Value = (val.Metadata != null && val.Metadata != "") ?
            //                                     Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata) :
            //                                     _ruleSetItemProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
            //        _rulesetViewModel.RuleSetMetaData.ItemProperties.Add(_ruleSetItemProperty);
            //    }
            return _ruleSetItemsVM;
        }
        //public Items GetItemItemId(int? ItemId)
        //{

        //    Items _items = new Items();

        //    var result = _context.Items.Where(x => x.ItemId == ItemId).FirstOrDefault();

        //    if (result == null) return _items;

        //    var RarityMetadata = _context.RulesetContentTypes.Where(x => x.ContentType == 1 && x.IsActive == true && x.IsRuleSet == true && x.Id == 7).SingleOrDefault().Metadata;

        //    List<ItemProperties> _rulesetItemsproperties = new List<Web.ViewModels.ItemProperties>();

        //    var rulesetItemProperties = (from itemproperties in _context.Items.Where(p => p.ItemId == ItemId)
        //                                   join rpgtype in _context.RPGSmithTypes on itemproperties.ContentTypeId equals rpgtype.TypeID
        //                                   select new { Id = itemproperties., Name = itemproperties.Name, Discription = itemproperties.Description, TypeId = itemproperties.TypeId, Value = itemproperties.Value, IsAction = itemproperties.IsAction, Units = rpgtype.Units }).ToList();

        //    foreach (var _characterItemProperties in CharacterItemProperties)
        //    {

        //        if (_characterItemProperties.Name == "Rarity")
        //        {
        //            _characterItemsproperties.Add(new CharacterItemsProperties()
        //            {
        //                CharacterItemValueId = Convert.ToInt32(_characterItemProperties.Id),
        //                CharacterItemId = result.CharacterItemId,
        //                ContentId = result.ContentId,
        //                Name = _characterItemProperties.Name,
        //                IsAction = Convert.ToInt32(_characterItemProperties.IsAction),
        //                Description = _characterItemProperties.Discription,
        //                TypeId = Convert.ToInt32(_characterItemProperties.TypeId),
        //                Value = Utility.ConvertTypeValueXMLtoClass(_characterItemProperties.TypeId, _characterItemProperties.Value, RarityMetadata)
        //            });
        //        }
        //        else
        //        {

        //            if (_characterItemProperties.TypeId == 16)
        //            {

        //                CustomTypes c1 = new CustomTypes();
        //                c1.Calculation = new Calculation();
        //                c1.Calculation.formulae = "[Weight]*[Quantity]";
        //                //Calculation c1 = new Calculation();
        //                //c1.formulae = 
        //                _characterItemsproperties.Add(new CharacterItemsProperties()
        //                {
        //                    CharacterItemValueId = Convert.ToInt32(_characterItemProperties.Id),
        //                    CharacterItemId = result.CharacterItemId,
        //                    ContentId = result.ContentId,
        //                    Name = _characterItemProperties.Name,
        //                    IsAction = Convert.ToInt32(_characterItemProperties.IsAction),
        //                    Description = _characterItemProperties.Discription,
        //                    TypeId = Convert.ToInt32(_characterItemProperties.TypeId),
        //                    Value = c1
        //                });

        //            }
        //            else
        //            {
        //                _characterItemsproperties.Add(new CharacterItemsProperties()
        //                {
        //                    CharacterItemValueId = Convert.ToInt32(_characterItemProperties.Id),
        //                    CharacterItemId = result.CharacterItemId,
        //                    ContentId = result.ContentId,
        //                    Name = _characterItemProperties.Name,
        //                    IsAction = Convert.ToInt32(_characterItemProperties.IsAction),
        //                    Description = _characterItemProperties.Discription,
        //                    TypeId = Convert.ToInt32(_characterItemProperties.TypeId),
        //                    Value = Utility.ConvertTypeValueXMLtoClass(_characterItemProperties.TypeId, _characterItemProperties.Value, _characterItemProperties.Units)
        //                });

        //            }


        //        }


        //    }

        //    //Filling the Associated Spells into the Items.
        //    List<CharacterSpells> _ruleSetAssociatedSpellsVM = new List<CharacterSpells>();
        //    var _characterAssociatedSpellIds = (from _characterAssociatedItems in _context.CharacterItems
        //                                        join _characterItemSpells in _context.CharacterItemSpells on _characterAssociatedItems.CharacterItemId equals _characterItemSpells.CharacterItemId
        //                                        where _characterAssociatedItems.CharacterItemId == ItemId
        //                                        select new
        //                                        {
        //                                            CharacterSpellId = _characterItemSpells.CharacterSpellId
        //                                        }).ToList();

        //    if (_characterAssociatedSpellIds.Count > 0)
        //    {
        //        _characterItems.AssociatedSpells = new List<CharacterSpells>();

        //        foreach (var val in _characterAssociatedSpellIds)
        //        {
        //            _characterItems.AssociatedSpells.Add(GetSpellInventoryBySpellId(val.CharacterSpellId));
        //        }

        //    }

        //    _characterItems = new CharacterItems()
        //    {
        //        //ContentId = Convert.ToInt32(item.ContentId),
        //        CharacterProfileId = Convert.ToInt32(result.CharacterProfileId),
        //        CharacterItemId = result.CharacterItemId,
        //        UserId = result.UserId,
        //        CharacterItemsProperties = _characterItemsproperties
        //    };


        //    return _characterItems;
        //}
        public RuleSetViewModel GetRulesetItemsMetadata(int RulesetId)
        {
            RuleSetViewModel _rulesetViewModel = new RuleSetViewModel();
            var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 1 && x.IsActive == true && x.IsRuleSet == true).Select(
            x => new
            {
                Id = x.Id,
                Name = x.Name,
                Description = x.Description,
                TypeId = x.TypeId,
                Mandatory = x.Mandatory,
                Metadata = x.Metadata,
            }
            ).ToList();

            foreach (var val in _dataQuery)
            {
                ItemProperties _ruleSetItemProperty = new ItemProperties();
                _ruleSetItemProperty.Id = val.Id;
                _ruleSetItemProperty.Name = val.Name;
                _ruleSetItemProperty.Description = val.Description;
                _ruleSetItemProperty.TypeId = val.TypeId;
                _ruleSetItemProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
                _ruleSetItemProperty.Value = (val.Metadata != null && val.Metadata != "") ?
                                             Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata) :
                                             _ruleSetItemProperty.Value = Utility.GetTypeClassMetaData(val.TypeId);
                _rulesetViewModel.RuleSetMetaData.ItemProperties.Add(_ruleSetItemProperty);
            }
            _rulesetViewModel.Rulesetproperty = GetRulesetGeneralSettingsByRulesetId(RulesetId);
            _rulesetViewModel.Spells = GetRulesetSpellsByRulesetId(RulesetId);
            _rulesetViewModel.Abilities = GetRulesetAbilitiesByRulesetId(RulesetId);

            return _rulesetViewModel;
        }

        public Items GetItemByContentId(int ContentId)
        {
            Items _item = new Items();
            List<ItemProperties> itemProperties = new List<ItemProperties>();
            var itemProperty = new List<ItemProperties>();
            var RarityMetadata = _context.RulesetContentTypes.Where(x => x.ContentType == 1 && x.IsActive == true && x.IsRuleSet == true && x.Id == 7).SingleOrDefault().Metadata;
            var _ruleSetItemProperties = (from _itemProperties in _context.RulesetContentTypes
                                          join rpgType in _context.RPGSmithTypes on _itemProperties.TypeId equals rpgType.TypeID
                                          join _itemPropertyValue in _context.Items on _itemProperties.Id equals _itemPropertyValue.ContentTypeId into ps
                                          from _itemPropertyValue in ps.DefaultIfEmpty()
                                          where _itemPropertyValue.ContentId == ContentId
                                          select new
                                          {
                                              Id = _itemPropertyValue.ItemId,
                                              ContentTypeId = _itemPropertyValue.ContentTypeId,
                                              ContentId = _itemPropertyValue.ContentId,
                                              TypeId = _itemProperties.TypeId,
                                              Name = _itemProperties.Name,
                                              Description = _itemProperties.Description,
                                              Mandatory = _itemProperties.Mandatory,
                                              Value = _itemPropertyValue.value,
                                              Units = rpgType.Units,
                                          }).ToList();

            foreach (var _ruleSetItemProperty in _ruleSetItemProperties)
            {
                if (_ruleSetItemProperty.Name == "Rarity")
                {
                    itemProperties.Add(new ItemProperties()
                    {

                        Id = _ruleSetItemProperty.Id,
                        ContentTypeId = _ruleSetItemProperty.ContentTypeId,
                        ContentId = _ruleSetItemProperty.ContentId,
                        TypeId = _ruleSetItemProperty.TypeId,
                        Name = _ruleSetItemProperty.Name,
                        IsMandatory = _ruleSetItemProperty.Mandatory == true ? _ruleSetItemProperty.Mandatory : false,
                        Description = _ruleSetItemProperty.Description,
                        Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetItemProperty.TypeId, _ruleSetItemProperty.Value, RarityMetadata)
                    });
                }
                else
                {

                    if (_ruleSetItemProperty.TypeId == 16)
                    {

                        CustomTypes c1 = new CustomTypes();
                        c1.Calculation = new Calculation();
                        c1.Calculation.formulae = "[Weight]*[Quantity]";
                        //Calculation c1 = new Calculation();
                        //c1.formulae = 
                        itemProperties.Add(new ItemProperties()
                        {
                            Id = _ruleSetItemProperty.Id,
                            ContentTypeId = _ruleSetItemProperty.ContentTypeId,
                            ContentId = _ruleSetItemProperty.ContentId,
                            TypeId = _ruleSetItemProperty.TypeId,
                            Name = _ruleSetItemProperty.Name,
                            IsMandatory = _ruleSetItemProperty.Mandatory == true ? _ruleSetItemProperty.Mandatory : false,
                            Description = _ruleSetItemProperty.Description,
                            Value = c1
                        });

                    }
                    else
                    {
                        itemProperties.Add(new ItemProperties()
                        {
                            Id = _ruleSetItemProperty.Id,
                            ContentTypeId = _ruleSetItemProperty.ContentTypeId,
                            ContentId = _ruleSetItemProperty.ContentId,
                            TypeId = _ruleSetItemProperty.TypeId,
                            Name = _ruleSetItemProperty.Name,
                            IsMandatory = _ruleSetItemProperty.Mandatory == true ? _ruleSetItemProperty.Mandatory : false,
                            Description = _ruleSetItemProperty.Description,
                            Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetItemProperty.TypeId, _ruleSetItemProperty.Value, _ruleSetItemProperty.Units)
                            
                        });
                    }
                }
            }
            _item = new Items()
            {
                ItemProperties = itemProperties
            };

            //Filling the Associated Spells into the Items.
            List<Spells> _ruleSetAssociatedSpellsVM = new List<Spells>();
            var _ruleSetAssociatedSpellContentIds = (from _ruleSetAssociatedItemsContents in _context.RuleSetItemsContents
                                                     join _itemSpells in _context.ItemSpells on _ruleSetAssociatedItemsContents.ContentId equals _itemSpells.ItemId
                                                     where _itemSpells.ItemId == ContentId
                                                     select new
                                                     {
                                                         ContentId = _itemSpells.SpellId
                                                     }).ToList();

            if (_ruleSetAssociatedSpellContentIds.Count > 0)
            {
                _item.AssociatedSpells = new List<Spells>();

                foreach (var _ruleSetAssociatedSpellContentId in _ruleSetAssociatedSpellContentIds)
                {
                    Spells _ruleAssociatedSetSpellVM = new Spells();
                    _ruleAssociatedSetSpellVM.SpellProperties = new List<SpellProperties>();
                    var _ruleSetAssociatedSpellProperties = (from _spellProperties in _context.RulesetContentTypes
                                                             join rpgType in _context.RPGSmithTypes on _spellProperties.TypeId equals rpgType.TypeID
                                                             join _spellPropertyValue in _context.Spells on _spellProperties.Id equals _spellPropertyValue.ContentTypeId into ps
                                                             from _spellPropertyValue in ps.DefaultIfEmpty()
                                                             where _spellPropertyValue.ContentId == _ruleSetAssociatedSpellContentId.ContentId
                                                             select new
                                                             {
                                                                 Id = _spellPropertyValue.SpellId,
                                                                 ContentTypeId = _spellPropertyValue.ContentTypeId,
                                                                 TypeId = _spellProperties.TypeId,
                                                                 Name = _spellProperties.Name,
                                                                 Description = _spellProperties.Description,
                                                                 Mandatory = _spellProperties.Mandatory,
                                                                 Value = _spellPropertyValue.value,
                                                                 Units = rpgType.Units
                                                             }).ToList();

                    foreach (var _ruleSetSpellProperty in _ruleSetAssociatedSpellProperties)
                    {
                        var _spellProperties = new SpellProperties();
                        _spellProperties.Id = _ruleSetSpellProperty.Id;
                        _spellProperties.ContentTypeId = Convert.ToInt32(_ruleSetSpellProperty.ContentTypeId);
                        _spellProperties.TypeId = _ruleSetSpellProperty.TypeId;
                        _spellProperties.Name = _ruleSetSpellProperty.Name;
                        _spellProperties.IsMandatory = _ruleSetSpellProperty.Mandatory == true ? _ruleSetSpellProperty.Mandatory : false;
                        _spellProperties.Description = _ruleSetSpellProperty.Description;
                        _spellProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetSpellProperty.TypeId, _ruleSetSpellProperty.Value, _ruleSetSpellProperty.Units);

                        _ruleAssociatedSetSpellVM.SpellProperties.Add(_spellProperties);
                    }
                    //Declare Model
                    var _spellTileProperties = new SpellProperties();
                    //Getting Spell Tile Properties from db
                    var SpellTileProperties = _context.Spells.Where(p => p.ContentId == _ruleSetAssociatedSpellContentId.ContentId && p.ContentTypeId == null).ToList();
                    foreach (var _spellTileProperty in SpellTileProperties)
                    {
                        // Setting RuleSet Spell Tile Properties
                        _spellTileProperties = SetRuleSetContents(null, _spellTileProperty, null).SpellProperty;
                        _ruleAssociatedSetSpellVM.SpellProperties.Add(_spellTileProperties);
                    }
                    _item.AssociatedSpells.Add(_ruleAssociatedSetSpellVM);
                }

            }

            //Filling the Associated Abilities into the Items.
            List<Spells> _ruleSetAssociatedAbilitiesVM = new List<Spells>();
            var _ruleSetAssociatedAbilityContentIds = (from _ruleSetAssociatedItemsContents in _context.RuleSetItemsContents
                                                       join _itemAbilities in _context.ItemAbilities on _ruleSetAssociatedItemsContents.ContentId equals _itemAbilities.ItemId
                                                       where _itemAbilities.ItemId == ContentId
                                                       select new
                                                       {
                                                           ContentId = _itemAbilities.AbilityId
                                                       }).ToList();

            if (_ruleSetAssociatedAbilityContentIds.Count > 0)
            {
                _item.AssociatedAbilities = new List<Abilities>();

                foreach (var _ruleSetAssociatedAbilityContentId in _ruleSetAssociatedAbilityContentIds)
                {
                    Abilities _ruleAssociatedSetAbilityVM = new Abilities();
                    _ruleAssociatedSetAbilityVM.AbilityProperties = new List<AbilityProperties>();
                    var _ruleSetAssociatedAbilityProperties = (from _abilityProperties in _context.RulesetContentTypes
                                                               join rpgType in _context.RPGSmithTypes on _abilityProperties.TypeId equals rpgType.TypeID
                                                               join _abilityPropertyValue in _context.Abilities on _abilityProperties.Id equals _abilityPropertyValue.ContentTypeId into ps
                                                               from _abilityPropertyValue in ps.DefaultIfEmpty()
                                                               where _abilityPropertyValue.ContentId == _ruleSetAssociatedAbilityContentId.ContentId
                                                               select new
                                                               {
                                                                   Id = _abilityPropertyValue.AbilityId,
                                                                   ContentTypeId = _abilityPropertyValue.ContentTypeId,
                                                                   TypeId = _abilityProperties.TypeId,
                                                                   Name = _abilityProperties.Name,
                                                                   Description = _abilityProperties.Description,
                                                                   Mandatory = _abilityProperties.Mandatory,
                                                                   Value = _abilityPropertyValue.value,
                                                                   Units = rpgType.Units
                                                               }).ToList();

                    foreach (var _ruleSetAbilityProperty in _ruleSetAssociatedAbilityProperties)
                    {
                        var _abilityProperties = new AbilityProperties();
                        _abilityProperties.Id = _ruleSetAbilityProperty.Id;
                        _abilityProperties.ContentTypeId = Convert.ToInt32(_ruleSetAbilityProperty.ContentTypeId);
                        _abilityProperties.TypeId = _ruleSetAbilityProperty.TypeId;
                        _abilityProperties.Name = _ruleSetAbilityProperty.Name;
                        _abilityProperties.IsMandatory = _ruleSetAbilityProperty.Mandatory == true ? _ruleSetAbilityProperty.Mandatory : false;
                        _abilityProperties.Description = _ruleSetAbilityProperty.Description;
                        _abilityProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetAbilityProperty.TypeId, _ruleSetAbilityProperty.Value, _ruleSetAbilityProperty.Units);

                        _ruleAssociatedSetAbilityVM.AbilityProperties.Add(_abilityProperties);
                    }
                    //Declare Model
                    var _abilityTileProperties = new AbilityProperties();
                    //Getting Spell Tile Properties from db
                    var AbilityTileProperties = _context.Abilities.Where(p => p.ContentId == _ruleSetAssociatedAbilityContentId.ContentId && p.ContentTypeId == null).ToList();
                    foreach (var _abilityTileProperty in AbilityTileProperties)
                    {
                        // Setting RuleSet Spell Tile Properties
                        _abilityTileProperties = SetRuleSetContents(null, null, _abilityTileProperty).AbilityProperty;
                        _ruleAssociatedSetAbilityVM.AbilityProperties.Add(_abilityTileProperties);
                    }
                    _item.AssociatedAbilities.Add(_ruleAssociatedSetAbilityVM);
                }

            }

            //Declare Model
            var _itemTileProperties = new ItemProperties();
            //Getting Item Tile Properties from db
            var ItemTileProperties = _context.Items.Where(p => p.ContentId == ContentId && p.ContentTypeId == null).ToList();
            foreach (var _itemTileProperty in ItemTileProperties)
            {
                // Setting RuleSet Item Tile Properties
                _itemTileProperties = SetRuleSetContents(_itemTileProperty, null, null).ItemProperty;
                _item.ItemProperties.Add(_itemTileProperties);
            }
            //_item = GetRulesetItemsMetadata(_itemProperties.Id);
            return _item;
        }

           

            public ServiceResponseModel CreateRulesetItems(List<Items> _rulesetItems, List<HttpPostedFileBase> ClientImages, string userId)
        {

            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";
                    List<Items> _rulesetItemsCreated = new List<Items>();

                    Errors = ValidationForCreateRulesetItems(_rulesetItems, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        Hashtable clientImagesPath = new Hashtable();

                        List<string> clientImagesPathForDelete = new List<string>();
                        _rulesetItems = _rulesetItems == null ? new List<Items>() : _rulesetItems;
                        if (_rulesetItems != null)
                        {
                            var VirtualPath = string.Empty;
                            foreach (var item in _rulesetItems)
                            {
                                RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                                if (item.ItemProperties != null)
                                {
                                    //RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                                    _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                                    _ruleSetItemsContent.RulesetID = item.RulesetId;
                                    _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                                    foreach (var _itemProperty in item.ItemProperties)
                                    {
                                        Item _item = new Item();
                                        XmlDocument _tempitemPropertyValue = new XmlDocument();
                                        if (_itemProperty.Id != 0)
                                        {
                                            _item.ContentTypeId = _itemProperty.Id;
                                            _item.ContentId = _ruleSetItemsContent.ContentId;
                                            _item.IsStatic = true;
                                            if (_itemProperty.Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = _itemProperty.Value;
                                                SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                                _itemProperty.Value = _temprulesetPropertyValueForImagePath;

                                                _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperty.TypeId, _itemProperty.Value, "");

                                                if (_tempitemPropertyValue != null)
                                                {
                                                    _item.value = _tempitemPropertyValue.OuterXml;
                                                }
                                            }

                                            _ruleSetItemsContent.Items.Add(_item);
                                        }
                                        _context.SaveChanges();
                                    }
                                }
                                //Adding the associated spells to the items in the rule set.
                                foreach (var ruleSetItemViewModel in _rulesetItems)
                                {
                                    ItemSpell _itemSpellContext = new ItemSpell();
                                    if (ruleSetItemViewModel.AssociatedSpells != null)
                                    {
                                        foreach (var ruleSetItemViewModelAssociatedSpell in ruleSetItemViewModel.AssociatedSpells)
                                        {

                                            var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                            foreach (var _itemContext in _itemsContext)
                                            {

                                                int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                                string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                                CustomTypes _tempItemNameClient = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                                if (_tempItemNameClient.Text.value == _tempItemName.Text.value)
                                                {
                                                    //_itemSpellContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemSpellContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());

                                                }
                                            }

                                            var _tempSpells = _context.RuleSetItemsContents.Where(x => x.Type == 2 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Spells);

                                            foreach (var _tempSpell in _tempSpells)
                                            {

                                                int? _spellContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(x => x.TypeId).FirstOrDefault();

                                                string _spellContentTypeValueXML = _tempSpell.Where(x => x.ContentTypeId == _spellContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempSpellName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _spellContentTypeValueXML, null);

                                                string _tempSpellNameStr = ruleSetItemViewModelAssociatedSpell.SpellProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                                if (_tempSpellNameStr == _tempSpellName.Text.value)
                                                {
                                                    //_itemSpellContext.SpellId = _tempSpell.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemSpellContext.SpellId = Convert.ToInt32(_tempSpell.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            _context.ItemSpells.Add(_itemSpellContext);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                //Adding the associated abilities to the items in the rule set.
                                foreach (var ruleSetItemViewModel in _rulesetItems)
                                {
                                    ItemAbility _itemAbilityContext = new ItemAbility();
                                    if (ruleSetItemViewModel.AssociatedAbilities != null)
                                    {
                                        foreach (var ruleSetItemViewModelAssociatedAbility in ruleSetItemViewModel.AssociatedAbilities)
                                        {

                                            var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                            foreach (var _itemContext in _itemsContext)
                                            {

                                                int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                                string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                                CustomTypes _tempItemNameViewModel = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                                if (_tempItemNameViewModel.Text.value == _tempItemName.Text.value)
                                                {
                                                    //_itemAbilityContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemAbilityContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            var _tempAbilities = _context.RuleSetItemsContents.Where(x => x.Type == 3 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Abilities);

                                            foreach (var _tempAbility in _tempAbilities)
                                            {

                                                int? _abilityContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(x => x.TypeId).FirstOrDefault();

                                                string _abilityContentTypeValueXML = _tempAbility.Where(x => x.ContentTypeId == _abilityContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempAbilityName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _abilityContentTypeValueXML, null);

                                                string _tempabilityNameStr = ruleSetItemViewModelAssociatedAbility.AbilityProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                                if (_tempabilityNameStr == _tempAbilityName.Text.value)
                                                {
                                                    //_itemAbilityContext.AbilityId = _tempAbility.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemAbilityContext.AbilityId = Convert.ToInt32(_tempAbility.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            _context.ItemAbilities.Add(_itemAbilityContext);
                                            _context.SaveChanges();
                                        }
                                    }
                                }

                                int _rowseffecteditemspell = _context.SaveChanges();

                                RuleSetViewModel RulesetModel = new RuleSetViewModel();
                                //Saving All 7 Type of Tiles For Items,Spells,Abilities
                                //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);

                                SaveRuleSetClientImages(clientImagesPath, ClientImages);

                                _rulesetItemsCreated.Add(GetItemByContentId(_ruleSetItemsContent.ContentId));
                            }
                        }
                        _serviceResponseModel.Result = _rulesetItemsCreated;
                        _serviceResponseModel.StatusCode = 200;
                        //  return _serviceResponseModel;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;

        }

        public ServiceResponseModel UpdateRulesetItems(List<Items> _updateItems, List<HttpPostedFileBase> ClientImages, string userId)
        {

            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForUpdateRulesetItems(_updateItems, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {

                        Hashtable clientImagesPath = new Hashtable();
                        List<string> rulesetpropertyDeleteImage = new List<string>();
                        var rulesetId = _updateItems[0].RulesetId;
                        List<Items> _rulesetItemsCreated = new List<Items>();

                        if (_updateItems != null)
                        {
                            var virtualPath = string.Empty;
                            foreach (var _item in _updateItems)
                            {

                                RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                                if (_item.ItemProperties != null)
                                {
                                    var ItemPropertiesExceptTiles = _item.ItemProperties[0].tile != null ? _item.ItemProperties.Where(p => p.tile.Value == null).ToList() : _item.ItemProperties.Where(p => p.tile == null).ToList();
                                    if (_item.ItemProperties[0].ContentId == null || _item.ItemProperties[0].ContentId == 0)
                                    {
                                        _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                                        _ruleSetItemsContent.RulesetID = _item.RulesetId;
                                        _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                                        foreach (var _itemProperties in ItemPropertiesExceptTiles)
                                        {
                                            Item Item = new Item();
                                            XmlDocument _tempitemPropertyValue = new XmlDocument();
                                            var VirtualPath = string.Empty;
                                            Item.IsStatic = true;
                                            Item.ContentTypeId = (_itemProperties.ContentId == null || _itemProperties.ContentTypeId == null)
                                                                   ? _itemProperties.Id : _itemProperties.ContentTypeId;

                                            if (_itemProperties.Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = _itemProperties.Value;
                                                SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, -1);
                                                _itemProperties.Value = _temprulesetPropertyValueForImagePath;

                                                _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperties.TypeId, _itemProperties.Value, "");


                                                if (_tempitemPropertyValue != null)
                                                {
                                                    Item.value = _tempitemPropertyValue.OuterXml;
                                                }
                                            }
                                            _ruleSetItemsContent.Items.Add(Item);
                                        }
                                        _context.SaveChanges();
                                    }
                                    else if (_item.ItemProperties[0].ContentId != null || _item.ItemProperties[0].ContentId != 0)
                                    {
                                        int? _rulesetItemContentId = _item.ItemProperties[0].ContentId;

                                        _ruleSetItemsContent = _context.RuleSetItemsContents.Where(p => p.RulesetID == _item.RulesetId && p.Type == 1 && p.ContentId == _rulesetItemContentId).FirstOrDefault();
                                        _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                                        _ruleSetItemsContent.RulesetID = _item.RulesetId;
                                        _ruleSetItemsContent.ContentId = _ruleSetItemsContent.ContentId;
                                        var ItemContentId = _ruleSetItemsContent.ContentId;
                                        var Items = _context.Items.Where(p => p.ContentId == ItemContentId).ToList();
                                        Items = Items.Where(p => p.ContentTypeId != null).ToList();
                                        for (var k = 0; k < Items.Count; k++)
                                        {
                                            Item _Item = new Item();
                                            XmlDocument _tempitemPropertyValue = new XmlDocument();
                                            //_item.ContentId = Items[k].ContentId;
                                            //_item.ContentTypeId = Items[k].ContentTypeId;
                                            //_item.ItemId = Items[k].ItemId;
                                            var ItemImagePath = string.Empty;

                                            CustomTypes _temprulesetPropertyValueForImagePath = _item.ItemProperties[k].Value;
                                            SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, Items[k].ItemId);
                                            _item.ItemProperties[k].Value = _temprulesetPropertyValueForImagePath;

                                            _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_item.ItemProperties[k].TypeId, _item.ItemProperties[k].Value, "");


                                            if (_item.ItemProperties[k].Value != null)
                                            {
                                                if (_tempitemPropertyValue != null)
                                                {
                                                    Items[k].value = _tempitemPropertyValue.OuterXml;
                                                }
                                            }

                                        }

                                        _context.SaveChanges();
                                    }
                                }

                                _context.SaveChanges();
                                //Deleting the Associated Spells in the Items.

                                var _itemSpells = (from ruleset in _context.RuleSets
                                                   join rulesetitemcontent in _context.RuleSetItemsContents on ruleset.RulesetID equals rulesetitemcontent.RulesetID
                                                   join rulesetitemspell in _context.ItemSpells on rulesetitemcontent.ContentId equals rulesetitemspell.ItemId
                                                   where ruleset.RulesetID == rulesetId
                                                   select new { ItemId = rulesetitemspell.ItemId }).ToList();

                                foreach (var val in _itemSpells)
                                {
                                    _context.ItemSpells.RemoveRange(_context.ItemSpells.Where(x => x.ItemId == val.ItemId));
                                    _context.SaveChanges();
                                }

                                //Adding the associated spells to the items in the rule set.
                                foreach (var ruleSetItemViewModel in _updateItems)
                                {
                                    ItemSpell _itemSpellContext = new ItemSpell();
                                    if (ruleSetItemViewModel.AssociatedSpells != null)
                                    {
                                        foreach (var ruleSetItemViewModelAssociatedSpell in ruleSetItemViewModel.AssociatedSpells)
                                        {

                                            var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                            foreach (var _itemContext in _itemsContext)
                                            {

                                                int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                                string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                                CustomTypes _tempItemNameClient = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                                if (_tempItemNameClient.Text.value == _tempItemName.Text.value)
                                                {
                                                    //_itemSpellContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemSpellContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            var _tempSpells = _context.RuleSetItemsContents.Where(x => x.Type == 2 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Spells);

                                            foreach (var _tempSpell in _tempSpells)
                                            {

                                                int? _spellContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(x => x.TypeId).FirstOrDefault();

                                                string _spellContentTypeValueXML = _tempSpell.Where(x => x.ContentTypeId == _spellContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempSpellName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _spellContentTypeValueXML, null);

                                                string _tempSpellNameStr = ruleSetItemViewModelAssociatedSpell.SpellProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                                if (_tempSpellNameStr == _tempSpellName.Text.value)
                                                {
                                                    //_itemSpellContext.SpellId = _tempSpell.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemSpellContext.SpellId = Convert.ToInt32(_tempSpell.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            _context.ItemSpells.Add(_itemSpellContext);
                                            _context.SaveChanges();
                                        }
                                    }
                                }

                                //Deleting the Associated Abilities in the Items.
                                var _itemAbilities = (from ruleset in _context.RuleSets
                                                      join rulesetitemcontent in _context.RuleSetItemsContents on ruleset.RulesetID equals rulesetitemcontent.RulesetID
                                                      join rulesetitemability in _context.ItemSpells on rulesetitemcontent.ContentId equals rulesetitemability.ItemId
                                                      where ruleset.RulesetID == rulesetId
                                                      select new { ItemId = rulesetitemability.ItemId }).ToList();

                                foreach (var val in _itemAbilities)
                                {
                                    _context.ItemAbilities.RemoveRange(_context.ItemAbilities.Where(x => x.ItemId == val.ItemId));
                                    _context.SaveChanges();
                                }

                                //Adding the associated abilities to the items in the rule set.
                                foreach (var ruleSetItemViewModel in _updateItems)
                                {
                                    ItemAbility _itemAbilityContext = new ItemAbility();
                                    if (ruleSetItemViewModel.AssociatedAbilities != null)
                                    {
                                        foreach (var ruleSetItemViewModelAssociatedAbility in ruleSetItemViewModel.AssociatedAbilities)
                                        {

                                            var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                            foreach (var _itemContext in _itemsContext)
                                            {

                                                int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                                string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                                CustomTypes _tempItemNameViewModel = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                                if (_tempItemNameViewModel.Text.value == _tempItemName.Text.value)
                                                {
                                                    //_itemAbilityContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemAbilityContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            var _tempAbilities = _context.RuleSetItemsContents.Where(x => x.Type == 3 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Abilities);

                                            foreach (var _tempAbility in _tempAbilities)
                                            {

                                                int? _abilityContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(x => x.TypeId).FirstOrDefault();

                                                string _abilityContentTypeValueXML = _tempAbility.Where(x => x.ContentTypeId == _abilityContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempAbilityName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _abilityContentTypeValueXML, null);

                                                string _tempabilityNameStr = ruleSetItemViewModelAssociatedAbility.AbilityProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                                if (_tempabilityNameStr == _tempAbilityName.Text.value)
                                                {
                                                    //_itemAbilityContext.AbilityId = _tempAbility.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemAbilityContext.AbilityId = Convert.ToInt32(_tempAbility.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            _context.ItemAbilities.Add(_itemAbilityContext);
                                            _context.SaveChanges();
                                        }
                                    }
                                }

                                _rulesetItemsCreated.Add(GetItemByContentId(_ruleSetItemsContent.ContentId));

                            }

                        }

                        //Saving All 7 Type of Tiles For Items,Spells,Abilities
                        //SaveRuleSetContentsTiles(UpdateModel, _ruleSet);

                        SaveRuleSetClientImages(clientImagesPath, ClientImages);

                        DeleteOldRuleSetClientImages(rulesetpropertyDeleteImage);

                        _serviceResponseModel.Result = _rulesetItemsCreated;

                        //return _serviceResponseModel;
                        _serviceResponseModel.StatusCode = 200;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;

        }

        public ServiceResponseModel CopyRulesetItems(List<Items> _copyItems, List<HttpPostedFileBase> ClientImages, string userId)
        {

            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForCreateRulesetItems(_copyItems, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {

                        List<Items> _rulesetItemsCreated = new List<Items>();

                        Hashtable clientImagesPath = new Hashtable();
                        List<string> clientImagesPathForDelete = new List<string>();
                        _copyItems = _copyItems == null ? new List<Items>() : _copyItems;
                        if (_copyItems != null)
                        {
                            var VirtualPath = string.Empty;
                            foreach (var item in _copyItems)
                            {
                                RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                                if (item.ItemProperties != null)
                                {

                                    //RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                                    _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                                    _ruleSetItemsContent.RulesetID = item.RulesetId;
                                    _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                                    _context.SaveChanges();
                                    foreach (var _itemProperty in item.ItemProperties)
                                    {
                                        Item _item = new Item();
                                        XmlDocument _tempitemPropertyValue = new XmlDocument();
                                        if (_itemProperty.Id != 0)
                                        {
                                            _item.ContentTypeId = _itemProperty.ContentTypeId;
                                            _item.ContentId = _ruleSetItemsContent.ContentId;
                                            _item.IsStatic = true;
                                            if (_itemProperty.Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = _itemProperty.Value;
                                                if (_itemProperty.Value.Image != null && _itemProperty.Value.Image.image != null && _itemProperty.Value.Image.image.IndexOf("wwwroot") > 0)
                                                {
                                                    string RuleSetItemimagephysicalmappathsource = HttpContext.Current.Server.MapPath(_itemProperty.Value.Image.image);
                                                    string virtualPathDest = "/wwwroot/images/RuleSetItemImages/" + item.ItemProperties[0].Name + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                                    string RuleSetItemimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                                    if (File.Exists(RuleSetItemimagephysicalmappathsource))
                                                    {
                                                        File.Copy(RuleSetItemimagephysicalmappathsource, RuleSetItemimagephysicalmappathdest);
                                                    }
                                                    _temprulesetPropertyValueForImagePath.Image.image = virtualPathDest;
                                                }
                                                SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                                _itemProperty.Value = _temprulesetPropertyValueForImagePath;

                                                _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperty.TypeId, _itemProperty.Value, "");

                                                if (_tempitemPropertyValue != null)
                                                {
                                                    _item.value = _tempitemPropertyValue.OuterXml;
                                                }
                                            }

                                            _ruleSetItemsContent.Items.Add(_item);
                                        }
                                        _context.SaveChanges();
                                    }
                                }
                                //Adding the associated spells to the items in the rule set.
                                foreach (var ruleSetItemViewModel in _copyItems)
                                {
                                    ItemSpell _itemSpellContext = new ItemSpell();
                                    if (ruleSetItemViewModel.AssociatedSpells != null)
                                    {
                                        foreach (var ruleSetItemViewModelAssociatedSpell in ruleSetItemViewModel.AssociatedSpells)
                                        {

                                            var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                            foreach (var _itemContext in _itemsContext)
                                            {

                                                int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                                string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                                CustomTypes _tempItemNameClient = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                                if (_tempItemNameClient.Text.value == _tempItemName.Text.value)
                                                {
                                                    //_itemSpellContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemSpellContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            var _tempSpells = _context.RuleSetItemsContents.Where(x => x.Type == 2 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Spells);

                                            foreach (var _tempSpell in _tempSpells)
                                            {

                                                int? _spellContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(x => x.TypeId).FirstOrDefault();

                                                string _spellContentTypeValueXML = _tempSpell.Where(x => x.ContentTypeId == _spellContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempSpellName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _spellContentTypeValueXML, null);

                                                string _tempSpellNameStr = ruleSetItemViewModelAssociatedSpell.SpellProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                                if (_tempSpellNameStr == _tempSpellName.Text.value)
                                                {
                                                    //_itemSpellContext.SpellId = _tempSpell.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemSpellContext.SpellId = Convert.ToInt32(_tempSpell.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            _context.ItemSpells.Add(_itemSpellContext);
                                            _context.SaveChanges();
                                        }
                                    }
                                }
                                //Adding the associated abilities to the items in the rule set.
                                foreach (var ruleSetItemViewModel in _copyItems)
                                {
                                    ItemAbility _itemAbilityContext = new ItemAbility();
                                    if (ruleSetItemViewModel.AssociatedAbilities != null)
                                    {
                                        foreach (var ruleSetItemViewModelAssociatedAbility in ruleSetItemViewModel.AssociatedAbilities)
                                        {

                                            var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                            foreach (var _itemContext in _itemsContext)
                                            {

                                                int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                                string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                                CustomTypes _tempItemNameViewModel = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                                if (_tempItemNameViewModel.Text.value == _tempItemName.Text.value)
                                                {
                                                    //_itemAbilityContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemAbilityContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            var _tempAbilities = _context.RuleSetItemsContents.Where(x => x.Type == 3 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Abilities);

                                            foreach (var _tempAbility in _tempAbilities)
                                            {

                                                int? _abilityContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(y => y.Id).FirstOrDefault();

                                                int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(x => x.TypeId).FirstOrDefault();

                                                string _abilityContentTypeValueXML = _tempAbility.Where(x => x.ContentTypeId == _abilityContentTypeId).Select(x => x.value).FirstOrDefault();

                                                CustomTypes _tempAbilityName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _abilityContentTypeValueXML, null);

                                                string _tempabilityNameStr = ruleSetItemViewModelAssociatedAbility.AbilityProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                                if (_tempabilityNameStr == _tempAbilityName.Text.value)
                                                {
                                                    //_itemAbilityContext.AbilityId = _tempAbility.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                                    _itemAbilityContext.AbilityId = Convert.ToInt32(_tempAbility.Select(x => x.ContentId).FirstOrDefault());
                                                }
                                            }

                                            _context.ItemAbilities.Add(_itemAbilityContext);
                                            _context.SaveChanges();
                                        }
                                    }
                                }

                                //int _rowseffecteditemspell = _context.SaveChanges();

                                RuleSetViewModel RulesetModel = new RuleSetViewModel();
                                //Saving All 7 Type of Tiles For Items,Spells,Abilities
                                //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);

                                SaveRuleSetClientImages(clientImagesPath, ClientImages);

                                _rulesetItemsCreated.Add(GetItemByContentId(_ruleSetItemsContent.ContentId));
                            }
                        }
                        _serviceResponseModel.Result = _rulesetItemsCreated;

                        //return _serviceResponseModel;
                        _serviceResponseModel.StatusCode = 200;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;

        }

        public ServiceResponseModel DeleteItem(List<Items> deleteitem, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForDeleteRulesetItem(deleteitem, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {


                        foreach (var items in deleteitem)
                        {
                            var contentid = items.ItemProperties[0].ContentId;
                            var deleterulesetitemspells = _context.ItemSpells.Where(W => W.ItemId == contentid).ToList();

                            foreach (var itemspell in deleterulesetitemspells)
                            {
                                _context.ItemSpells.Remove(itemspell);
                            }

                            var deleterulesetitemabilities = _context.ItemAbilities.Where(W => W.ItemId == contentid).ToList();

                            foreach (var itemability in deleterulesetitemabilities)
                            {
                                _context.ItemAbilities.Remove(itemability);
                            }

                            var deleteitems = _context.Items.Where(p => p.ContentId == contentid).ToList();

                            foreach (var item in deleteitems)
                            {
                                _context.Items.Remove(item);
                            }

                            var deletecontentid = _context.RuleSetItemsContents.Where(p => p.ContentId == contentid).FirstOrDefault();
                            _context.RuleSetItemsContents.Remove(deletecontentid);
                            _context.SaveChanges();

                        }

                        _serviceResponseModel.StatusCode = 200;
                        _serviceResponseModel.Result = deleteitem;
                        //_serviceResponseModel.Result = GetRulesetItemsByRulesetId(deleteitem[0].RulesetId);


                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;
        }

        // Validations for Ruleset Items
        public string ValidationForCreateRulesetItems(List<Items> _rulesetItems, string userId, out int resultStatus)
        {

            string Errors = "";
            resultStatus = 0;

            if (_rulesetItems.Count > 0)
            {

                foreach (var item in _rulesetItems)
                {
                    string ItemName = "";

                    if (item.ItemProperties != null)
                    {

                        var FileterName = "Name";
                        var FileterTypeId = 1;
                        var itemData = item.ItemProperties.Where(x => x.Name == FileterName && x.TypeId == FileterTypeId); //.Select(x => x.Name ="Name");
                        //var itemData = item.ItemProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();

                        foreach (var _itemData in itemData)
                        {
                            ItemName = _itemData.Value.Text.value;
                        }


                        List<Items> _itemsList = GetRulesetItemsByRulesetId(item.RulesetId);
                        foreach (var _item in _itemsList)
                        {
                            string FileterName1 = "Name";
                            int FileterTypeId1 = 1;
                            List<ItemProperties> _itemPropertiesdata = _item.ItemProperties.Where(x => x.Name == FileterName1 && x.TypeId == FileterTypeId1).ToList();

                            foreach (var _itemProperties in _itemPropertiesdata)
                            {
                                if (ItemName == _itemProperties.Value.Text.value)
                                {
                                    // Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                    resultStatus = 1;
                                }
                            }

                        }

                        if (resultStatus == 1)
                        {
                            Errors = Errors + ItemName + " already Exist,";
                        }


                        foreach (var _itemProperties in item.ItemProperties)
                        {
                            if (_itemProperties.IsMandatory == true && _itemProperties.Value != null)
                            {
                                switch (_itemProperties.TypeId)
                                {
                                    case 1:
                                        if (_itemProperties.Value.Text.value == "" || _itemProperties.Value.Text.value == null)
                                        {
                                            Errors = Errors + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            ItemName = _itemProperties.Value.Text.value;
                                        }
                                        break;
                                    case 2:
                                        if (_itemProperties.Value.Choices.selectedchoice == "" || _itemProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_itemProperties.Value.OnOrOff.value == "" || _itemProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_itemProperties.Value.YesOrNo.value == "" || _itemProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_itemProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _itemProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_itemProperties.Value.YesOrNo.value == "" || _itemProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_itemProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero <br/>";
                                            //Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required <br/>";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_itemProperties.Value.Image.image == "" || _itemProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_itemProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            // Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required <br/>";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_itemProperties.Value.Volume.units.selectedUnit == "" || _itemProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_itemProperties.Value.Number.value < 0)
                                        {
                                            //bool result = _itemProperties.Value.DefaultDice.value.Any(x => !char.IsLetter(x));
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required <br/>";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_itemProperties.Value.DefaultDice.value == "" || _itemProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_itemProperties.Value.Calculation.formulae == "" || _itemProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_itemProperties.Value.Text.value == "" || _itemProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_itemProperties.IsMandatory == true && _itemProperties.Value == null)
                            {
                                Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                resultStatus = 1;
                            }

                            if ((_itemProperties.TypeId == 7 || _itemProperties.TypeId == 12 || _itemProperties.TypeId == 14) && _itemProperties.IsMandatory == false && _itemProperties.Value != null)
                            {

                                switch (_itemProperties.TypeId)
                                {
                                    case 7:
                                        if (_itemProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_itemProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_itemProperties.Value.Number.value < 0)
                                        {

                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }

                        }
                    }
                }


            }

            return Errors;


        }
        public string ValidationForUpdateRulesetItems(List<Items> _rulesetItems, string userId, out int resultStatus)
        {

            string Errors = "";
            resultStatus = 0;

            if (_rulesetItems.Count > 0)
            {

                foreach (var item in _rulesetItems)
                {
                    string ItemName = "";

                    if (item.ItemProperties != null)
                    {
                        //var FileterName = "Name";
                        //var FileterTypeId = 1;
                        //var itemData = item.ItemProperties.Where(x => x.Name.ToLower() == FileterName.ToLower() && x.TypeId == FileterTypeId); //.Select(x => x.Name ="Name");
                        var itemData = item.ItemProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();

                        foreach (var _itemData in itemData)
                        {
                            ItemName = _itemData.Value.Text.value;
                        }

                        foreach (var _itemProperties in item.ItemProperties)
                        {


                            if (_itemProperties.IsMandatory == true && _itemProperties.Value != null)
                            {
                                switch (_itemProperties.TypeId)
                                {
                                    case 1:
                                        if (_itemProperties.Value.Text.value == "" || _itemProperties.Value.Text.value == null)
                                        {
                                            Errors = Errors + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            ItemName = _itemProperties.Value.Text.value;
                                        }
                                        break;
                                    case 2:
                                        if (_itemProperties.Value.Choices.selectedchoice == "" || _itemProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_itemProperties.Value.OnOrOff.value == "" || _itemProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_itemProperties.Value.YesOrNo.value == "" || _itemProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_itemProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _itemProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_itemProperties.Value.YesOrNo.value == "" || _itemProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_itemProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero <br/>";
                                            //Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required <br/>";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_itemProperties.Value.Image.image == "" || _itemProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_itemProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            // Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required <br/>";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_itemProperties.Value.Volume.units.selectedUnit == "" || _itemProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_itemProperties.Value.Number.value < 0)
                                        {
                                            //bool result = _itemProperties.Value.DefaultDice.value.Any(x => !char.IsLetter(x));
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required <br/>";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_itemProperties.Value.DefaultDice.value == "" || _itemProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_itemProperties.Value.Calculation.formulae == "" || _itemProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_itemProperties.Value.Text.value == "" || _itemProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_itemProperties.IsMandatory == true && _itemProperties.Value == null)
                            {
                                Errors = Errors + ItemName + "_" + _itemProperties.Name + " Required,";
                                resultStatus = 1;
                            }

                            if ((_itemProperties.TypeId == 7 || _itemProperties.TypeId == 12 || _itemProperties.TypeId == 14) && _itemProperties.IsMandatory == false && _itemProperties.Value != null)
                            {

                                switch (_itemProperties.TypeId)
                                {
                                    case 7:
                                        if (_itemProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_itemProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_itemProperties.Value.Number.value < 0)
                                        {

                                            Errors = Errors + ItemName + "_" + _itemProperties.Name + " should be greater than Zero";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }

                        }
                    }
                }


            }

            return Errors;


        }
        public string ValidationForDeleteRulesetItem(List<Items> deleteitem, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            int contentid = 0;
            var _rulesetId = deleteitem[0].RulesetId;
            int ContentType = 1;
            foreach (var items in deleteitem)
            {
                contentid = Convert.ToInt32(items.ItemProperties[0].ContentId);
            }

            List<Item> ItemsList = (from _items in _context.Items
                                    join _ruleSetItemsContents in _context.RuleSetItemsContents on _items.ContentId equals _ruleSetItemsContents.ContentId
                                    join _RuleSets in _context.RuleSets on _ruleSetItemsContents.RulesetID equals _RuleSets.RulesetID
                                    where _ruleSetItemsContents.RulesetID == _rulesetId
                                    && _ruleSetItemsContents.Type == ContentType
                                    && _ruleSetItemsContents.ContentId == contentid
                                    && _RuleSets.UserId == userId
                                    select _items
                      ).ToList();

            if (ItemsList.Count == 0)
            {
                Errors = Errors + "Please Select Valid Item for Delete \\n";
                resultStatus = 1;
            }

            return Errors;
        }

        // Bakup for Ruleset Items
        public ServiceResponseModel CreateRulesetItems_Bkp(List<Items> _rulesetItems, List<HttpPostedFileBase> ClientImages, string userId)
        {
            Hashtable clientImagesPath = new Hashtable();

            List<string> clientImagesPathForDelete = new List<string>();
            _rulesetItems = _rulesetItems == null ? new List<Items>() : _rulesetItems;
            if (_rulesetItems != null)
            {
                var VirtualPath = string.Empty;
                foreach (var item in _rulesetItems)
                {
                    if (item.ItemProperties != null)
                    {

                        RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                        _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                        _ruleSetItemsContent.RulesetID = item.RulesetId;
                        _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                        foreach (var _itemProperty in item.ItemProperties)
                        {
                            Item _item = new Item();
                            XmlDocument _tempitemPropertyValue = new XmlDocument();
                            if (_itemProperty.Id != 0)
                            {
                                _item.ContentTypeId = _itemProperty.Id;
                                _item.ContentId = _ruleSetItemsContent.ContentId;
                                _item.IsStatic = true;
                                if (_itemProperty.Value != null)
                                {
                                    CustomTypes _temprulesetPropertyValueForImagePath = _itemProperty.Value;
                                    SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                    _itemProperty.Value = _temprulesetPropertyValueForImagePath;

                                    _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperty.TypeId, _itemProperty.Value, "");

                                    if (_tempitemPropertyValue != null)
                                    {
                                        _item.value = _tempitemPropertyValue.OuterXml;
                                    }
                                }

                                _ruleSetItemsContent.Items.Add(_item);
                            }
                            _context.SaveChanges();
                        }
                    }
                    //Adding the associated spells to the items in the rule set.
                    foreach (var ruleSetItemViewModel in _rulesetItems)
                    {
                        ItemSpell _itemSpellContext = new ItemSpell();
                        if (ruleSetItemViewModel.AssociatedSpells != null)
                        {
                            foreach (var ruleSetItemViewModelAssociatedSpell in ruleSetItemViewModel.AssociatedSpells)
                            {

                                var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1).Select(x => x.Items);

                                foreach (var _itemContext in _itemsContext)
                                {

                                    int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                    string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                    CustomTypes _tempItemNameClient = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                    if (_tempItemNameClient.Text.value == _tempItemName.Text.value)
                                    {
                                        _itemSpellContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                    }
                                }

                                var _tempSpells = _context.RuleSetItemsContents.Where(x => x.Type == 2).Select(x => x.Spells);

                                foreach (var _tempSpell in _tempSpells)
                                {

                                    int? _spellContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(x => x.TypeId).FirstOrDefault();

                                    string _spellContentTypeValueXML = _tempSpell.Where(x => x.ContentTypeId == _spellContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempSpellName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _spellContentTypeValueXML, null);

                                    string _tempSpellNameStr = ruleSetItemViewModelAssociatedSpell.SpellProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                    if (_tempSpellNameStr == _tempSpellName.Text.value)
                                    {
                                        _itemSpellContext.SpellId = _tempSpell.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                    }
                                }

                                _context.ItemSpells.Add(_itemSpellContext);
                                _context.SaveChanges();
                            }
                        }
                    }
                    //Adding the associated abilities to the items in the rule set.
                    foreach (var ruleSetItemViewModel in _rulesetItems)
                    {
                        ItemAbility _itemAbilityContext = new ItemAbility();
                        if (ruleSetItemViewModel.AssociatedAbilities != null)
                        {
                            foreach (var ruleSetItemViewModelAssociatedAbility in ruleSetItemViewModel.AssociatedAbilities)
                            {

                                var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1).Select(x => x.Items);

                                foreach (var _itemContext in _itemsContext)
                                {

                                    int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                    string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                    CustomTypes _tempItemNameViewModel = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                    if (_tempItemNameViewModel.Text.value == _tempItemName.Text.value)
                                    {
                                        _itemAbilityContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                    }
                                }

                                var _tempAbilities = _context.RuleSetItemsContents.Where(x => x.Type == 3).Select(x => x.Abilities);

                                foreach (var _tempAbility in _tempAbilities)
                                {

                                    int? _abilityContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(x => x.TypeId).FirstOrDefault();

                                    string _abilityContentTypeValueXML = _tempAbility.Where(x => x.ContentTypeId == _abilityContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempAbilityName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _abilityContentTypeValueXML, null);

                                    string _tempabilityNameStr = ruleSetItemViewModelAssociatedAbility.AbilityProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                    if (_tempabilityNameStr == _tempAbilityName.Text.value)
                                    {
                                        _itemAbilityContext.AbilityId = _tempAbility.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                    }
                                }

                                _context.ItemAbilities.Add(_itemAbilityContext);
                                _context.SaveChanges();
                            }
                        }
                    }

                    int _rowseffecteditemspell = _context.SaveChanges();

                    RuleSetViewModel RulesetModel = new RuleSetViewModel();
                    //Saving All 7 Type of Tiles For Items,Spells,Abilities
                  
                    SaveRuleSetClientImages(clientImagesPath, ClientImages);
                }
            }
            _serviceResponseModel.Result = GetRulesetItemsByRulesetId(_rulesetItems[0].RulesetId);
            return _serviceResponseModel;

        }
        public ServiceResponseModel UpdateRulesetItems_Bkp(List<Items> _updateItems, List<HttpPostedFileBase> ClientImages, string userId)
        {
            Hashtable clientImagesPath = new Hashtable();
            List<string> rulesetpropertyDeleteImage = new List<string>();
            var _deleteRuleSetItemId = new List<int>();
            var rulesetId = _updateItems[0].RulesetId;
            if (_updateItems != null)
            {
                var virtualPath = string.Empty;
                foreach (var _item in _updateItems)
                {

                    RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                    if (_item.ItemProperties != null)
                    {
                        var ItemPropertiesExceptTiles = _item.ItemProperties[0].tile != null ? _item.ItemProperties.Where(p => p.tile.Value == null).ToList() : _item.ItemProperties.Where(p => p.tile == null).ToList();
                        if (_item.ItemProperties[0].ContentId == null || _item.ItemProperties[0].ContentId == 0)
                        {
                            _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                            _ruleSetItemsContent.RulesetID = _item.RulesetId;
                            _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                            foreach (var _itemProperties in ItemPropertiesExceptTiles)
                            {
                                Item Item = new Item();
                                XmlDocument _tempitemPropertyValue = new XmlDocument();
                                var VirtualPath = string.Empty;
                                Item.IsStatic = true;
                                Item.ContentTypeId = (_itemProperties.ContentId == null || _itemProperties.ContentTypeId == null)
                                                       ? _itemProperties.Id : _itemProperties.ContentTypeId;

                                if (_itemProperties.Value != null)
                                {
                                    CustomTypes _temprulesetPropertyValueForImagePath = _itemProperties.Value;
                                    SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, -1);
                                    _itemProperties.Value = _temprulesetPropertyValueForImagePath;

                                    _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperties.TypeId, _itemProperties.Value, "");


                                    if (_tempitemPropertyValue != null)
                                    {
                                        Item.value = _tempitemPropertyValue.OuterXml;
                                    }
                                }
                                _ruleSetItemsContent.Items.Add(Item);
                            }
                            _context.SaveChanges();
                        }
                        else if (_item.ItemProperties[0].ContentId != null || _item.ItemProperties[0].ContentId != 0)
                        {
                            int? _rulesetItemContentId = _item.ItemProperties[0].ContentId;

                            _ruleSetItemsContent = _context.RuleSetItemsContents.Where(p => p.RulesetID == _item.RulesetId && p.Type == 1 && p.ContentId == _rulesetItemContentId).FirstOrDefault();
                            _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                            _ruleSetItemsContent.RulesetID = _item.RulesetId;
                            _ruleSetItemsContent.ContentId = _ruleSetItemsContent.ContentId;
                            var ItemContentId = _ruleSetItemsContent.ContentId;
                            var Items = _context.Items.Where(p => p.ContentId == ItemContentId).ToList();
                            Items = Items.Where(p => p.ContentTypeId != null).ToList();
                            for (var k = 0; k < Items.Count; k++)
                            {
                                Item _Item = new Item();
                                XmlDocument _tempitemPropertyValue = new XmlDocument();
                             
                                var ItemImagePath = string.Empty;

                                CustomTypes _temprulesetPropertyValueForImagePath = _item.ItemProperties[k].Value;
                                SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, Items[k].ItemId);
                                _item.ItemProperties[k].Value = _temprulesetPropertyValueForImagePath;

                                _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_item.ItemProperties[k].TypeId, _item.ItemProperties[k].Value, "");


                                if (_item.ItemProperties[k].Value != null)
                                {
                                    if (_tempitemPropertyValue != null)
                                    {
                                        Items[k].value = _tempitemPropertyValue.OuterXml;
                                    }
                                }

                            }

                            _context.SaveChanges();
                        }
                    }

                    _deleteRuleSetItemId.Add(_ruleSetItemsContent.ContentId);

                }
                
            }
            //Saving All 7 Type of Tiles For Items,Spells,Abilities
            //SaveRuleSetContentsTiles(UpdateModel, _ruleSet);

            SaveRuleSetClientImages(clientImagesPath, ClientImages);

            DeleteOldRuleSetClientImages(rulesetpropertyDeleteImage);
            _serviceResponseModel.Result = GetRulesetItemsByRulesetId(rulesetId);
            return _serviceResponseModel;
        }
        public ServiceResponseModel UpdateRulesetItems_Bkp_1(List<Items> _updateItems, List<HttpPostedFileBase> ClientImages, string userId)
        {
            Hashtable clientImagesPath = new Hashtable();
            List<string> rulesetpropertyDeleteImage = new List<string>();
            var rulesetId = _updateItems[0].RulesetId;
            List<Items> _rulesetItemsCreated = new List<Items>();

            if (_updateItems != null)
            {
                var virtualPath = string.Empty;
                foreach (var _item in _updateItems)
                {

                    RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                    if (_item.ItemProperties != null)
                    {
                        var ItemPropertiesExceptTiles = _item.ItemProperties[0].tile != null ? _item.ItemProperties.Where(p => p.tile.Value == null).ToList() : _item.ItemProperties.Where(p => p.tile == null).ToList();
                        if (_item.ItemProperties[0].ContentId == null || _item.ItemProperties[0].ContentId == 0)
                        {
                            _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                            _ruleSetItemsContent.RulesetID = _item.RulesetId;
                            _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                            foreach (var _itemProperties in ItemPropertiesExceptTiles)
                            {
                                Item Item = new Item();
                                XmlDocument _tempitemPropertyValue = new XmlDocument();
                                var VirtualPath = string.Empty;
                                Item.IsStatic = true;
                                Item.ContentTypeId = (_itemProperties.ContentId == null || _itemProperties.ContentTypeId == null)
                                                       ? _itemProperties.Id : _itemProperties.ContentTypeId;

                                if (_itemProperties.Value != null)
                                {
                                    CustomTypes _temprulesetPropertyValueForImagePath = _itemProperties.Value;
                                    SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, -1);
                                    _itemProperties.Value = _temprulesetPropertyValueForImagePath;

                                    _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperties.TypeId, _itemProperties.Value, "");


                                    if (_tempitemPropertyValue != null)
                                    {
                                        Item.value = _tempitemPropertyValue.OuterXml;
                                    }
                                }
                                _ruleSetItemsContent.Items.Add(Item);
                            }
                            _context.SaveChanges();
                        }
                        else if (_item.ItemProperties[0].ContentId != null || _item.ItemProperties[0].ContentId != 0)
                        {
                            int? _rulesetItemContentId = _item.ItemProperties[0].ContentId;

                            _ruleSetItemsContent = _context.RuleSetItemsContents.Where(p => p.RulesetID == _item.RulesetId && p.Type == 1 && p.ContentId == _rulesetItemContentId).FirstOrDefault();
                            _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                            _ruleSetItemsContent.RulesetID = _item.RulesetId;
                            _ruleSetItemsContent.ContentId = _ruleSetItemsContent.ContentId;
                            var ItemContentId = _ruleSetItemsContent.ContentId;
                            var Items = _context.Items.Where(p => p.ContentId == ItemContentId).ToList();
                            Items = Items.Where(p => p.ContentTypeId != null).ToList();
                            for (var k = 0; k < Items.Count; k++)
                            {
                                Item _Item = new Item();
                                XmlDocument _tempitemPropertyValue = new XmlDocument();
                              
                                var ItemImagePath = string.Empty;

                                CustomTypes _temprulesetPropertyValueForImagePath = _item.ItemProperties[k].Value;
                                SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, Items[k].ItemId);
                                _item.ItemProperties[k].Value = _temprulesetPropertyValueForImagePath;

                                _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_item.ItemProperties[k].TypeId, _item.ItemProperties[k].Value, "");


                                if (_item.ItemProperties[k].Value != null)
                                {
                                    if (_tempitemPropertyValue != null)
                                    {
                                        Items[k].value = _tempitemPropertyValue.OuterXml;
                                    }
                                }

                            }

                            _context.SaveChanges();
                        }
                    }

                    _context.SaveChanges();
                    //Deleting the Associated Spells in the Items.

                    var _itemSpells = (from ruleset in _context.RuleSets
                                       join rulesetitemcontent in _context.RuleSetItemsContents on ruleset.RulesetID equals rulesetitemcontent.RulesetID
                                       join rulesetitemspell in _context.ItemSpells on rulesetitemcontent.ContentId equals rulesetitemspell.ItemId
                                       where ruleset.RulesetID == rulesetId
                                       select new { ItemId = rulesetitemspell.ItemId }).ToList();

                    foreach (var val in _itemSpells)
                    {
                        _context.ItemSpells.RemoveRange(_context.ItemSpells.Where(x => x.ItemId == val.ItemId));
                        _context.SaveChanges();
                    }

                    //Adding the associated spells to the items in the rule set.
                    foreach (var ruleSetItemViewModel in _updateItems)
                    {
                        ItemSpell _itemSpellContext = new ItemSpell();
                        if (ruleSetItemViewModel.AssociatedSpells != null)
                        {
                            foreach (var ruleSetItemViewModelAssociatedSpell in ruleSetItemViewModel.AssociatedSpells)
                            {

                                var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                foreach (var _itemContext in _itemsContext)
                                {

                                    int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                    string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                    CustomTypes _tempItemNameClient = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                    if (_tempItemNameClient.Text.value == _tempItemName.Text.value)
                                    {
                                       
                                        _itemSpellContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                var _tempSpells = _context.RuleSetItemsContents.Where(x => x.Type == 2 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Spells);

                                foreach (var _tempSpell in _tempSpells)
                                {

                                    int? _spellContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(x => x.TypeId).FirstOrDefault();

                                    string _spellContentTypeValueXML = _tempSpell.Where(x => x.ContentTypeId == _spellContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempSpellName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _spellContentTypeValueXML, null);

                                    string _tempSpellNameStr = ruleSetItemViewModelAssociatedSpell.SpellProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                    if (_tempSpellNameStr == _tempSpellName.Text.value)
                                    {
                                        
                                        _itemSpellContext.SpellId = Convert.ToInt32(_tempSpell.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                _context.ItemSpells.Add(_itemSpellContext);
                                _context.SaveChanges();
                            }
                        }
                    }

                    //Deleting the Associated Abilities in the Items.
                    var _itemAbilities = (from ruleset in _context.RuleSets
                                          join rulesetitemcontent in _context.RuleSetItemsContents on ruleset.RulesetID equals rulesetitemcontent.RulesetID
                                          join rulesetitemability in _context.ItemSpells on rulesetitemcontent.ContentId equals rulesetitemability.ItemId
                                          where ruleset.RulesetID == rulesetId
                                          select new { ItemId = rulesetitemability.ItemId }).ToList();

                    foreach (var val in _itemAbilities)
                    {
                        _context.ItemAbilities.RemoveRange(_context.ItemAbilities.Where(x => x.ItemId == val.ItemId));
                        _context.SaveChanges();
                    }

                    //Adding the associated abilities to the items in the rule set.
                    foreach (var ruleSetItemViewModel in _updateItems)
                    {
                        ItemAbility _itemAbilityContext = new ItemAbility();
                        if (ruleSetItemViewModel.AssociatedAbilities != null)
                        {
                            foreach (var ruleSetItemViewModelAssociatedAbility in ruleSetItemViewModel.AssociatedAbilities)
                            {

                                var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                foreach (var _itemContext in _itemsContext)
                                {

                                    int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                    string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                    CustomTypes _tempItemNameViewModel = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                    if (_tempItemNameViewModel.Text.value == _tempItemName.Text.value)
                                    {
                                       
                                        _itemAbilityContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                var _tempAbilities = _context.RuleSetItemsContents.Where(x => x.Type == 3 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Abilities);

                                foreach (var _tempAbility in _tempAbilities)
                                {

                                    int? _abilityContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(x => x.TypeId).FirstOrDefault();

                                    string _abilityContentTypeValueXML = _tempAbility.Where(x => x.ContentTypeId == _abilityContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempAbilityName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _abilityContentTypeValueXML, null);

                                    string _tempabilityNameStr = ruleSetItemViewModelAssociatedAbility.AbilityProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                    if (_tempabilityNameStr == _tempAbilityName.Text.value)
                                    {
                                       
                                        _itemAbilityContext.AbilityId = Convert.ToInt32(_tempAbility.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                _context.ItemAbilities.Add(_itemAbilityContext);
                                _context.SaveChanges();
                            }
                        }
                    }

                    _rulesetItemsCreated.Add(GetItemByContentId(_ruleSetItemsContent.ContentId));

                }

            }

            //Saving All 7 Type of Tiles For Items,Spells,Abilities
            //SaveRuleSetContentsTiles(UpdateModel, _ruleSet);

            SaveRuleSetClientImages(clientImagesPath, ClientImages);

            DeleteOldRuleSetClientImages(rulesetpropertyDeleteImage);

            _serviceResponseModel.Result = _rulesetItemsCreated;
            return _serviceResponseModel;
        }
        public ServiceResponseModel CopyRulesetItems_Bkp(List<Items> _copyItems, List<HttpPostedFileBase> ClientImages, string userId)
        {

            List<Items> _rulesetItemsCreated = new List<Items>();


            Hashtable clientImagesPath = new Hashtable();
            List<string> clientImagesPathForDelete = new List<string>();
            _copyItems = _copyItems == null ? new List<Items>() : _copyItems;
            if (_copyItems != null)
            {
                var VirtualPath = string.Empty;
                foreach (var item in _copyItems)
                {
                    RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                    if (item.ItemProperties != null)
                    {

                      
                        _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                        _ruleSetItemsContent.RulesetID = item.RulesetId;
                        _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                        _context.SaveChanges();
                        foreach (var _itemProperty in item.ItemProperties)
                        {
                            Item _item = new Item();
                            XmlDocument _tempitemPropertyValue = new XmlDocument();
                            if (_itemProperty.Id != 0)
                            {
                                _item.ContentTypeId = _itemProperty.ContentTypeId;
                                _item.ContentId = _ruleSetItemsContent.ContentId;
                                _item.IsStatic = true;
                                if (_itemProperty.Value != null)
                                {
                                    CustomTypes _temprulesetPropertyValueForImagePath = _itemProperty.Value;
                                    if (_itemProperty.Value.Image != null && _itemProperty.Value.Image.image != null && _itemProperty.Value.Image.image.IndexOf("wwwroot") > 0)
                                    {
                                        string RuleSetItemimagephysicalmappathsource = HttpContext.Current.Server.MapPath(_itemProperty.Value.Image.image);
                                        string virtualPathDest = "/wwwroot/images/RuleSetItemImages/" + item.ItemProperties[0].Name + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                        string RuleSetItemimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                        if (File.Exists(RuleSetItemimagephysicalmappathsource))
                                        {
                                            File.Copy(RuleSetItemimagephysicalmappathsource, RuleSetItemimagephysicalmappathdest);
                                        }
                                        _temprulesetPropertyValueForImagePath.Image.image = virtualPathDest;
                                    }
                                    SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                    _itemProperty.Value = _temprulesetPropertyValueForImagePath;

                                    _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperty.TypeId, _itemProperty.Value, "");

                                    if (_tempitemPropertyValue != null)
                                    {
                                        _item.value = _tempitemPropertyValue.OuterXml;
                                    }
                                }

                                _ruleSetItemsContent.Items.Add(_item);
                            }
                            _context.SaveChanges();
                        }
                    }
                    //Adding the associated spells to the items in the rule set.
                    foreach (var ruleSetItemViewModel in _copyItems)
                    {
                        ItemSpell _itemSpellContext = new ItemSpell();
                        if (ruleSetItemViewModel.AssociatedSpells != null)
                        {
                            foreach (var ruleSetItemViewModelAssociatedSpell in ruleSetItemViewModel.AssociatedSpells)
                            {

                                var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                foreach (var _itemContext in _itemsContext)
                                {

                                    int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                    string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                    CustomTypes _tempItemNameClient = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                    if (_tempItemNameClient.Text.value == _tempItemName.Text.value)
                                    {
                                        
                                        _itemSpellContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                var _tempSpells = _context.RuleSetItemsContents.Where(x => x.Type == 2 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Spells);

                                foreach (var _tempSpell in _tempSpells)
                                {

                                    int? _spellContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(x => x.TypeId).FirstOrDefault();

                                    string _spellContentTypeValueXML = _tempSpell.Where(x => x.ContentTypeId == _spellContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempSpellName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _spellContentTypeValueXML, null);

                                    string _tempSpellNameStr = ruleSetItemViewModelAssociatedSpell.SpellProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                    if (_tempSpellNameStr == _tempSpellName.Text.value)
                                    {
                                      
                                        _itemSpellContext.SpellId = Convert.ToInt32(_tempSpell.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                _context.ItemSpells.Add(_itemSpellContext);
                                _context.SaveChanges();
                            }
                        }
                    }
                    //Adding the associated abilities to the items in the rule set.
                    foreach (var ruleSetItemViewModel in _copyItems)
                    {
                        ItemAbility _itemAbilityContext = new ItemAbility();
                        if (ruleSetItemViewModel.AssociatedAbilities != null)
                        {
                            foreach (var ruleSetItemViewModelAssociatedAbility in ruleSetItemViewModel.AssociatedAbilities)
                            {

                                var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                foreach (var _itemContext in _itemsContext)
                                {

                                    int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                    string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                    CustomTypes _tempItemNameViewModel = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                    if (_tempItemNameViewModel.Text.value == _tempItemName.Text.value)
                                    {
                                        //_itemAbilityContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                        _itemAbilityContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                var _tempAbilities = _context.RuleSetItemsContents.Where(x => x.Type == 3 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Abilities);

                                foreach (var _tempAbility in _tempAbilities)
                                {

                                    int? _abilityContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(x => x.TypeId).FirstOrDefault();

                                    string _abilityContentTypeValueXML = _tempAbility.Where(x => x.ContentTypeId == _abilityContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempAbilityName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _abilityContentTypeValueXML, null);

                                    string _tempabilityNameStr = ruleSetItemViewModelAssociatedAbility.AbilityProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                    if (_tempabilityNameStr == _tempAbilityName.Text.value)
                                    {
                                        //_itemAbilityContext.AbilityId = _tempAbility.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                        _itemAbilityContext.AbilityId = Convert.ToInt32(_tempAbility.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                _context.ItemAbilities.Add(_itemAbilityContext);
                                _context.SaveChanges();
                            }
                        }
                    }

                    //int _rowseffecteditemspell = _context.SaveChanges();

                    RuleSetViewModel RulesetModel = new RuleSetViewModel();
                    //Saving All 7 Type of Tiles For Items,Spells,Abilities
                    //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);

                    SaveRuleSetClientImages(clientImagesPath, ClientImages);

                    _rulesetItemsCreated.Add(GetItemByContentId(_ruleSetItemsContent.ContentId));
                }
            }
            _serviceResponseModel.Result = _rulesetItemsCreated;
            return _serviceResponseModel;
        }
        public ServiceResponseModel CopyRulesetItems_Bkp_1(List<Items> _copyItems, List<HttpPostedFileBase> ClientImages, string userId)
        {

            List<Items> _rulesetItemsCreated = new List<Items>();


            Hashtable clientImagesPath = new Hashtable();
            List<string> clientImagesPathForDelete = new List<string>();
            _copyItems = _copyItems == null ? new List<Items>() : _copyItems;
            if (_copyItems != null)
            {
                var VirtualPath = string.Empty;
                foreach (var item in _copyItems)
                {
                    RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                    if (item.ItemProperties != null)
                    {

                        //RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                        _ruleSetItemsContent.Type = 1; // Type 1 for Items.
                        _ruleSetItemsContent.RulesetID = item.RulesetId;
                        _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                        _context.SaveChanges();
                        foreach (var _itemProperty in item.ItemProperties)
                        {
                            Item _item = new Item();
                            XmlDocument _tempitemPropertyValue = new XmlDocument();
                            if (_itemProperty.Id != 0)
                            {
                                _item.ContentTypeId = _itemProperty.ContentTypeId;
                                _item.ContentId = _ruleSetItemsContent.ContentId;
                                _item.IsStatic = true;
                                if (_itemProperty.Value != null)
                                {
                                    CustomTypes _temprulesetPropertyValueForImagePath = _itemProperty.Value;
                                    if (_itemProperty.Value.Image != null && _itemProperty.Value.Image.image != null && _itemProperty.Value.Image.image.IndexOf("wwwroot") > 0)
                                    {
                                        string RuleSetItemimagephysicalmappathsource = HttpContext.Current.Server.MapPath(_itemProperty.Value.Image.image);
                                        string virtualPathDest = "/wwwroot/images/RuleSetItemImages/" + item.ItemProperties[0].Name + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                        string RuleSetItemimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                        if (File.Exists(RuleSetItemimagephysicalmappathsource))
                                        {
                                            File.Copy(RuleSetItemimagephysicalmappathsource, RuleSetItemimagephysicalmappathdest);
                                        }
                                        _temprulesetPropertyValueForImagePath.Image.image = virtualPathDest;
                                    }
                                    SetPathforClientImages(2, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                    _itemProperty.Value = _temprulesetPropertyValueForImagePath;

                                    _tempitemPropertyValue = Utility.ConvertTypeValueClasstoXML(_itemProperty.TypeId, _itemProperty.Value, "");

                                    if (_tempitemPropertyValue != null)
                                    {
                                        _item.value = _tempitemPropertyValue.OuterXml;
                                    }
                                }

                                _ruleSetItemsContent.Items.Add(_item);
                            }
                            _context.SaveChanges();
                        }
                    }
                    //Adding the associated spells to the items in the rule set.
                    foreach (var ruleSetItemViewModel in _copyItems)
                    {
                        ItemSpell _itemSpellContext = new ItemSpell();
                        if (ruleSetItemViewModel.AssociatedSpells != null)
                        {
                            foreach (var ruleSetItemViewModelAssociatedSpell in ruleSetItemViewModel.AssociatedSpells)
                            {

                                var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                foreach (var _itemContext in _itemsContext)
                                {

                                    int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                    string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                    CustomTypes _tempItemNameClient = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                    if (_tempItemNameClient.Text.value == _tempItemName.Text.value)
                                    {
                                        //_itemSpellContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                        _itemSpellContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                var _tempSpells = _context.RuleSetItemsContents.Where(x => x.Type == 2 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Spells);

                                foreach (var _tempSpell in _tempSpells)
                                {

                                    int? _spellContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 2).Select(x => x.TypeId).FirstOrDefault();

                                    string _spellContentTypeValueXML = _tempSpell.Where(x => x.ContentTypeId == _spellContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempSpellName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _spellContentTypeValueXML, null);

                                    string _tempSpellNameStr = ruleSetItemViewModelAssociatedSpell.SpellProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                    if (_tempSpellNameStr == _tempSpellName.Text.value)
                                    {
                                        //_itemSpellContext.SpellId = _tempSpell.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                        _itemSpellContext.SpellId = Convert.ToInt32(_tempSpell.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                _context.ItemSpells.Add(_itemSpellContext);
                                _context.SaveChanges();
                            }
                        }
                    }
                    //Adding the associated abilities to the items in the rule set.
                    foreach (var ruleSetItemViewModel in _copyItems)
                    {
                        ItemAbility _itemAbilityContext = new ItemAbility();
                        if (ruleSetItemViewModel.AssociatedAbilities != null)
                        {
                            foreach (var ruleSetItemViewModelAssociatedAbility in ruleSetItemViewModel.AssociatedAbilities)
                            {

                                var _itemsContext = _context.RuleSetItemsContents.Where(x => x.Type == 1 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Items);

                                foreach (var _itemContext in _itemsContext)
                                {

                                    int? _itemContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 1).Select(x => x.TypeId).FirstOrDefault();

                                    string _itemContentTypeValueXML = _itemContext.Where(x => x.ContentTypeId == _itemContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempItemName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _itemContentTypeValueXML, null);

                                    CustomTypes _tempItemNameViewModel = ruleSetItemViewModel.ItemProperties.Where(x => x.Name == "Name").Select(x => x.Value).FirstOrDefault();

                                    if (_tempItemNameViewModel.Text.value == _tempItemName.Text.value)
                                    {
                                        //_itemAbilityContext.ItemId = _itemContext.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                        _itemAbilityContext.ItemId = Convert.ToInt32(_itemContext.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                var _tempAbilities = _context.RuleSetItemsContents.Where(x => x.Type == 3 && x.RulesetID == ruleSetItemViewModel.RulesetId).Select(x => x.Abilities);

                                foreach (var _tempAbility in _tempAbilities)
                                {

                                    int? _abilityContentTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(y => y.Id).FirstOrDefault();

                                    int? _rpgSmithTypeId = _context.RulesetContentTypes.Where(x => x.Name == "Name" && x.ContentType == 3).Select(x => x.TypeId).FirstOrDefault();

                                    string _abilityContentTypeValueXML = _tempAbility.Where(x => x.ContentTypeId == _abilityContentTypeId).Select(x => x.value).FirstOrDefault();

                                    CustomTypes _tempAbilityName = Utility.ConvertTypeValueXMLtoClass(_rpgSmithTypeId, _abilityContentTypeValueXML, null);

                                    string _tempabilityNameStr = ruleSetItemViewModelAssociatedAbility.AbilityProperties.Where(r => r.Name == "Name").Select(r => r.Value).FirstOrDefault().Text.value;

                                    if (_tempabilityNameStr == _tempAbilityName.Text.value)
                                    {
                                        //_itemAbilityContext.AbilityId = _tempAbility.Select(x => x.RuleSetItemsContent).FirstOrDefault().ContentId;
                                        _itemAbilityContext.AbilityId = Convert.ToInt32(_tempAbility.Select(x => x.ContentId).FirstOrDefault());
                                    }
                                }

                                _context.ItemAbilities.Add(_itemAbilityContext);
                                _context.SaveChanges();
                            }
                        }
                    }

                    //int _rowseffecteditemspell = _context.SaveChanges();

                    RuleSetViewModel RulesetModel = new RuleSetViewModel();
                    //Saving All 7 Type of Tiles For Items,Spells,Abilities
                    //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);

                    SaveRuleSetClientImages(clientImagesPath, ClientImages);

                    _rulesetItemsCreated.Add(GetItemByContentId(_ruleSetItemsContent.ContentId));
                }
            }
            _serviceResponseModel.Result = _rulesetItemsCreated;
            return _serviceResponseModel;
        }
        public ServiceResponseModel DeleteItem_Bkp(List<Items> deleteitem)
        {
            try
            {
                foreach (var items in deleteitem)
                {
                    var contentid = items.ItemProperties[0].ContentId;
                    var deleterulesetitemspells = _context.ItemSpells.Where(W => W.ItemId == contentid).ToList();

                    foreach (var itemspell in deleterulesetitemspells)
                    {
                        _context.ItemSpells.Remove(itemspell);
                    }

                    var deleterulesetitemabilities = _context.ItemAbilities.Where(W => W.ItemId == contentid).ToList();

                    foreach (var itemability in deleterulesetitemabilities)
                    {
                        _context.ItemAbilities.Remove(itemability);
                    }

                    var deleteitems = _context.Items.Where(p => p.ContentId == contentid).ToList();

                    foreach (var item in deleteitems)
                    {
                        _context.Items.Remove(item);
                    }

                    var deletecontentid = _context.RuleSetItemsContents.Where(p => p.ContentId == contentid).FirstOrDefault();
                    _context.RuleSetItemsContents.Remove(deletecontentid);
                    _context.SaveChanges();

                }

                _serviceResponseModel.StatusCode = 200;
                _serviceResponseModel.Result = deleteitem;
                //_serviceResponseModel.Result = GetRulesetItemsByRulesetId(deleteitem[0].RulesetId);
            }

            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;
        }
        public ServiceResponseModel DeleteItem_Bkp_1(List<Items> deleteitem)
        {
            try
            {
                foreach (var items in deleteitem)
                {
                    var contentid = items.ItemProperties[0].ContentId;
                    var deleterulesetitemspells = _context.ItemSpells.Where(W => W.ItemId == contentid).ToList();

                    foreach (var itemspell in deleterulesetitemspells)
                    {
                        _context.ItemSpells.Remove(itemspell);
                    }

                    var deleterulesetitemabilities = _context.ItemAbilities.Where(W => W.ItemId == contentid).ToList();

                    foreach (var itemability in deleterulesetitemabilities)
                    {
                        _context.ItemAbilities.Remove(itemability);
                    }

                    var deleteitems = _context.Items.Where(p => p.ContentId == contentid).ToList();

                    foreach (var item in deleteitems)
                    {
                        _context.Items.Remove(item);
                    }

                    var deletecontentid = _context.RuleSetItemsContents.Where(p => p.ContentId == contentid).FirstOrDefault();
                    _context.RuleSetItemsContents.Remove(deletecontentid);
                    _context.SaveChanges();

                }

                _serviceResponseModel.StatusCode = 200;
                _serviceResponseModel.Result = deleteitem;
                //_serviceResponseModel.Result = GetRulesetItemsByRulesetId(deleteitem[0].RulesetId);
            }

            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;
        }
        #endregion
        #region Ruleset Spells
        public List<Spells> GetRulesetSpellsByRulesetId(int RUlesetId)
        {
            RuleSetViewModel _rulesetViewModel = new RuleSetViewModel();
            _rulesetViewModel.Spells = new List<Spells>();
            List<Spells> _ruleSetSpellsVM = new List<Spells>();
            var _ruleSetSpells = _context.RuleSetItemsContents.Where(p => p.RulesetID == RUlesetId && p.Type == 2).ToList();
            foreach (var _ruleSetSpell in _ruleSetSpells)
            {
                Spells _ruleSetSpellVM = new Spells();
                _ruleSetSpellVM.SpellProperties = new List<SpellProperties>();
                var _ruleSetSpellProperties = (from _spellProperties in _context.RulesetContentTypes
                                               join rpgType in _context.RPGSmithTypes on _spellProperties.TypeId equals rpgType.TypeID
                                               join _spellPropertyValue in _context.Spells on _spellProperties.Id equals _spellPropertyValue.ContentTypeId into ps
                                               from _spellPropertyValue in ps.DefaultIfEmpty()
                                               where _spellPropertyValue.ContentId == _ruleSetSpell.ContentId
                                               select new
                                               {
                                                   Id = _spellPropertyValue.SpellId,
                                                   ContentTypeId = _spellPropertyValue.ContentTypeId,
                                                   ContentId = _spellPropertyValue.ContentId,
                                                   TypeId = _spellProperties.TypeId,
                                                   Name = _spellProperties.Name,
                                                   Description = _spellProperties.Description,
                                                   Mandatory = _spellProperties.Mandatory,
                                                   Value = _spellPropertyValue.value,
                                                   Units = rpgType.Units
                                               }).ToList();

                foreach (var _ruleSetSpellProperty in _ruleSetSpellProperties)
                {
                    var _spellProperties = new SpellProperties();
                    _spellProperties.Id = _ruleSetSpellProperty.Id;
                    _spellProperties.ContentTypeId = Convert.ToInt32(_ruleSetSpellProperty.ContentTypeId);
                    _spellProperties.ContentId = _ruleSetSpellProperty.ContentId;
                    _spellProperties.TypeId = _ruleSetSpellProperty.TypeId;
                    _spellProperties.Name = _ruleSetSpellProperty.Name;
                    _spellProperties.IsMandatory = _ruleSetSpellProperty.Mandatory == true ? _ruleSetSpellProperty.Mandatory : false;
                    _spellProperties.Description = _ruleSetSpellProperty.Description;
                    _spellProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetSpellProperty.TypeId, _ruleSetSpellProperty.Value, _ruleSetSpellProperty.Units);
                    _ruleSetSpellVM.SpellProperties.Add(_spellProperties);
                }
                //Declare Model
                var _spellTileProperties = new SpellProperties();
                //Getting Spell Tile Properties from db
                var SpellTileProperties = _context.Spells.Where(p => p.ContentId == _ruleSetSpell.ContentId && p.ContentTypeId == null).ToList();
                foreach (var _spellTileProperty in SpellTileProperties)
                {
                    // Setting RuleSet Spell Tile Properties
                    _spellTileProperties = SetRuleSetContents(null, _spellTileProperty, null).SpellProperty;
                    _ruleSetSpellVM.SpellProperties.Add(_spellTileProperties);
                }
                _ruleSetSpellVM.SpellProperties = _ruleSetSpellVM.SpellProperties.Where(p => p.ContentId != null || p.tile != null).ToList();
                _ruleSetSpellsVM.Add(_ruleSetSpellVM);
            }
            //Filling Spells Metadata for RuleSet
            //var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 2).Select(
            // x => new
            // {
            //     Id = x.Id,
            //     Name = x.Name,
            //     Description = x.Description,
            //     TypeId = x.TypeId,
            //     Mandatory = x.Mandatory,
            //     Metadata = x.Metadata
            // }
            // ).ToList();

            //foreach (var val in _dataQuery)
            //{
            //    SpellProperties _ruleSetSpellProperty = new SpellProperties();
            //    _ruleSetSpellProperty.Id = val.Id;
            //    _ruleSetSpellProperty.Name = val.Name;
            //    _ruleSetSpellProperty.Description = val.Description;
            //    _ruleSetSpellProperty.TypeId = val.TypeId;
            //    _ruleSetSpellProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
            //    _ruleSetSpellProperty.Value = (val.Metadata != null && val.Metadata != "") ?
            //                                   Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata) :
            //                                   Utility.GetTypeClassMetaData(val.TypeId);
            //    _rulesetViewModel.RuleSetMetaData.SpellProperties.Add(_ruleSetSpellProperty);
            //}
            return _ruleSetSpellsVM;
        }
        public Spells GetSpellByContentId(int ContentId)
        {
            Spells _spell = new Spells();
            SpellProperties spellProperties = new SpellProperties();
            var spellproperty = new List<SpellProperties>();
            var RarityMetadata = _context.RulesetContentTypes.Where(x => x.ContentType == 1 && x.IsActive == true && x.IsRuleSet == true && x.Id == 7).SingleOrDefault().Metadata;
            //_ruleSetSpellVM.SpellProperties = new List<SpellProperties>();
            var _ruleSetSpellProperties = (from _spellProperties in _context.RulesetContentTypes
                                           join rpgType in _context.RPGSmithTypes on _spellProperties.TypeId equals rpgType.TypeID
                                           join _spellPropertyValue in _context.Spells on _spellProperties.Id equals _spellPropertyValue.ContentTypeId into ps
                                           from _spellPropertyValue in ps.DefaultIfEmpty()
                                           where _spellPropertyValue.ContentId == ContentId
                                           select new
                                           {
                                               Id = _spellPropertyValue.SpellId,
                                               ContentTypeId = _spellPropertyValue.ContentTypeId,
                                               ContentId = _spellPropertyValue.ContentId,
                                               TypeId = _spellProperties.TypeId,
                                               Name = _spellProperties.Name,
                                               Description = _spellProperties.Description,
                                               Mandatory = _spellProperties.Mandatory,
                                               Value = _spellPropertyValue.value,
                                               Units = rpgType.Units
                                           }).ToList();

            //foreach (var _ruleSetSpellProperty in _ruleSetSpellProperties)
            //{
            //    var _spellProperties = new SpellProperties();
            //    _spellProperties.Id = _ruleSetSpellProperty.Id;
            //    _spellProperties.ContentTypeId = Convert.ToInt32(_ruleSetSpellProperty.ContentTypeId);
            //    _spellProperties.ContentId = _ruleSetSpellProperty.ContentId;
            //    _spellProperties.TypeId = _ruleSetSpellProperty.TypeId;
            //    _spellProperties.Name = _ruleSetSpellProperty.Name;
            //    _spellProperties.IsMandatory = _ruleSetSpellProperty.Mandatory == true ? _ruleSetSpellProperty.Mandatory : false;
            //    _spellProperties.Description = _ruleSetSpellProperty.Description;
            //    _spellProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetSpellProperty.TypeId, _ruleSetSpellProperty.Value, _ruleSetSpellProperty.Units);
            //    _ruleSetSpellVM.SpellProperties.Add(_spellProperties);
            //}

            foreach (var _ruleSetSpellProperty in _ruleSetSpellProperties)
            {
                if (_ruleSetSpellProperty.Name == "Rarity")
                {
                    spellproperty.Add(new SpellProperties()
                    {
                        Id = _ruleSetSpellProperty.Id,
                        ContentTypeId = _ruleSetSpellProperty.ContentTypeId,
                        ContentId = _ruleSetSpellProperty.ContentId,
                        TypeId = _ruleSetSpellProperty.TypeId,
                        Name = _ruleSetSpellProperty.Name,
                        IsMandatory = _ruleSetSpellProperty.Mandatory == true ? _ruleSetSpellProperty.Mandatory : false,
                        Description = _ruleSetSpellProperty.Description,
                        Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetSpellProperty.TypeId, _ruleSetSpellProperty.Value, RarityMetadata)
                    });
                }
                else
                {
                    if (spellProperties.TypeId == 16)
                    {
                        CustomTypes c1 = new CustomTypes();
                        c1.Calculation = new Calculation();
                        c1.Calculation.formulae = "[Weight]*[Quantity]";
                        spellproperty.Add(new SpellProperties()
                        {
                            Id = spellProperties.Id,
                           ContentTypeId = _ruleSetSpellProperty.ContentTypeId,
                           ContentId = _ruleSetSpellProperty.ContentId,
                           TypeId = _ruleSetSpellProperty.TypeId,
                            Name = _ruleSetSpellProperty.Name,
                            IsMandatory = _ruleSetSpellProperty.Mandatory == true ? _ruleSetSpellProperty.Mandatory : false,
                            Description = _ruleSetSpellProperty.Description,
                            Value = c1
                        });
                    }
                    else
                    {
                        spellproperty.Add(new SpellProperties()
                        {
                            Id = _ruleSetSpellProperty.Id,
                           ContentTypeId = _ruleSetSpellProperty.ContentTypeId,
                           ContentId = _ruleSetSpellProperty.ContentId,
                           TypeId = _ruleSetSpellProperty.TypeId,
                           Name = _ruleSetSpellProperty.Name,
                           IsMandatory = _ruleSetSpellProperty.Mandatory == true ? _ruleSetSpellProperty.Mandatory : false,
                           Description = _ruleSetSpellProperty.Description,
                           Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetSpellProperty.TypeId, _ruleSetSpellProperty.Value, _ruleSetSpellProperty.Units)

                        });
                    }
                }
            }
            _spell = new Spells()
            {
               SpellProperties  = spellproperty
            };
            //Declare Model
            var _spellTileProperties = new SpellProperties();
            //Getting Spell Tile Properties from db
            var SpellTileProperties = _context.Spells.Where(p => p.ContentId == ContentId && p.ContentTypeId == null).ToList();
            foreach (var _spellTileProperty in SpellTileProperties)
            {
                // Setting RuleSet Spell Tile Properties
                _spellTileProperties = SetRuleSetContents(null, _spellTileProperty, null).SpellProperty;
                _spell.SpellProperties.Add(_spellTileProperties);
            }
            return _spell;
        }

        

        public RuleSetViewModel GetRulesetSpellsMetadata(int RulesetId)
        {
            RuleSetViewModel _rulesetViewModel = new RuleSetViewModel();
            var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 2).Select(
             x => new
             {
                 Id = x.Id,
                 Name = x.Name,
                 Description = x.Description,
                 TypeId = x.TypeId,
                 Mandatory = x.Mandatory,
                 Metadata = x.Metadata
             }
             ).ToList();

            foreach (var val in _dataQuery)
            {
                SpellProperties _ruleSetSpellProperty = new SpellProperties();
                _ruleSetSpellProperty.Id = val.Id;
                _ruleSetSpellProperty.Name = val.Name;
                _ruleSetSpellProperty.Description = val.Description;
                _ruleSetSpellProperty.TypeId = val.TypeId;
                _ruleSetSpellProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
                _ruleSetSpellProperty.Value = (val.Metadata != null && val.Metadata != "") ?
                                               Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata) :
                                               Utility.GetTypeClassMetaData(val.TypeId);
                _rulesetViewModel.RuleSetMetaData.SpellProperties.Add(_ruleSetSpellProperty);
            }
            _rulesetViewModel.Rulesetproperty = GetRulesetGeneralSettingsByRulesetId(RulesetId);
            return _rulesetViewModel;
        }

        public ServiceResponseModel CreateRulesetSpells(List<Spells> _rulesetSpells, List<HttpPostedFileBase> ClientImages, string userId)
        {

            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForCreateRulesetSpells(_rulesetSpells, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        List<Spells> _rulesetSpellsCreated = new List<Spells>();

                        Hashtable clientImagesPath = new Hashtable();

                        List<string> clientImagesPathForDelete = new List<string>();
                        _rulesetSpells = _rulesetSpells == null ? new List<Spells>() : _rulesetSpells;
                        if (_rulesetSpells != null)
                        {
                            var VirtualPath = string.Empty;
                            foreach (var spell in _rulesetSpells)
                            {
                                RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                                if (spell.SpellProperties != null)
                                {
                                    _ruleSetItemsContent.Type = 2; // Type 2 for Spells.
                                    _ruleSetItemsContent.RulesetID = spell.RulesetId;
                                    _context.RuleSetItemsContents.Add(_ruleSetItemsContent);

                                    foreach (var _spellProperties in spell.SpellProperties)
                                    {
                                        Spell _spell = new Spell();
                                        XmlDocument _tempspellPropertyValue = new XmlDocument();
                                        if (_spellProperties.Id != 0)
                                        {
                                            _spell.ContentTypeId = _spellProperties.Id;
                                            _spell.ContentId = _ruleSetItemsContent.ContentId;
                                            _spell.IsStatic = true;
                                            if (_spellProperties.Value != null)
                                            {

                                                CustomTypes _temprulesetPropertyValueForImagePath = _spellProperties.Value;
                                                SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                                _spellProperties.Value = _temprulesetPropertyValueForImagePath;

                                                _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(_spellProperties.TypeId, _spellProperties.Value, "");

                                                if (_tempspellPropertyValue != null)
                                                {
                                                    _spell.value = _tempspellPropertyValue.OuterXml;
                                                }
                                            }

                                            _ruleSetItemsContent.Spells.Add(_spell);
                                        }
                                        _context.SaveChanges();
                                    }
                                }
                                _rulesetSpellsCreated.Add(GetSpellByContentId(_ruleSetItemsContent.ContentId));
                            }
                            //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);

                            SaveRuleSetClientImages(clientImagesPath, ClientImages);

                        }
                        var _rulesetId = _rulesetSpells[0].RulesetId;
                        _serviceResponseModel.Result = _rulesetSpellsCreated;
                        _serviceResponseModel.StatusCode = 200;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;



        }
        public ServiceResponseModel UpdateRulesetSpells(List<Spells> _updateSpells, List<HttpPostedFileBase> ClientImages, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForUpdateRulesetSpells(_updateSpells, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {

                        List<Spells> _rulesetSpellsCreated = new List<Spells>();

                        Hashtable clientImagesPath = new Hashtable();

                        List<string> clientImagesPathForDelete = new List<string>();
                        List<string> rulesetpropertyDeleteImage = new List<string>();
                        var deletespells = new List<int>();
                        var _rulesetid = _updateSpells[0].RulesetId;
                        if (_updateSpells != null)
                        {
                            var virtualPath = string.Empty;
                            for (var j = 0; j < _updateSpells.Count; j++)
                            {
                                var spell = _updateSpells[j];
                                RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                                if (spell.SpellProperties != null)
                                {
                                    if (spell.SpellProperties[0].ContentId == null || spell.SpellProperties[0].ContentId == 0)
                                    {
                                        _ruleSetItemsContent.Type = 2; // Type 2 for Spells.
                                        _ruleSetItemsContent.RulesetID = spell.RulesetId;
                                        _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                                        var SpellPropertiesExceptTiles = spell.SpellProperties[0].tile != null ? spell.SpellProperties.Where(p => p.tile.Value == null).ToList() : spell.SpellProperties.Where(p => p.tile == null).ToList();
                                        foreach (var _spellProperties in SpellPropertiesExceptTiles)
                                        {
                                            Spell _spell = new Spell();
                                            XmlDocument _tempspellPropertyValue = new XmlDocument();
                                            var VirtualPath = string.Empty;
                                            _spell.IsStatic = true;
                                            _spell.ContentTypeId = (_spellProperties.ContentId == null || _spellProperties.ContentTypeId == null)
                                                                 ? _spellProperties.Id : _spellProperties.ContentTypeId;
                                            if (_spellProperties.Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = _spellProperties.Value;
                                                SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, -1);
                                                _spellProperties.Value = _temprulesetPropertyValueForImagePath;

                                                _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(_spellProperties.TypeId, _spellProperties.Value, "");


                                                if (_tempspellPropertyValue != null)
                                                {
                                                    _spell.value = _tempspellPropertyValue.OuterXml;
                                                }
                                            }
                                            _ruleSetItemsContent.Spells.Add(_spell);
                                        }
                                        _context.SaveChanges();
                                    }
                                    else if (spell.SpellProperties[0].ContentId != null || spell.SpellProperties[0].ContentId != 0)
                                    {
                                        int? _rulesetSpellContentId = _updateSpells[j].SpellProperties[0].ContentId;
                                        _ruleSetItemsContent = _context.RuleSetItemsContents.Where(p => p.RulesetID == _rulesetid && p.Type == 2 && p.ContentId == _rulesetSpellContentId).FirstOrDefault();

                                        _ruleSetItemsContent.Type = 2; // Type 2 for Spells.
                                        _ruleSetItemsContent.RulesetID = _rulesetid;
                                        _ruleSetItemsContent.ContentId = _ruleSetItemsContent.ContentId;
                                        var SpellContentId = _ruleSetItemsContent.ContentId;
                                        var Spells = _context.Spells.Where(p => p.ContentId == SpellContentId).ToList();
                                        Spells = Spells.Where(p => p.ContentTypeId != null).ToList();
                                        for (var k = 0; k < Spells.Count; k++)
                                        {
                                            //Spell _spell = new Spell();
                                            XmlDocument _tempspellPropertyValue = new XmlDocument();
                                            //_spell.ContentId = Spells[k].ContentId;
                                            //_spell.ContentTypeId = Spells[k].ContentTypeId;
                                            //_spell.SpellId = Spells[k].SpellId;
                                            var SpellImagePath = string.Empty;
                                            if (spell.SpellProperties[k].Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = spell.SpellProperties[k].Value;
                                                SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, Spells[k].SpellId);
                                                spell.SpellProperties[k].Value = _temprulesetPropertyValueForImagePath;

                                                _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(spell.SpellProperties[k].TypeId, spell.SpellProperties[k].Value, "");



                                                if (_tempspellPropertyValue != null)
                                                {
                                                    Spells[k].value = _tempspellPropertyValue.OuterXml;
                                                }

                                            }
                                        }

                                        _context.SaveChanges();
                                    }

                                }
                                _rulesetSpellsCreated.Add(GetSpellByContentId(_ruleSetItemsContent.ContentId));

                                //deletespells.Add(_ruleSetItemsContent.ContentId);
                            }


                            //var deleterulesetspells1 = _context.RuleSetItemsContents.Where(W => !deletespells.Any(a => a == W.ContentId) && W.RulesetID == _updateSpells[0].RulesetId && W.Type == 2).ToList();

                            //var spells = deleterulesetspells1.Select(w => w.ContentId).ToList();

                            //var deleterulesetspells2 = _context.Spells.Where(W => spells.Any(a => a == W.ContentId)).ToList();

                            //foreach (var _spell in deleterulesetspells2)
                            //{
                            //    _context.Spells.Remove(_spell);

                            //}

                            //foreach (var rulesetspellcontent in deleterulesetspells1)
                            //{
                            //    _context.RuleSetItemsContents.Remove(rulesetspellcontent);

                            //}

                            //_context.SaveChanges();
                            //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);

                            SaveRuleSetClientImages(clientImagesPath, ClientImages);
                            //DeleteOldRuleSetClientImages(rulesetpropertyDeleteImage);
                        }

                        _serviceResponseModel.Result = _rulesetSpellsCreated;
                        _serviceResponseModel.StatusCode = 200;
                        //  return _serviceResponseModel;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;
        }
        public ServiceResponseModel CopyRulesetSpells(List<Spells> _copySpells, List<HttpPostedFileBase> ClientImages, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForCreateRulesetSpells(_copySpells, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {

                        List<Spells> _rulesetSpellsCreated = new List<Spells>();
                        Hashtable clientImagesPath = new Hashtable();

                        List<string> clientImagesPathForDelete = new List<string>();
                        _copySpells = _copySpells == null ? new List<Spells>() : _copySpells;
                        if (_copySpells != null)
                        {
                            var VirtualPath = string.Empty;
                            foreach (var spell in _copySpells)
                            {
                                RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                                if (spell.SpellProperties != null)
                                {
                                    _ruleSetItemsContent.Type = 2; // Type 2 for Spells.
                                    _ruleSetItemsContent.RulesetID = spell.RulesetId;
                                    _context.RuleSetItemsContents.Add(_ruleSetItemsContent);

                                    foreach (var _spellProperties in spell.SpellProperties)
                                    {
                                        Spell _spell = new Spell();
                                        XmlDocument _tempspellPropertyValue = new XmlDocument();
                                        if (_spellProperties.Id != 0)
                                        {
                                            _spell.ContentTypeId = _spellProperties.ContentTypeId;
                                            _spell.ContentId = _ruleSetItemsContent.ContentId;
                                            _spell.IsStatic = true;
                                            if (_spellProperties.Value != null)
                                            {

                                                CustomTypes _temprulesetPropertyValueForImagePath = _spellProperties.Value;
                                                if (_spellProperties.Value.Image != null && _spellProperties.Value.Image.image != null && _spellProperties.Value.Image.image.IndexOf("wwwroot") > 0)
                                                {
                                                    string RuleSetSpellimagephysicalmappathsource = HttpContext.Current.Server.MapPath(_spellProperties.Value.Image.image);
                                                    string virtualPathDest = "/wwwroot/images/RuleSetSpellsImages/" + spell.SpellProperties[0].Name + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                                    string RuleSetSpellimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                                    if (File.Exists(RuleSetSpellimagephysicalmappathsource))
                                                    {
                                                        File.Copy(RuleSetSpellimagephysicalmappathsource, RuleSetSpellimagephysicalmappathdest);
                                                    }
                                                    _temprulesetPropertyValueForImagePath.Image.image = virtualPathDest;
                                                }
                                                SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                                _spellProperties.Value = _temprulesetPropertyValueForImagePath;

                                                _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(_spellProperties.TypeId, _spellProperties.Value, "");

                                                if (_tempspellPropertyValue != null)
                                                {
                                                    _spell.value = _tempspellPropertyValue.OuterXml;
                                                }
                                            }

                                            _ruleSetItemsContent.Spells.Add(_spell);
                                        }
                                        _context.SaveChanges();
                                    }
                                }
                                _rulesetSpellsCreated.Add(GetSpellByContentId(_ruleSetItemsContent.ContentId));
                            }
                            //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);

                            SaveRuleSetClientImages(clientImagesPath, ClientImages);
                        }
                        //var _rulesetid = _copySpells[0].RulesetId;
                        _serviceResponseModel.Result = _rulesetSpellsCreated;
                        _serviceResponseModel.StatusCode = 200;
                        //  return _serviceResponseModel;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;
        }
        public ServiceResponseModel DeleteSpell(List<Spells> deletespell, string userId)
        {
            try
            {
                //RuleSetViewModel ruleSetModel = new RuleSetViewModel();
                //ruleSetModel.Id = Convert.ToInt32(RuleSetID);
                //CharacterViewModel charactermodel = new CharacterViewModel();
                //charactermodel.Id = Convert.ToInt32(CharacterID);

                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";
                    Errors = ValidationForDeleteSpell(deletespell, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {

                        var _rulesetId = deletespell[0].RulesetId;
                        foreach (var spells in deletespell)
                        {
                            var contentid = spells.SpellProperties[0].ContentId;
                            var deletespells = _context.Spells.Where(p => p.ContentId == contentid).ToList();
                            foreach (var spell in deletespells)
                            {
                                _context.Spells.Remove(spell);
                                _context.SaveChanges();
                            }
                            var deletecontentid = _context.RuleSetItemsContents.Where(p => p.ContentId == contentid).FirstOrDefault();
                            _context.RuleSetItemsContents.Remove(deletecontentid);
                            _context.SaveChanges();

                        }

                        _serviceResponseModel.Result = deletespell;
                        _serviceResponseModel.StatusCode = 200;
                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }
            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;
        }

        ////Validations for Ruleset Spells
        public string ValidationForCreateRulesetSpells(List<Spells> _rulesetSpells, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            if (_rulesetSpells.Count > 0)
            {
                foreach (var Spell in _rulesetSpells)
                {
                    string SpellName = "";

                    if (Spell.SpellProperties != null)
                    {
                        string FileterName = "Name";
                        int FileterTypeId = 1;
                        var SpellData = Spell.SpellProperties.Where(x => x.Name == FileterName && x.TypeId == FileterTypeId);

                        //var FileterTypeId = 1;
                        //var SpellData = Spell.SpellProperties.Where(x => x.Name == "Name" && x.TypeId == FileterTypeId).ToList();
                        foreach (var _Spell in SpellData)
                        {
                            SpellName = _Spell.Value.Text.value;
                        }


                        List<Spells> _spellsList = GetRulesetSpellsByRulesetId(Spell.RulesetId);
                        foreach (var spell in _spellsList)
                        {
                            string FileterName1 = "Name";
                            int FileterTypeId1 = 1;
                            List<SpellProperties> spelldata_ = spell.SpellProperties.Where(x => x.Name == FileterName1 && x.TypeId == FileterTypeId1).ToList();

                            foreach (var _Spell in spelldata_)
                            {
                                if (SpellName == _Spell.Value.Text.value)
                                {
                                    // Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                    resultStatus = 1;
                                }
                            }

                        }

                        if (resultStatus == 1)
                        {
                            Errors = Errors + SpellName + "already Exist,";
                        }


                        foreach (var _spellProperties in Spell.SpellProperties)
                        {
                            if (_spellProperties.IsMandatory == true && _spellProperties.Value != null)
                            {
                                switch (_spellProperties.TypeId)
                                {
                                    case 1:
                                        if (_spellProperties.Value.Text.value == "" || _spellProperties.Value.Text.value == null)
                                        {
                                            Errors = Errors + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            SpellName = _spellProperties.Value.Text.value;
                                        }

                                        break;
                                    case 2:
                                        if (_spellProperties.Value.Choices.selectedchoice == "" || _spellProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_spellProperties.Value.OnOrOff.value == "" || _spellProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_spellProperties.Value.YesOrNo.value == "" || _spellProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_spellProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _spellProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_spellProperties.Value.YesOrNo.value == "" || _spellProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_spellProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_spellProperties.Value.Image.image == "" || _spellProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_spellProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_spellProperties.Value.Volume.units.selectedUnit == "" || _spellProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_spellProperties.Value.Number.value < 0)
                                        {

                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            // Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_spellProperties.Value.DefaultDice.value == "" || _spellProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_spellProperties.Value.Calculation.formulae == "" || _spellProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_spellProperties.Value.Text.value == "" || _spellProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_spellProperties.IsMandatory == true && _spellProperties.Value == null)
                            {
                                Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                resultStatus = 1;
                            }

                            else if ((_spellProperties.TypeId == 7 || _spellProperties.TypeId == 12 || _spellProperties.TypeId == 14) && _spellProperties.IsMandatory == false && _spellProperties.Value != null)
                            {
                                switch (_spellProperties.TypeId)
                                {
                                    case 7:
                                        if (_spellProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_spellProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_spellProperties.Value.Number.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }

                        }
                    }
                }
            }
            return Errors;
        }

        public string ValidationForUpdateRulesetSpells(List<Spells> _rulesetSpells, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            if (_rulesetSpells.Count > 0)
            {
                foreach (var Spell in _rulesetSpells)
                {
                    string SpellName = "";

                    if (Spell.SpellProperties != null)
                    {

                        //var FileterName = "Name";
                        //var FileterTypeId = 1;
                        //var SpellData = Spell.SpellProperties.Where(x => x.Name.ToLower() == FileterName.ToLower() && x.TypeId == FileterTypeId); //.Select(x => x.Name ="Name");
                        var SpellData = Spell.SpellProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();
                        foreach (var _Spell in SpellData)
                        {
                            SpellName = _Spell.Value.Text.value;
                        }

                        foreach (var _spellProperties in Spell.SpellProperties)
                        {
                            //if (_spellProperties.TypeId == 1 && _spellProperties.IsMandatory == false && _spellProperties.Value != null)
                            //if (_spellProperties.TypeId == 1 &&  _spellProperties.Value != null)
                            //{
                            //    SpellName = _spellProperties.Value.Text.value;
                            //}

                            if (_spellProperties.IsMandatory == true && _spellProperties.Value != null)
                            {
                                switch (_spellProperties.TypeId)
                                {
                                    case 1:
                                        if (_spellProperties.Value.Text.value == "" || _spellProperties.Value.Text.value == null)
                                        {
                                            Errors = Errors + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            SpellName = _spellProperties.Value.Text.value;
                                        }

                                        break;
                                    case 2:
                                        if (_spellProperties.Value.Choices.selectedchoice == "" || _spellProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_spellProperties.Value.OnOrOff.value == "" || _spellProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_spellProperties.Value.YesOrNo.value == "" || _spellProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_spellProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _spellProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_spellProperties.Value.YesOrNo.value == "" || _spellProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_spellProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_spellProperties.Value.Image.image == "" || _spellProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_spellProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_spellProperties.Value.Volume.units.selectedUnit == "" || _spellProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_spellProperties.Value.Number.value < 0)
                                        {

                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            // Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_spellProperties.Value.DefaultDice.value == "" || _spellProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_spellProperties.Value.Calculation.formulae == "" || _spellProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_spellProperties.Value.Text.value == "" || _spellProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_spellProperties.IsMandatory == true && _spellProperties.Value == null)
                            {
                                Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                resultStatus = 1;
                            }

                            else if ((_spellProperties.TypeId == 7 || _spellProperties.TypeId == 12 || _spellProperties.TypeId == 14) && _spellProperties.IsMandatory == false && _spellProperties.Value != null)
                            {
                                switch (_spellProperties.TypeId)
                                {
                                    case 7:
                                        if (_spellProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_spellProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_spellProperties.Value.Number.value < 0)
                                        {
                                            Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }

                        }
                    }
                }
            }
            return Errors;
        }

        public string ValidationForDeleteSpell(List<Spells> deletespell, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            int contentid = 0;
            var _rulesetId = deletespell[0].RulesetId;
            int ContentType = 2;
            foreach (var spells in deletespell)
            {
                contentid = Convert.ToInt32(spells.SpellProperties[0].ContentId);
            }

            List<Spell> SpellsList = (from _spells in _context.Spells
                                      join _ruleSetItemsContents in _context.RuleSetItemsContents on _spells.ContentId equals _ruleSetItemsContents.ContentId
                                      join _RuleSets in _context.RuleSets on _ruleSetItemsContents.RulesetID equals _RuleSets.RulesetID
                                      where _ruleSetItemsContents.RulesetID == _rulesetId
                                      && _ruleSetItemsContents.Type == ContentType
                                      && _ruleSetItemsContents.ContentId == contentid
                                      && _RuleSets.UserId == userId
                                      select _spells
                      ).ToList();

            if (SpellsList.Count == 0)
            {
                Errors = Errors + "Please Select Valid Spell for Delete \\n";
                resultStatus = 1;
            }

            return Errors;
        }

        //public string ValidationForCopyRulesetSpells(List<Spells> _copySpells, string userId, out int resultStatus)
        //{
        //    string Errors = "";
        //    resultStatus = 0;

        //    if (_copySpells.Count > 0)
        //    {
        //        foreach (var Spell in _copySpells)
        //        {
        //            string SpellName = "";

        //            if (Spell.SpellProperties != null)
        //            {

        //                //var FileterName = "Name";
        //                //var FileterTypeId = 1;
        //                //var SpellData = Spell.SpellProperties.Where(x => x.Name.ToLower() == FileterName.ToLower() && x.TypeId == FileterTypeId); //.Select(x => x.Name ="Name");
        //                var SpellData = Spell.SpellProperties.Where(x => x.Name == "Name" && x.TypeId == 1).ToList();
        //                foreach (var _Spell in SpellData)
        //                {
        //                    SpellName = _Spell.Value.Text.value;
        //                }

        //                List<Spells> spellsList = GetRulesetSpellsByRulesetId(Spell.RulesetId);
        //                foreach (var _spell in spellsList)
        //                {
        //                    string FileterName1 = "Name";
        //                    int FileterTypeId1 = 1;
        //                    List<SpellProperties> _spelldata = _spell.SpellProperties.Where(x => x.Name == FileterName1 && x.TypeId == FileterTypeId1).ToList();

        //                    foreach (var spell in _spelldata)
        //                    {
        //                        if (SpellName == spell.Value.Text.value)
        //                        {
        //                            // Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                            resultStatus = 1;
        //                        }
        //                    }

        //                }

        //                if (resultStatus == 1)
        //                {
        //                    Errors = Errors + SpellName + "already Exist,";
        //                }


        //                foreach (var _spellProperties in Spell.SpellProperties)
        //                {
        //                    //if (_spellProperties.TypeId == 1 && _spellProperties.IsMandatory == false && _spellProperties.Value != null)
        //                    //if (_spellProperties.TypeId == 1 &&  _spellProperties.Value != null)
        //                    //{
        //                    //    SpellName = _spellProperties.Value.Text.value;
        //                    //}

        //                    if (_spellProperties.IsMandatory == true && _spellProperties.Value != null)
        //                    {
        //                        switch (_spellProperties.TypeId)
        //                        {
        //                            case 1:
        //                                if (_spellProperties.Value.Text.value == "" || _spellProperties.Value.Text.value == null)
        //                                {
        //                                    Errors = Errors + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }
        //                                else
        //                                {
        //                                    SpellName = _spellProperties.Value.Text.value;
        //                                }

        //                                break;
        //                            case 2:
        //                                if (_spellProperties.Value.Choices.selectedchoice == "" || _spellProperties.Value.Choices.selectedchoice == null)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }

        //                                break;
        //                            case 3:
        //                                if (_spellProperties.Value.OnOrOff.value == "" || _spellProperties.Value.OnOrOff.value == null)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 4:
        //                                if (_spellProperties.Value.YesOrNo.value == "" || _spellProperties.Value.YesOrNo.value == null)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 5:
        //                                if (_spellProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _spellProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 6:
        //                                if (_spellProperties.Value.YesOrNo.value == "" || _spellProperties.Value.YesOrNo.value == null)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 7:
        //                                if (_spellProperties.Value.Weight.value < 0)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
        //                                    //Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required" + Environment.NewLine;
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 8:
        //                                if (_spellProperties.Value.Image.image == "" || _spellProperties.Value.Image.image == null)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 12:
        //                                if (_spellProperties.Value.Height.value < 0)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
        //                                    //Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required" + Environment.NewLine;
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 13:
        //                                if (_spellProperties.Value.Volume.units.selectedUnit == "" || _spellProperties.Value.Volume.units.selectedUnit == null)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 14:
        //                                if (_spellProperties.Value.Number.value < 0)
        //                                {

        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
        //                                    // Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required" + Environment.NewLine;
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 15:
        //                                if (_spellProperties.Value.DefaultDice.value == "" || _spellProperties.Value.DefaultDice.value == null)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 16:
        //                                if (_spellProperties.Value.Calculation.formulae == "" || _spellProperties.Value.Calculation.formulae == null)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;

        //                            case 19:
        //                                if (_spellProperties.Value.Text.value == "" || _spellProperties.Value.Text.value == "")
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                                    resultStatus = 1;
        //                                }

        //                                break;
        //                        }

        //                    }
        //                    else if (_spellProperties.IsMandatory == true && _spellProperties.Value == null)
        //                    {
        //                        Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
        //                        resultStatus = 1;
        //                    }

        //                    else if ((_spellProperties.TypeId == 7 || _spellProperties.TypeId == 12 || _spellProperties.TypeId == 14) && _spellProperties.IsMandatory == false && _spellProperties.Value != null)
        //                    {
        //                        switch (_spellProperties.TypeId)
        //                        {
        //                            case 7:
        //                                if (_spellProperties.Value.Weight.value < 0)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 12:
        //                                if (_spellProperties.Value.Height.value < 0)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                            case 14:
        //                                if (_spellProperties.Value.Number.value < 0)
        //                                {
        //                                    Errors = Errors + SpellName + "_" + _spellProperties.Name + " should be greater than Zero,";
        //                                    resultStatus = 1;
        //                                }
        //                                break;
        //                        }

        //                    }

        //                }
        //            }
        //        }
        //    }
        //    return Errors;
        //}


        public ServiceResponseModel CreateRulesetSpells_Bkp(List<Spells> _rulesetSpells, List<HttpPostedFileBase> ClientImages, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {

                    List<Spells> _rulesetSpellsCreated = new List<Spells>();

                    Hashtable clientImagesPath = new Hashtable();

                    List<string> clientImagesPathForDelete = new List<string>();
                    _rulesetSpells = _rulesetSpells == null ? new List<Spells>() : _rulesetSpells;
                    if (_rulesetSpells != null)
                    {
                        var VirtualPath = string.Empty;
                        foreach (var spell in _rulesetSpells)
                        {
                            RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                            if (spell.SpellProperties != null)
                            {
                                _ruleSetItemsContent.Type = 2; // Type 2 for Spells.
                                _ruleSetItemsContent.RulesetID = spell.RulesetId;
                                _context.RuleSetItemsContents.Add(_ruleSetItemsContent);

                                foreach (var _spellProperties in spell.SpellProperties)
                                {
                                    Spell _spell = new Spell();
                                    XmlDocument _tempspellPropertyValue = new XmlDocument();
                                    if (_spellProperties.Id != 0)
                                    {
                                        _spell.ContentTypeId = _spellProperties.Id;
                                        _spell.ContentId = _ruleSetItemsContent.ContentId;
                                        _spell.IsStatic = true;
                                        if (_spellProperties.Value != null)
                                        {

                                            CustomTypes _temprulesetPropertyValueForImagePath = _spellProperties.Value;
                                            SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                            _spellProperties.Value = _temprulesetPropertyValueForImagePath;

                                            _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(_spellProperties.TypeId, _spellProperties.Value, "");

                                            if (_tempspellPropertyValue != null)
                                            {
                                                _spell.value = _tempspellPropertyValue.OuterXml;
                                            }
                                        }

                                        _ruleSetItemsContent.Spells.Add(_spell);
                                    }
                                    _context.SaveChanges();
                                }
                            }
                            _rulesetSpellsCreated.Add(GetSpellByContentId(_ruleSetItemsContent.ContentId));
                        }
                        //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);

                        SaveRuleSetClientImages(clientImagesPath, ClientImages);

                    }
                    var _rulesetId = _rulesetSpells[0].RulesetId;
                    _serviceResponseModel.Result = _rulesetSpellsCreated;
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }
            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;
        }
        public ServiceResponseModel UpdateRulesetSpells_Bkp(List<Spells> _updateSpells, List<HttpPostedFileBase> ClientImages, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {

                    List<Spells> _rulesetSpellsCreated = new List<Spells>();

                    Hashtable clientImagesPath = new Hashtable();

                    List<string> clientImagesPathForDelete = new List<string>();
                    List<string> rulesetpropertyDeleteImage = new List<string>();
                    var deletespells = new List<int>();
                    var _rulesetid = _updateSpells[0].RulesetId;
                    if (_updateSpells != null)
                    {
                        var virtualPath = string.Empty;
                        for (var j = 0; j < _updateSpells.Count; j++)
                        {
                            var spell = _updateSpells[j];
                            RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                            if (spell.SpellProperties != null)
                            {
                                if (spell.SpellProperties[0].ContentId == null || spell.SpellProperties[0].ContentId == 0)
                                {
                                    _ruleSetItemsContent.Type = 2; // Type 2 for Spells.
                                    _ruleSetItemsContent.RulesetID = spell.RulesetId;
                                    _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                                    var SpellPropertiesExceptTiles = spell.SpellProperties[0].tile != null ? spell.SpellProperties.Where(p => p.tile.Value == null).ToList() : spell.SpellProperties.Where(p => p.tile == null).ToList();
                                    foreach (var _spellProperties in SpellPropertiesExceptTiles)
                                    {
                                        Spell _spell = new Spell();
                                        XmlDocument _tempspellPropertyValue = new XmlDocument();
                                        var VirtualPath = string.Empty;
                                        _spell.IsStatic = true;
                                        _spell.ContentTypeId = (_spellProperties.ContentId == null || _spellProperties.ContentTypeId == null)
                                                             ? _spellProperties.Id : _spellProperties.ContentTypeId;
                                        if (_spellProperties.Value != null)
                                        {
                                            CustomTypes _temprulesetPropertyValueForImagePath = _spellProperties.Value;
                                            SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, -1);
                                            _spellProperties.Value = _temprulesetPropertyValueForImagePath;

                                            _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(_spellProperties.TypeId, _spellProperties.Value, "");


                                            if (_tempspellPropertyValue != null)
                                            {
                                                _spell.value = _tempspellPropertyValue.OuterXml;
                                            }
                                        }
                                        _ruleSetItemsContent.Spells.Add(_spell);
                                    }
                                    _context.SaveChanges();
                                }
                                else if (spell.SpellProperties[0].ContentId != null || spell.SpellProperties[0].ContentId != 0)
                                {
                                    int? _rulesetSpellContentId = _updateSpells[j].SpellProperties[0].ContentId;
                                    _ruleSetItemsContent = _context.RuleSetItemsContents.Where(p => p.RulesetID == _rulesetid && p.Type == 2 && p.ContentId == _rulesetSpellContentId).FirstOrDefault();

                                    _ruleSetItemsContent.Type = 2; // Type 2 for Spells.
                                    _ruleSetItemsContent.RulesetID = _rulesetid;
                                    _ruleSetItemsContent.ContentId = _ruleSetItemsContent.ContentId;
                                    var SpellContentId = _ruleSetItemsContent.ContentId;
                                    var Spells = _context.Spells.Where(p => p.ContentId == SpellContentId).ToList();
                                    Spells = Spells.Where(p => p.ContentTypeId != null).ToList();
                                    for (var k = 0; k < Spells.Count; k++)
                                    {
                                        //Spell _spell = new Spell();
                                        XmlDocument _tempspellPropertyValue = new XmlDocument();
                                        //_spell.ContentId = Spells[k].ContentId;
                                        //_spell.ContentTypeId = Spells[k].ContentTypeId;
                                        //_spell.SpellId = Spells[k].SpellId;
                                        var SpellImagePath = string.Empty;
                                        if (spell.SpellProperties[k].Value != null)
                                        {
                                            CustomTypes _temprulesetPropertyValueForImagePath = spell.SpellProperties[k].Value;
                                            SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, Spells[k].SpellId);
                                            spell.SpellProperties[k].Value = _temprulesetPropertyValueForImagePath;

                                            _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(spell.SpellProperties[k].TypeId, spell.SpellProperties[k].Value, "");



                                            if (_tempspellPropertyValue != null)
                                            {
                                                Spells[k].value = _tempspellPropertyValue.OuterXml;
                                            }

                                        }
                                    }

                                    _context.SaveChanges();
                                }

                            }
                            _rulesetSpellsCreated.Add(GetSpellByContentId(_ruleSetItemsContent.ContentId));

                            //deletespells.Add(_ruleSetItemsContent.ContentId);
                        }


                        //var deleterulesetspells1 = _context.RuleSetItemsContents.Where(W => !deletespells.Any(a => a == W.ContentId) && W.RulesetID == _updateSpells[0].RulesetId && W.Type == 2).ToList();

                        //var spells = deleterulesetspells1.Select(w => w.ContentId).ToList();

                        //var deleterulesetspells2 = _context.Spells.Where(W => spells.Any(a => a == W.ContentId)).ToList();

                        //foreach (var _spell in deleterulesetspells2)
                        //{
                        //    _context.Spells.Remove(_spell);

                        //}

                        //foreach (var rulesetspellcontent in deleterulesetspells1)
                        //{
                        //    _context.RuleSetItemsContents.Remove(rulesetspellcontent);

                        //}

                        //_context.SaveChanges();
                        //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);

                        SaveRuleSetClientImages(clientImagesPath, ClientImages);
                        //DeleteOldRuleSetClientImages(rulesetpropertyDeleteImage);
                    }

                    _serviceResponseModel.Result = _rulesetSpellsCreated;
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }
            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;
        }
        public ServiceResponseModel CopyRulesetSpells_Bkp(List<Spells> _copySpells, List<HttpPostedFileBase> ClientImages, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {

                    List<Spells> _rulesetSpellsCreated = new List<Spells>();
                    Hashtable clientImagesPath = new Hashtable();

                    List<string> clientImagesPathForDelete = new List<string>();
                    _copySpells = _copySpells == null ? new List<Spells>() : _copySpells;
                    if (_copySpells != null)
                    {
                        var VirtualPath = string.Empty;
                        foreach (var spell in _copySpells)
                        {
                            RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                            if (spell.SpellProperties != null)
                            {
                                _ruleSetItemsContent.Type = 2; // Type 2 for Spells.
                                _ruleSetItemsContent.RulesetID = spell.RulesetId;
                                _context.RuleSetItemsContents.Add(_ruleSetItemsContent);

                                foreach (var _spellProperties in spell.SpellProperties)
                                {
                                    Spell _spell = new Spell();
                                    XmlDocument _tempspellPropertyValue = new XmlDocument();
                                    if (_spellProperties.Id != 0)
                                    {
                                        _spell.ContentTypeId = _spellProperties.ContentTypeId;
                                        _spell.ContentId = _ruleSetItemsContent.ContentId;
                                        _spell.IsStatic = true;
                                        if (_spellProperties.Value != null)
                                        {

                                            CustomTypes _temprulesetPropertyValueForImagePath = _spellProperties.Value;
                                            if (_spellProperties.Value.Image != null && _spellProperties.Value.Image.image != null && _spellProperties.Value.Image.image.IndexOf("wwwroot") > 0)
                                            {
                                                string RuleSetSpellimagephysicalmappathsource = HttpContext.Current.Server.MapPath(_spellProperties.Value.Image.image);
                                                string virtualPathDest = "/wwwroot/images/RuleSetSpellsImages/" + spell.SpellProperties[0].Name + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                                string RuleSetSpellimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                                if (File.Exists(RuleSetSpellimagephysicalmappathsource))
                                                {
                                                    File.Copy(RuleSetSpellimagephysicalmappathsource, RuleSetSpellimagephysicalmappathdest);
                                                }
                                                _temprulesetPropertyValueForImagePath.Image.image = virtualPathDest;
                                            }
                                            SetPathforClientImages(3, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                            _spellProperties.Value = _temprulesetPropertyValueForImagePath;

                                            _tempspellPropertyValue = Utility.ConvertTypeValueClasstoXML(_spellProperties.TypeId, _spellProperties.Value, "");

                                            if (_tempspellPropertyValue != null)
                                            {
                                                _spell.value = _tempspellPropertyValue.OuterXml;
                                            }
                                        }

                                        _ruleSetItemsContent.Spells.Add(_spell);
                                    }
                                    _context.SaveChanges();
                                }
                            }
                            _rulesetSpellsCreated.Add(GetSpellByContentId(_ruleSetItemsContent.ContentId));
                        }
                        //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);

                        SaveRuleSetClientImages(clientImagesPath, ClientImages);
                    }
                    //var _rulesetid = _copySpells[0].RulesetId;
                    _serviceResponseModel.Result = _rulesetSpellsCreated;
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }
            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;
        }
        public ServiceResponseModel DeleteSpell_Bkp(List<Spells> deletespell)
        {
            try
            {
                var _rulesetId = deletespell[0].RulesetId;
                foreach (var spells in deletespell)
                {
                    var contentid = spells.SpellProperties[0].ContentId;
                    var deletespells = _context.Spells.Where(p => p.ContentId == contentid).ToList();
                    foreach (var spell in deletespells)
                    {
                        _context.Spells.Remove(spell);
                        _context.SaveChanges();
                    }
                    var deletecontentid = _context.RuleSetItemsContents.Where(p => p.ContentId == contentid).FirstOrDefault();
                    _context.RuleSetItemsContents.Remove(deletecontentid);
                    _context.SaveChanges();

                }

                _serviceResponseModel.Result = deletespell;

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }
            return _serviceResponseModel;
        }
        #endregion
        #region Ruleset Abilities
        public List<Abilities> GetRulesetAbilitiesByRulesetId(int RUlesetId)
        {
            RuleSetViewModel ruleSetViewModel = new RuleSetViewModel();
            List<Abilities> _ruleSetAbilitiesVM = new List<Abilities>();
            var _ruleSetSAbilities = _context.RuleSetItemsContents.Where(p => p.RulesetID == RUlesetId && p.Type == 3).ToList();
            foreach (var _ruleSetAbility in _ruleSetSAbilities)
            {
                Abilities _ruleSetAbilityVM = new Abilities();
                _ruleSetAbilityVM.AbilityProperties = new List<AbilityProperties>();
                var _ruleSetAbilityProperties = (from _abilityProperties in _context.RulesetContentTypes
                                                 join rpgType in _context.RPGSmithTypes on _abilityProperties.TypeId equals rpgType.TypeID
                                                 join _abilityPropertyValue in _context.Abilities on _abilityProperties.Id equals _abilityPropertyValue.ContentTypeId into ps
                                                 from _abilityPropertyValue in ps.DefaultIfEmpty()
                                                 where _abilityPropertyValue.ContentId == _ruleSetAbility.ContentId
                                                 select new
                                                 {
                                                     Id = _abilityPropertyValue.AbilityId,
                                                     ContentTypeId = _abilityPropertyValue.ContentTypeId,
                                                     ContentId = _abilityPropertyValue.ContentId,
                                                     TypeId = _abilityProperties.TypeId,
                                                     Name = _abilityProperties.Name,
                                                     Description = _abilityProperties.Description,
                                                     Mandatory = _abilityProperties.Mandatory,
                                                     Value = _abilityPropertyValue.value,
                                                     Units = rpgType.Units
                                                 }).ToList();

                foreach (var _ruleSetAbilityProperty in _ruleSetAbilityProperties)
                {
                    var _abilityProperties = new AbilityProperties();
                    _abilityProperties.Id = _ruleSetAbilityProperty.Id;
                    _abilityProperties.ContentTypeId = Convert.ToInt32(_ruleSetAbilityProperty.ContentTypeId);
                    _abilityProperties.ContentId = Convert.ToInt32(_ruleSetAbilityProperty.ContentId);
                    _abilityProperties.TypeId = _ruleSetAbilityProperty.TypeId;
                    _abilityProperties.Name = _ruleSetAbilityProperty.Name;
                    _abilityProperties.IsMandatory = _ruleSetAbilityProperty.Mandatory == true ? _ruleSetAbilityProperty.Mandatory : false;
                    _abilityProperties.Description = _ruleSetAbilityProperty.Description;
                    _abilityProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetAbilityProperty.TypeId, _ruleSetAbilityProperty.Value, _ruleSetAbilityProperty.Units);

                    _ruleSetAbilityVM.AbilityProperties.Add(_abilityProperties);
                }
                //Declare Model
                var _abilityTileProperties = new AbilityProperties();
                //Getting Ability Tile Properties from db
                var AbilityTileProperties = _context.Abilities.Where(p => p.ContentId == _ruleSetAbility.ContentId && p.ContentTypeId == null).ToList();
                foreach (var _abilityTileProperty in AbilityTileProperties)
                {
                    // Setting RuleSet Ability Tile Properties
                    _abilityTileProperties = SetRuleSetContents(null, null, _abilityTileProperty).AbilityProperty;
                    _ruleSetAbilityVM.AbilityProperties.Add(_abilityTileProperties);
                }
                _ruleSetAbilityVM.AbilityProperties = _ruleSetAbilityVM.AbilityProperties.Where(p => p.ContentId != null || p.tile != null).ToList();
                _ruleSetAbilitiesVM.Add(_ruleSetAbilityVM);
            }
            //Filling Ability Matadata for RuleSet
            //var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 3).Select(
            //  x => new
            //  {
            //      Id = x.Id,
            //      Name = x.Name,
            //      Description = x.Description,
            //      TypeId = x.TypeId,
            //      Mandatory = x.Mandatory,
            //      Metadata = x.Metadata
            //  }
            //  ).ToList();

            //foreach (var val in _dataQuery)
            //{
            //    AbilityProperties _ruleSetAbilityProperty = new AbilityProperties();
            //    _ruleSetAbilityProperty.Id = val.Id;
            //    _ruleSetAbilityProperty.Name = val.Name;
            //    _ruleSetAbilityProperty.Description = val.Description;
            //    _ruleSetAbilityProperty.TypeId = val.TypeId;
            //    _ruleSetAbilityProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
            //    _ruleSetAbilityProperty.Value = (val.Metadata != null && val.Metadata != "") ?
            //                                     Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata) :
            //                                     Utility.GetTypeClassMetaData(val.TypeId);
            //    ruleSetViewModel.RuleSetMetaData.AbilityProperties.Add(_ruleSetAbilityProperty);
            //}
            return _ruleSetAbilitiesVM;
        }

        public Abilities GetAbilityByContentID(int ContentId)
        {
            Abilities _ruleSetAbilityVM = new Abilities();
            var RulesetAbility = new List<AbilityProperties>();
            AbilityProperties Abilityproperty = new AbilityProperties();
            _ruleSetAbilityVM.AbilityProperties = new List<AbilityProperties>();
            var RarityMetadata = _context.RulesetContentTypes.Where(x => x.ContentType == 1 && x.IsActive == true && x.IsRuleSet == true && x.Id == 7).SingleOrDefault().Metadata;
            var _ruleSetAbilityProperties = (from _abilityProperties in _context.RulesetContentTypes
                                             join rpgType in _context.RPGSmithTypes on _abilityProperties.TypeId equals rpgType.TypeID
                                             join _abilityPropertyValue in _context.Abilities on _abilityProperties.Id equals _abilityPropertyValue.ContentTypeId into ps
                                             from _abilityPropertyValue in ps.DefaultIfEmpty()
                                             where _abilityPropertyValue.ContentId == ContentId
                                             select new
                                             {
                                                 Id = _abilityPropertyValue.AbilityId,
                                                 ContentTypeId = _abilityPropertyValue.ContentTypeId,
                                                 ContentId = _abilityPropertyValue.ContentId,
                                                 TypeId = _abilityProperties.TypeId,
                                                 Name = _abilityProperties.Name,
                                                 Description = _abilityProperties.Description,
                                                 Mandatory = _abilityProperties.Mandatory,
                                                 Value = _abilityPropertyValue.value,
                                                 Units = rpgType.Units
                                             }).ToList();

            //foreach (var _ruleSetAbilityProperty in _ruleSetAbilityProperties)
            //{
            //    var _abilityProperties = new AbilityProperties();
            //    _abilityProperties.Id = _ruleSetAbilityProperty.Id;
            //    _abilityProperties.ContentTypeId = Convert.ToInt32(_ruleSetAbilityProperty.ContentTypeId);
            //    _abilityProperties.ContentId = Convert.ToInt32(_ruleSetAbilityProperty.ContentId);
            //    _abilityProperties.TypeId = _ruleSetAbilityProperty.TypeId;
            //    _abilityProperties.Name = _ruleSetAbilityProperty.Name;
            //    _abilityProperties.IsMandatory = _ruleSetAbilityProperty.Mandatory == true ? _ruleSetAbilityProperty.Mandatory : false;
            //    _abilityProperties.Description = _ruleSetAbilityProperty.Description;
            //    _abilityProperties.Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetAbilityProperty.TypeId, _ruleSetAbilityProperty.Value, _ruleSetAbilityProperty.Units);

            //    _ruleSetAbilityVM.AbilityProperties.Add(_abilityProperties);
            //}
            foreach (var _ruleSetAbilityProperty in _ruleSetAbilityProperties)
            {
                if (_ruleSetAbilityProperty.Name == "Rarity")
                {
                    RulesetAbility.Add(new AbilityProperties()
                    {

                        Id = _ruleSetAbilityProperty.Id,
                        ContentTypeId = _ruleSetAbilityProperty.ContentTypeId,
                        ContentId = _ruleSetAbilityProperty.ContentId,
                        TypeId = _ruleSetAbilityProperty.TypeId,
                        Name = _ruleSetAbilityProperty.Name,
                        IsMandatory = _ruleSetAbilityProperty.Mandatory == true ? _ruleSetAbilityProperty.Mandatory : false,
                        Description = _ruleSetAbilityProperty.Description,
                        Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetAbilityProperty.TypeId, _ruleSetAbilityProperty.Value, RarityMetadata)
                    });
                }
                else
                {

                    if (_ruleSetAbilityProperty.TypeId == 16)
                    {

                        CustomTypes c1 = new CustomTypes();
                        c1.Calculation = new Calculation();
                        c1.Calculation.formulae = "[Weight]*[Quantity]";
                        //Calculation c1 = new Calculation();
                        //c1.formulae = 
                        RulesetAbility.Add(new AbilityProperties()
                        {
                            Id = _ruleSetAbilityProperty.Id,
                            ContentTypeId = _ruleSetAbilityProperty.ContentTypeId,
                            ContentId = _ruleSetAbilityProperty.ContentId,
                            TypeId = _ruleSetAbilityProperty.TypeId,
                            Name = _ruleSetAbilityProperty.Name,
                            IsMandatory = _ruleSetAbilityProperty.Mandatory == true ? _ruleSetAbilityProperty.Mandatory : false,
                            Description = _ruleSetAbilityProperty.Description,
                            Value = c1
                        });

                    }
                    else
                    {
                        RulesetAbility.Add(new AbilityProperties()
                        {
                            Id = _ruleSetAbilityProperty.Id,
                            ContentTypeId = _ruleSetAbilityProperty.ContentTypeId,
                            ContentId = _ruleSetAbilityProperty.ContentId,
                            TypeId = _ruleSetAbilityProperty.TypeId,
                            Name = _ruleSetAbilityProperty.Name,
                            IsMandatory = _ruleSetAbilityProperty.Mandatory == true ? _ruleSetAbilityProperty.Mandatory : false,
                            Description = _ruleSetAbilityProperty.Description,
                            Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetAbilityProperty.TypeId, _ruleSetAbilityProperty.Value, _ruleSetAbilityProperty.Units)

                        });
                    }
                }
            }
            _ruleSetAbilityVM = new Abilities()
            {
                AbilityProperties = RulesetAbility
            };
            //Declare Model
            var _abilityTileProperties = new AbilityProperties();
            //Getting Ability Tile Properties from db
            var AbilityTileProperties = _context.Abilities.Where(p => p.ContentId == ContentId && p.ContentTypeId == null).ToList();
            foreach (var _abilityTileProperty in AbilityTileProperties)
            {
                // Setting RuleSet Ability Tile Properties
                _abilityTileProperties = SetRuleSetContents(null, null, _abilityTileProperty).AbilityProperty;
                _ruleSetAbilityVM.AbilityProperties.Add(_abilityTileProperties);
            }
            return _ruleSetAbilityVM;
        }

        //            foreach (var _ruleSetItemProperty in _ruleSetItemProperties)
        //            {
        //                if (_ruleSetItemProperty.Name == "Rarity")
        //                {
        //                    itemProperties.Add(new ItemProperties()
        //        {

        //            Id = _ruleSetItemProperty.Id,
        //                        ContentTypeId = _ruleSetItemProperty.ContentTypeId,
        //                        ContentId = _ruleSetItemProperty.ContentId,
        //                        TypeId = _ruleSetItemProperty.TypeId,
        //                        Name = _ruleSetItemProperty.Name,
        //                        IsMandatory = _ruleSetItemProperty.Mandatory == true ? _ruleSetItemProperty.Mandatory : false,
        //                        Description = _ruleSetItemProperty.Description,
        //                        Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetItemProperty.TypeId, _ruleSetItemProperty.Value, RarityMetadata)
        //                    });
        //                }
        //                else
        //                {

        //                    if (_ruleSetItemProperty.TypeId == 16)
        //                    {

        //                        CustomTypes c1 = new CustomTypes();
        //    c1.Calculation = new Calculation();
        //    c1.Calculation.formulae = "[Weight]*[Quantity]";
        //                        //Calculation c1 = new Calculation();
        //                        //c1.formulae = 
        //                        itemProperties.Add(new ItemProperties()
        //    {
        //        Id = _ruleSetItemProperty.Id,
        //                            ContentTypeId = _ruleSetItemProperty.ContentTypeId,
        //                            ContentId = _ruleSetItemProperty.ContentId,
        //                            TypeId = _ruleSetItemProperty.TypeId,
        //                            Name = _ruleSetItemProperty.Name,
        //                            IsMandatory = _ruleSetItemProperty.Mandatory == true ? _ruleSetItemProperty.Mandatory : false,
        //                            Description = _ruleSetItemProperty.Description,
        //                            Value = c1
        //                        });

        //                    }
        //                    else
        //                    {
        //                        itemProperties.Add(new ItemProperties()
        //{
        //                           Id = _ruleSetItemProperty.Id,
        //                            ContentTypeId = _ruleSetItemProperty.ContentTypeId,
        //                            ContentId = _ruleSetItemProperty.ContentId,
        //                            TypeId = _ruleSetItemProperty.TypeId,
        //                            Name = _ruleSetItemProperty.Name,
        //                            IsMandatory = _ruleSetItemProperty.Mandatory == true ? _ruleSetItemProperty.Mandatory : false,
        //                            Description = _ruleSetItemProperty.Description,
        //                            Value = Utility.ConvertTypeValueXMLtoClass(_ruleSetItemProperty.TypeId, _ruleSetItemProperty.Value, _ruleSetItemProperty.Units)


        //                        });
        //                    }
        //                }
        //            }



        public RuleSetViewModel GetRulesetAbilitiesMetadata(int RulesetId)
        {
            RuleSetViewModel ruleSetViewModel = new RuleSetViewModel();
            var _dataQuery = _context.RulesetContentTypes.Where(x => x.ContentType == 3).Select(
             x => new
             {
                 Id = x.Id,
                 Name = x.Name,
                 Description = x.Description,
                 TypeId = x.TypeId,
                 Mandatory = x.Mandatory,
                 Metadata = x.Metadata
             }
             ).ToList();

            foreach (var val in _dataQuery)
            {
                AbilityProperties _ruleSetAbilityProperty = new AbilityProperties();
                _ruleSetAbilityProperty.Id = val.Id;
                _ruleSetAbilityProperty.Name = val.Name;
                _ruleSetAbilityProperty.Description = val.Description;
                _ruleSetAbilityProperty.TypeId = val.TypeId;
                _ruleSetAbilityProperty.IsMandatory = val.Mandatory == true ? val.Mandatory : false;
                _ruleSetAbilityProperty.Value = (val.Metadata != null && val.Metadata != "") ?
                                                 Utility.ConvertTypeMetaDataXMLtoClass(val.TypeId, val.Metadata) :
                                                 Utility.GetTypeClassMetaData(val.TypeId);
                ruleSetViewModel.RuleSetMetaData.AbilityProperties.Add(_ruleSetAbilityProperty);
            }
            ruleSetViewModel.Rulesetproperty = GetRulesetGeneralSettingsByRulesetId(RulesetId);
            return ruleSetViewModel;
        }

        public ServiceResponseModel CreateRulesetAbilities(List<Abilities> _rulesetAbilities, List<HttpPostedFileBase> ClientImages, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForCreateRulesetAbilities(_rulesetAbilities, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        List<Abilities> _rulesetAbilitiesCreated = new List<Abilities>();

                        Hashtable clientImagesPath = new Hashtable();

                        List<string> clientImagesPathForDelete = new List<string>();

                        if (_rulesetAbilities != null)
                        {
                            var VirtualPath = string.Empty;
                            foreach (var ability in _rulesetAbilities)
                            {
                                RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                                if (ability.AbilityProperties != null)
                                {

                                    _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.
                                    _ruleSetItemsContent.RulesetID = ability.RulesetID;
                                    _context.RuleSetItemsContents.Add(_ruleSetItemsContent);

                                    foreach (var _abilityProperties in ability.AbilityProperties)
                                    {
                                        Ability _ability = new Ability();
                                        XmlDocument _tempabilityPropertyValue = new XmlDocument();
                                        if (_abilityProperties.Id != 0)
                                        {
                                            _ability.ContentTypeId = _abilityProperties.Id;
                                            _ability.ContentId = _ruleSetItemsContent.ContentId;
                                            _ability.IsStatic = true;
                                            if (_abilityProperties.Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = _abilityProperties.Value;
                                                SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                                _abilityProperties.Value = _temprulesetPropertyValueForImagePath;

                                                _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(_abilityProperties.TypeId, _abilityProperties.Value, "");


                                                if (_tempabilityPropertyValue != null)
                                                {
                                                    _ability.value = _tempabilityPropertyValue.OuterXml;
                                                }
                                            }

                                            _context.Abilities.Add(_ability);
                                        }
                                        _context.SaveChanges();
                                    }
                                    _rulesetAbilitiesCreated.Add(GetAbilityByContentID(_ruleSetItemsContent.ContentId));

                                }
                            }
                            //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);
                            SaveRuleSetClientImages(clientImagesPath, ClientImages);
                        }

                        var _rulesetId = _rulesetAbilities[0].RulesetID;
                        _serviceResponseModel.Result = _rulesetAbilitiesCreated;
                        //return _serviceResponseModel;
                        _serviceResponseModel.StatusCode = 200;
                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;

        }

        public ServiceResponseModel UpdateRulesetAbilities(List<Abilities> _updateAbilities, List<HttpPostedFileBase> ClientImages, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForUpdateRulesetAbilities(_updateAbilities, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        Hashtable clientImagesPath = new Hashtable();

                        List<Abilities> _rulesetAbilitiesCreated = new List<Abilities>();

                        List<string> clientImagesPathForDelete = new List<string>();
                        List<string> rulesetpropertyDeleteImage = new List<string>();
                        var deleteability = new List<int>();
                        var rulesetid = _updateAbilities[0].RulesetID;
                        if (_updateAbilities != null)
                        {
                            var virtualPath = string.Empty;
                            for (var j = 0; j < _updateAbilities.Count; j++)
                            {
                                var ability = _updateAbilities[j];
                                RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                                if (ability.AbilityProperties != null)
                                {
                                    var AbilityPropertiesExceptTiles = ability.AbilityProperties[0].tile != null ? ability.AbilityProperties.Where(p => p.tile.Value == null).ToList() : ability.AbilityProperties.Where(p => p.tile == null).ToList();
                                    if (ability.AbilityProperties[0].ContentId == null || ability.AbilityProperties[0].ContentId == 0)
                                    {
                                        _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.
                                        _ruleSetItemsContent.RulesetID = ability.RulesetID;
                                        _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                                        foreach (var _abilityProperties in AbilityPropertiesExceptTiles)
                                        {
                                            Ability _ability = new Ability();
                                            XmlDocument _tempabilityPropertyValue = new XmlDocument();
                                            _ability.IsStatic = true;
                                            _ability.ContentTypeId = (_abilityProperties.ContentId == null || _abilityProperties.ContentTypeId == null)
                                                            ? _abilityProperties.Id : _abilityProperties.ContentTypeId;
                                            //if (_abilityProperties.ContentId == null)
                                            //{
                                            //    _ability.ContentTypeId = _abilityProperties.Id;
                                            //}
                                            //else if (_abilityProperties.ContentId == 0)
                                            //{
                                            //    _ability.ContentTypeId = _abilityProperties.ContentTypeId;
                                            //}

                                            // _ability.ContentTypeId = _abilityProperties.ContentTypeId != null ? _abilityProperties.ContentTypeId : _abilityProperties.Id;


                                            if (_abilityProperties.Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = _abilityProperties.Value;
                                                SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, -1);
                                                _abilityProperties.Value = _temprulesetPropertyValueForImagePath;

                                                _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(_abilityProperties.TypeId, _abilityProperties.Value, "");


                                                if (_tempabilityPropertyValue != null)
                                                {
                                                    _ability.value = _tempabilityPropertyValue.OuterXml;
                                                }
                                            }
                                            _ruleSetItemsContent.Abilities.Add(_ability);
                                        }
                                        _context.SaveChanges();
                                    }
                                    else if (ability.AbilityProperties[0].ContentId != null || ability.AbilityProperties[0].ContentId != 0)
                                    {
                                        int? _rulesetabilityContentId = _updateAbilities[j].AbilityProperties[0].ContentId;
                                        _ruleSetItemsContent = _context.RuleSetItemsContents.Where(p => p.RulesetID == rulesetid && p.Type == 3 && p.ContentId == _rulesetabilityContentId).FirstOrDefault();

                                        _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.
                                        _ruleSetItemsContent.RulesetID = _updateAbilities[0].RulesetID;
                                        _ruleSetItemsContent.ContentId = _ruleSetItemsContent.ContentId;
                                        var AbilityContentId = _ruleSetItemsContent.ContentId;
                                        var Abilities = _context.Abilities.Where(p => p.ContentId == AbilityContentId).ToList();
                                        Abilities = Abilities.Where(p => p.ContentTypeId != null).ToList();
                                        for (var k = 0; k < Abilities.Count; k++)
                                        {
                                            Ability _ability = new Ability();
                                            XmlDocument _tempabilityPropertyValue = new XmlDocument();
                                            //_ability.ContentId = Abilities[k].ContentId;
                                            //_ability.ContentTypeId = Abilities[k].ContentTypeId;
                                            //_ability.AbilityId = Abilities[k].AbilityId;
                                            var AbilityImagePath = string.Empty;
                                            if (ability.AbilityProperties[k].Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = ability.AbilityProperties[k].Value;
                                                SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, Abilities[k].AbilityId);
                                                ability.AbilityProperties[k].Value = _temprulesetPropertyValueForImagePath;

                                                _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(ability.AbilityProperties[k].TypeId, ability.AbilityProperties[k].Value, "");



                                                if (_tempabilityPropertyValue != null)
                                                {
                                                    Abilities[k].value = _tempabilityPropertyValue.OuterXml;
                                                }

                                            }

                                        }

                                        _context.SaveChanges();
                                    }
                                    _rulesetAbilitiesCreated.Add(GetAbilityByContentID(_ruleSetItemsContent.ContentId));
                                }
                                //deleteability.Add(_ruleSetItemsContent.ContentId);
                            }
                            //var deleterulesetabilities1 = _context.RuleSetItemsContents.Where(W => !deleteability.Any(a => a == W.ContentId) && W.RulesetID == _updateAbilities[0].RulesetID && W.Type == 3).ToList();

                            //var abilities = deleterulesetabilities1.Select(w => w.ContentId).ToList();

                            //var deleterulesetabilities2 = _context.Abilities.Where(W => abilities.Any(a => a == W.ContentId)).ToList();

                            //foreach (var _ability in deleterulesetabilities2)
                            //{
                            //    _context.Abilities.Remove(_ability);

                            //}

                            //foreach (var rulesetabilitycontent in deleterulesetabilities1)
                            //{
                            //    _context.RuleSetItemsContents.Remove(rulesetabilitycontent);

                            //}

                            //_context.SaveChanges();
                            //SaveRuleSetContentsTiles(UpdateModel, _ruleSet);

                            SaveRuleSetClientImages(clientImagesPath, ClientImages);
                            DeleteOldRuleSetClientImages(rulesetpropertyDeleteImage);
                        }
                        //var _rulesetId = _updateAbilities[0].RulesetID;
                        _serviceResponseModel.Result = _rulesetAbilitiesCreated;
                        //return _serviceResponseModel;
                        _serviceResponseModel.StatusCode = 200;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;
        }

        public ServiceResponseModel CopyRulesetAbilities(List<Abilities> _copyAbilities, List<HttpPostedFileBase> ClientImages, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForCreateRulesetAbilities(_copyAbilities, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {
                        List<Abilities> _rulesetAbilitiesCreated = new List<Abilities>();

                        Hashtable clientImagesPath = new Hashtable();

                        List<string> clientImagesPathForDelete = new List<string>();

                        if (_copyAbilities != null)
                        {
                            var VirtualPath = string.Empty;
                            foreach (var ability in _copyAbilities)
                            {
                                if (ability.AbilityProperties != null)
                                {
                                    RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                                    _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.
                                    _ruleSetItemsContent.RulesetID = ability.RulesetID;
                                    _context.RuleSetItemsContents.Add(_ruleSetItemsContent);

                                    foreach (var _abilityProperties in ability.AbilityProperties)
                                    {
                                        Ability _ability = new Ability();
                                        XmlDocument _tempabilityPropertyValue = new XmlDocument();
                                        if (_abilityProperties.Id != 0)
                                        {
                                            _ability.ContentTypeId = _abilityProperties.ContentTypeId;
                                            _ability.ContentId = _ruleSetItemsContent.ContentId;
                                            _ability.IsStatic = true;
                                            if (_abilityProperties.Value != null)
                                            {
                                                CustomTypes _temprulesetPropertyValueForImagePath = _abilityProperties.Value;
                                                if (_abilityProperties.Value.Image != null && _abilityProperties.Value.Image.image != null && _abilityProperties.Value.Image.image.IndexOf("wwwroot") > 0)
                                                {
                                                    string RuleSetAbilityimagephysicalmappathsource = HttpContext.Current.Server.MapPath(_abilityProperties.Value.Image.image);
                                                    string virtualPathDest = "/wwwroot/images/RuleSetAbilitiesImages/" + ability.AbilityProperties[0].Value.Text.value + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                                    string RuleSetAbilityimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                                    if (File.Exists(RuleSetAbilityimagephysicalmappathsource))
                                                    {
                                                        File.Copy(RuleSetAbilityimagephysicalmappathsource, RuleSetAbilityimagephysicalmappathdest);
                                                    }
                                                    _temprulesetPropertyValueForImagePath.Image.image = virtualPathDest;
                                                }
                                                SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                                _abilityProperties.Value = _temprulesetPropertyValueForImagePath;

                                                _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(_abilityProperties.TypeId, _abilityProperties.Value, "");


                                                if (_tempabilityPropertyValue != null)
                                                {
                                                    _ability.value = _tempabilityPropertyValue.OuterXml;
                                                }
                                            }

                                            _context.Abilities.Add(_ability);
                                        }
                                        _context.SaveChanges();
                                    }
                                    _rulesetAbilitiesCreated.Add(GetAbilityByContentID(_ruleSetItemsContent.ContentId));
                                }
                            }
                            //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);
                            SaveRuleSetClientImages(clientImagesPath, ClientImages);
                        }

                        //var _rulesetId = _copyAbilities[0].RulesetID;
                        _serviceResponseModel.Result = _rulesetAbilitiesCreated;
                        //return _serviceResponseModel;
                        _serviceResponseModel.StatusCode = 200;
                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;
        }

        public ServiceResponseModel DeleteAbility(List<Abilities> deleteability, string userId)
        {
            try
            {
                if (userId != null || userId != "")
                {
                    int resultStatus;
                    string Errors = "";

                    Errors = ValidationForDeleteAbility(deleteability, userId, out resultStatus);

                    if (resultStatus == 1)
                    {
                        _serviceResponseModel.ErrorMessage = Errors;
                        _serviceResponseModel.StatusCode = 400;
                    }
                    else
                    {

                        var _rulesetId = deleteability[0].RulesetID;
                        foreach (var abilities in deleteability)
                        {
                            var contentid = abilities.AbilityProperties[0].ContentId;
                            var deleteabilities = _context.Abilities.Where(p => p.ContentId == contentid).ToList();
                            foreach (var ability in deleteabilities)
                            {
                                _context.Abilities.Remove(ability);
                                _context.SaveChanges();
                            }
                            var deletecontentid = _context.RuleSetItemsContents.Where(p => p.ContentId == contentid).FirstOrDefault();
                            _context.RuleSetItemsContents.Remove(deletecontentid);
                            _context.SaveChanges();

                        }


                        _serviceResponseModel.Result = deleteability;
                        //return _serviceResponseModel;
                        _serviceResponseModel.StatusCode = 200;

                    }
                }
                else
                {
                    _serviceResponseModel.ErrorMessage = "Not valid User";
                    _serviceResponseModel.StatusCode = 500;
                }

            }
            catch (Exception ex)
            {
                _serviceResponseModel.ErrorMessage = ex.Message;
                _serviceResponseModel.StatusCode = 500;
            }

            return _serviceResponseModel;
        }


        //Validations for Ruleset Ability
        public string ValidationForCreateRulesetAbilities(List<Abilities> _rulesetAbilities, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            if (_rulesetAbilities.Count > 0)
            {
                foreach (var Ability in _rulesetAbilities)
                {
                    string AbilityName = "";

                    if (Ability.AbilityProperties != null)
                    {
                        string FileterName = "Name";
                        int FileterTypeId = 1;
                        var AbilityData = Ability.AbilityProperties.Where(x => x.Name == FileterName && x.TypeId == FileterTypeId);

                        //var FileterTypeId = 1;
                        //var SpellData = Spell.SpellProperties.Where(x => x.Name == "Name" && x.TypeId == FileterTypeId).ToList();
                        foreach (var _Ability in AbilityData)
                        {
                            AbilityName = _Ability.Value.Text.value;
                        }

                        List<Abilities> _AbilityList = GetRulesetAbilitiesByRulesetId(Convert.ToInt32(Ability.RulesetID));
                        foreach (var _ability in _AbilityList)
                        {
                            string FileterName1 = "Name";
                            int FileterTypeId1 = 1;
                            List<AbilityProperties> _AbilityPropertiesdata = _ability.AbilityProperties.Where(x => x.Name == FileterName1 && x.TypeId == FileterTypeId1).ToList();

                            foreach (var _AbilityProperties in _AbilityPropertiesdata)
                            {
                                if (AbilityName == _AbilityProperties.Value.Text.value)
                                {
                                    // Errors = Errors + SpellName + "_" + _spellProperties.Name + " Required,";
                                    resultStatus = 1;
                                }
                            }

                        }

                        if (resultStatus == 1)
                        {
                            Errors = Errors + AbilityName + "already Exist,";
                        }


                        foreach (var _AbilityProperties in Ability.AbilityProperties)
                        {
                            //if (_AbilityProperties.TypeId == 1 && _AbilityProperties.IsMandatory == false && _AbilityProperties.Value != null)
                            //{
                            //    AbilityName = _AbilityProperties.Value.Text.value;
                            //}

                            if (_AbilityProperties.IsMandatory == true && _AbilityProperties.Value != null)
                            {
                                switch (_AbilityProperties.TypeId)
                                {
                                    case 1:
                                        if (_AbilityProperties.Value.Text.value == "" || _AbilityProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            AbilityName = _AbilityProperties.Value.Text.value;
                                        }

                                        break;
                                    case 2:
                                        if (_AbilityProperties.Value.Choices.selectedchoice == "" || _AbilityProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_AbilityProperties.Value.OnOrOff.value == "" || _AbilityProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_AbilityProperties.Value.YesOrNo.value == "" || _AbilityProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_AbilityProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _AbilityProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_AbilityProperties.Value.YesOrNo.value == "" || _AbilityProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_AbilityProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_AbilityProperties.Value.Image.image == "" || _AbilityProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_AbilityProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_AbilityProperties.Value.Volume.units.selectedUnit == "" || _AbilityProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_AbilityProperties.Value.Number.value < 0)
                                        {

                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_AbilityProperties.Value.DefaultDice.value == "" || _AbilityProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_AbilityProperties.Value.Calculation.formulae == "" || _AbilityProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_AbilityProperties.Value.Text.value == "" || _AbilityProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_AbilityProperties.IsMandatory == true && _AbilityProperties.Value == null)
                            {
                                Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                resultStatus = 1;
                            }
                            else if ((_AbilityProperties.TypeId == 7 || _AbilityProperties.TypeId == 12 || _AbilityProperties.TypeId == 14) && _AbilityProperties.IsMandatory == false && _AbilityProperties.Value != null)
                            {
                                switch (_AbilityProperties.TypeId)
                                {
                                    case 7:
                                        if (_AbilityProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_AbilityProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_AbilityProperties.Value.Number.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }

                        }
                    }
                }
            }
            return Errors;
        }

        public string ValidationForUpdateRulesetAbilities(List<Abilities> _rulesetAbilities, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            if (_rulesetAbilities.Count > 0)
            {
                foreach (var Ability in _rulesetAbilities)
                {
                    string AbilityName = "";

                    if (Ability.AbilityProperties != null)
                    {
                        string FileterName = "Name";
                        int FileterTypeId = 1;
                        var AbilityData = Ability.AbilityProperties.Where(x => x.Name == FileterName && x.TypeId == FileterTypeId);

                        //var FileterTypeId = 1;
                        //var SpellData = Spell.SpellProperties.Where(x => x.Name == "Name" && x.TypeId == FileterTypeId).ToList();
                        foreach (var _Ability in AbilityData)
                        {
                            AbilityName = _Ability.Value.Text.value;
                        }

                        foreach (var _AbilityProperties in Ability.AbilityProperties)
                        {

                            if (_AbilityProperties.IsMandatory == true && _AbilityProperties.Value != null)
                            {
                                switch (_AbilityProperties.TypeId)
                                {
                                    case 1:
                                        if (_AbilityProperties.Value.Text.value == "" || _AbilityProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        else
                                        {
                                            AbilityName = _AbilityProperties.Value.Text.value;
                                        }

                                        break;
                                    case 2:
                                        if (_AbilityProperties.Value.Choices.selectedchoice == "" || _AbilityProperties.Value.Choices.selectedchoice == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                    case 3:
                                        if (_AbilityProperties.Value.OnOrOff.value == "" || _AbilityProperties.Value.OnOrOff.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 4:
                                        if (_AbilityProperties.Value.YesOrNo.value == "" || _AbilityProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 5:
                                        if (_AbilityProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == "" || _AbilityProperties.Value.CurrentAndMaxValue.MaxValue.ToString() == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 6:
                                        if (_AbilityProperties.Value.YesOrNo.value == "" || _AbilityProperties.Value.YesOrNo.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 7:
                                        if (_AbilityProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 8:
                                        if (_AbilityProperties.Value.Image.image == "" || _AbilityProperties.Value.Image.image == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_AbilityProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 13:
                                        if (_AbilityProperties.Value.Volume.units.selectedUnit == "" || _AbilityProperties.Value.Volume.units.selectedUnit == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_AbilityProperties.Value.Number.value < 0)
                                        {

                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            //Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required" + Environment.NewLine;
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 15:
                                        if (_AbilityProperties.Value.DefaultDice.value == "" || _AbilityProperties.Value.DefaultDice.value == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 16:
                                        if (_AbilityProperties.Value.Calculation.formulae == "" || _AbilityProperties.Value.Calculation.formulae == null)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }
                                        break;

                                    case 19:
                                        if (_AbilityProperties.Value.Text.value == "" || _AbilityProperties.Value.Text.value == "")
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                            resultStatus = 1;
                                        }

                                        break;
                                }

                            }
                            else if (_AbilityProperties.IsMandatory == true && _AbilityProperties.Value == null)
                            {
                                Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " Required,";
                                resultStatus = 1;
                            }
                            else if ((_AbilityProperties.TypeId == 7 || _AbilityProperties.TypeId == 12 || _AbilityProperties.TypeId == 14) && _AbilityProperties.IsMandatory == false && _AbilityProperties.Value != null)
                            {
                                switch (_AbilityProperties.TypeId)
                                {
                                    case 7:
                                        if (_AbilityProperties.Value.Weight.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 12:
                                        if (_AbilityProperties.Value.Height.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                    case 14:
                                        if (_AbilityProperties.Value.Number.value < 0)
                                        {
                                            Errors = Errors + AbilityName + "_" + _AbilityProperties.Name + " should be greater than Zero,";
                                            resultStatus = 1;
                                        }
                                        break;
                                }

                            }

                        }
                    }
                }
            }
            return Errors;
        }

        public string ValidationForDeleteAbility(List<Abilities> _rulesetAbilities, string userId, out int resultStatus)
        {
            string Errors = "";
            resultStatus = 0;

            int contentid = 0;
            var _rulesetId = _rulesetAbilities[0].RulesetID;
            int ContentType = 3;
            foreach (var Ability in _rulesetAbilities)
            {
                contentid = Convert.ToInt32(Ability.AbilityProperties[0].ContentId);
            }

            List<Ability> AbilityList = (from _Abilities in _context.Abilities
                                         join _ruleSetItemsContents in _context.RuleSetItemsContents on _Abilities.ContentId equals _ruleSetItemsContents.ContentId
                                         join _RuleSets in _context.RuleSets on _ruleSetItemsContents.RulesetID equals _RuleSets.RulesetID
                                         where _ruleSetItemsContents.RulesetID == _rulesetId
                                         && _ruleSetItemsContents.Type == ContentType
                                         && _ruleSetItemsContents.ContentId == contentid
                                         && _RuleSets.UserId == userId
                                         select _Abilities
                      ).ToList();

            if (AbilityList.Count == 0)
            {
                Errors = Errors + "Please Select Valid Ability for Delete \\n";
                resultStatus = 1;
            }

            return Errors;
        }

        //public string ValidationForCopyRulesetAbilities(List<Abilities> _rulesetAbilities, string userId, out int resultStatus)
        //{
        //    string Errors = "";
        //    resultStatus = 0;


        //    return Errors;
        //}

        public ServiceResponseModel CreateRulesetAbilities_Bkp(List<Abilities> _rulesetAbilities, List<HttpPostedFileBase> ClientImages, string userId)
        {
            List<Abilities> _rulesetAbilitiesCreated = new List<Abilities>();

            Hashtable clientImagesPath = new Hashtable();

            List<string> clientImagesPathForDelete = new List<string>();

            if (_rulesetAbilities != null)
            {
                var VirtualPath = string.Empty;
                foreach (var ability in _rulesetAbilities)
                {
                    RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                    if (ability.AbilityProperties != null)
                    {

                        _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.
                        _ruleSetItemsContent.RulesetID = ability.RulesetID;
                        _context.RuleSetItemsContents.Add(_ruleSetItemsContent);

                        foreach (var _abilityProperties in ability.AbilityProperties)
                        {
                            Ability _ability = new Ability();
                            XmlDocument _tempabilityPropertyValue = new XmlDocument();
                            if (_abilityProperties.Id != 0)
                            {
                                _ability.ContentTypeId = _abilityProperties.Id;
                                _ability.ContentId = _ruleSetItemsContent.ContentId;
                                _ability.IsStatic = true;
                                if (_abilityProperties.Value != null)
                                {
                                    CustomTypes _temprulesetPropertyValueForImagePath = _abilityProperties.Value;
                                    SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                    _abilityProperties.Value = _temprulesetPropertyValueForImagePath;

                                    _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(_abilityProperties.TypeId, _abilityProperties.Value, "");


                                    if (_tempabilityPropertyValue != null)
                                    {
                                        _ability.value = _tempabilityPropertyValue.OuterXml;
                                    }
                                }

                                _context.Abilities.Add(_ability);
                            }
                            _context.SaveChanges();
                        }
                        _rulesetAbilitiesCreated.Add(GetAbilityByContentID(_ruleSetItemsContent.ContentId));

                    }
                }
                //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);
                SaveRuleSetClientImages(clientImagesPath, ClientImages);
            }

            var _rulesetId = _rulesetAbilities[0].RulesetID;
            _serviceResponseModel.Result = _rulesetAbilitiesCreated;
            return _serviceResponseModel;
        }
        public ServiceResponseModel UpdateRulesetAbilities_Bkp(List<Abilities> _updateAbilities, List<HttpPostedFileBase> ClientImages, string userId)
        {
            Hashtable clientImagesPath = new Hashtable();

            List<Abilities> _rulesetAbilitiesCreated = new List<Abilities>();

            List<string> clientImagesPathForDelete = new List<string>();
            List<string> rulesetpropertyDeleteImage = new List<string>();
            var deleteability = new List<int>();
            var rulesetid = _updateAbilities[0].RulesetID;
            if (_updateAbilities != null)
            {
                var virtualPath = string.Empty;
                for (var j = 0; j < _updateAbilities.Count; j++)
                {
                    var ability = _updateAbilities[j];
                    RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();
                    if (ability.AbilityProperties != null)
                    {
                        var AbilityPropertiesExceptTiles = ability.AbilityProperties[0].tile != null ? ability.AbilityProperties.Where(p => p.tile.Value == null).ToList() : ability.AbilityProperties.Where(p => p.tile == null).ToList();
                        if (ability.AbilityProperties[0].ContentId == null || ability.AbilityProperties[0].ContentId == 0)
                        {
                            _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.
                            _ruleSetItemsContent.RulesetID = ability.RulesetID;
                            _context.RuleSetItemsContents.Add(_ruleSetItemsContent);
                            foreach (var _abilityProperties in AbilityPropertiesExceptTiles)
                            {
                                Ability _ability = new Ability();
                                XmlDocument _tempabilityPropertyValue = new XmlDocument();
                                _ability.IsStatic = true;
                                _ability.ContentTypeId = (_abilityProperties.ContentId == null || _abilityProperties.ContentTypeId == null)
                                                ? _abilityProperties.Id : _abilityProperties.ContentTypeId;
                                //if (_abilityProperties.ContentId == null)
                                //{
                                //    _ability.ContentTypeId = _abilityProperties.Id;
                                //}
                                //else if (_abilityProperties.ContentId == 0)
                                //{
                                //    _ability.ContentTypeId = _abilityProperties.ContentTypeId;
                                //}

                                // _ability.ContentTypeId = _abilityProperties.ContentTypeId != null ? _abilityProperties.ContentTypeId : _abilityProperties.Id;


                                if (_abilityProperties.Value != null)
                                {
                                    CustomTypes _temprulesetPropertyValueForImagePath = _abilityProperties.Value;
                                    SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, -1);
                                    _abilityProperties.Value = _temprulesetPropertyValueForImagePath;

                                    _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(_abilityProperties.TypeId, _abilityProperties.Value, "");


                                    if (_tempabilityPropertyValue != null)
                                    {
                                        _ability.value = _tempabilityPropertyValue.OuterXml;
                                    }
                                }
                                _ruleSetItemsContent.Abilities.Add(_ability);
                            }
                            _context.SaveChanges();
                        }
                        else if (ability.AbilityProperties[0].ContentId != null || ability.AbilityProperties[0].ContentId != 0)
                        {
                            int? _rulesetabilityContentId = _updateAbilities[j].AbilityProperties[0].ContentId;
                            _ruleSetItemsContent = _context.RuleSetItemsContents.Where(p => p.RulesetID == rulesetid && p.Type == 3 && p.ContentId == _rulesetabilityContentId).FirstOrDefault();

                            _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.
                            _ruleSetItemsContent.RulesetID = _updateAbilities[0].RulesetID;
                            _ruleSetItemsContent.ContentId = _ruleSetItemsContent.ContentId;
                            var AbilityContentId = _ruleSetItemsContent.ContentId;
                            var Abilities = _context.Abilities.Where(p => p.ContentId == AbilityContentId).ToList();
                            Abilities = Abilities.Where(p => p.ContentTypeId != null).ToList();
                            for (var k = 0; k < Abilities.Count; k++)
                            {
                                Ability _ability = new Ability();
                                XmlDocument _tempabilityPropertyValue = new XmlDocument();
                                //_ability.ContentId = Abilities[k].ContentId;
                                //_ability.ContentTypeId = Abilities[k].ContentTypeId;
                                //_ability.AbilityId = Abilities[k].AbilityId;
                                var AbilityImagePath = string.Empty;
                                if (ability.AbilityProperties[k].Value != null)
                                {
                                    CustomTypes _temprulesetPropertyValueForImagePath = ability.AbilityProperties[k].Value;
                                    SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref rulesetpropertyDeleteImage, Abilities[k].AbilityId);
                                    ability.AbilityProperties[k].Value = _temprulesetPropertyValueForImagePath;

                                    _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(ability.AbilityProperties[k].TypeId, ability.AbilityProperties[k].Value, "");



                                    if (_tempabilityPropertyValue != null)
                                    {
                                        Abilities[k].value = _tempabilityPropertyValue.OuterXml;
                                    }

                                }

                            }

                            _context.SaveChanges();
                        }
                        _rulesetAbilitiesCreated.Add(GetAbilityByContentID(_ruleSetItemsContent.ContentId));
                    }
                    //deleteability.Add(_ruleSetItemsContent.ContentId);
                }
                //var deleterulesetabilities1 = _context.RuleSetItemsContents.Where(W => !deleteability.Any(a => a == W.ContentId) && W.RulesetID == _updateAbilities[0].RulesetID && W.Type == 3).ToList();

                //var abilities = deleterulesetabilities1.Select(w => w.ContentId).ToList();

                //var deleterulesetabilities2 = _context.Abilities.Where(W => abilities.Any(a => a == W.ContentId)).ToList();

                //foreach (var _ability in deleterulesetabilities2)
                //{
                //    _context.Abilities.Remove(_ability);

                //}

                //foreach (var rulesetabilitycontent in deleterulesetabilities1)
                //{
                //    _context.RuleSetItemsContents.Remove(rulesetabilitycontent);

                //}

                //_context.SaveChanges();
                //SaveRuleSetContentsTiles(UpdateModel, _ruleSet);

                SaveRuleSetClientImages(clientImagesPath, ClientImages);
                DeleteOldRuleSetClientImages(rulesetpropertyDeleteImage);
            }
            //var _rulesetId = _updateAbilities[0].RulesetID;
            _serviceResponseModel.Result = _rulesetAbilitiesCreated;
            return _serviceResponseModel;
        }
        public ServiceResponseModel CopyRulesetAbilities_Bkp(List<Abilities> _copyAbilities, List<HttpPostedFileBase> ClientImages, string userId)
        {
            List<Abilities> _rulesetAbilitiesCreated = new List<Abilities>();

            Hashtable clientImagesPath = new Hashtable();

            List<string> clientImagesPathForDelete = new List<string>();

            if (_copyAbilities != null)
            {
                var VirtualPath = string.Empty;
                foreach (var ability in _copyAbilities)
                {
                    if (ability.AbilityProperties != null)
                    {
                        RuleSetItemsContent _ruleSetItemsContent = new RuleSetItemsContent();

                        _ruleSetItemsContent.Type = 3; // Type 3 for Abilities.
                        _ruleSetItemsContent.RulesetID = ability.RulesetID;
                        _context.RuleSetItemsContents.Add(_ruleSetItemsContent);

                        foreach (var _abilityProperties in ability.AbilityProperties)
                        {
                            Ability _ability = new Ability();
                            XmlDocument _tempabilityPropertyValue = new XmlDocument();
                            if (_abilityProperties.Id != 0)
                            {
                                _ability.ContentTypeId = _abilityProperties.ContentTypeId;
                                _ability.ContentId = _ruleSetItemsContent.ContentId;
                                _ability.IsStatic = true;
                                if (_abilityProperties.Value != null)
                                {
                                    CustomTypes _temprulesetPropertyValueForImagePath = _abilityProperties.Value;
                                    if (_abilityProperties.Value.Image != null && _abilityProperties.Value.Image.image != null && _abilityProperties.Value.Image.image.IndexOf("wwwroot") > 0)
                                    {
                                        string RuleSetAbilityimagephysicalmappathsource = HttpContext.Current.Server.MapPath(_abilityProperties.Value.Image.image);
                                        string virtualPathDest = "/wwwroot/images/RuleSetAbilitiesImages/" + ability.AbilityProperties[0].Value.Text.value + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".jpg";
                                        string RuleSetAbilityimagephysicalmappathdest = HttpContext.Current.Server.MapPath(virtualPathDest);
                                        if (File.Exists(RuleSetAbilityimagephysicalmappathsource))
                                        {
                                            File.Copy(RuleSetAbilityimagephysicalmappathsource, RuleSetAbilityimagephysicalmappathdest);
                                        }
                                        _temprulesetPropertyValueForImagePath.Image.image = virtualPathDest;
                                    }
                                    SetPathforClientImages(4, ref _temprulesetPropertyValueForImagePath, ref clientImagesPath, ref clientImagesPathForDelete, -1);
                                    _abilityProperties.Value = _temprulesetPropertyValueForImagePath;

                                    _tempabilityPropertyValue = Utility.ConvertTypeValueClasstoXML(_abilityProperties.TypeId, _abilityProperties.Value, "");


                                    if (_tempabilityPropertyValue != null)
                                    {
                                        _ability.value = _tempabilityPropertyValue.OuterXml;
                                    }
                                }

                                _context.Abilities.Add(_ability);
                            }
                            _context.SaveChanges();
                        }
                        _rulesetAbilitiesCreated.Add(GetAbilityByContentID(_ruleSetItemsContent.ContentId));
                    }
                }
                //SaveRuleSetContentsTiles(RulesetModel, _ruleSet);
                SaveRuleSetClientImages(clientImagesPath, ClientImages);
            }

            //var _rulesetId = _copyAbilities[0].RulesetID;
            _serviceResponseModel.Result = _rulesetAbilitiesCreated;
            return _serviceResponseModel;
        }
        public ServiceResponseModel DeleteAbility_Bkp(List<Abilities> deleteability)
        {
            var _rulesetId = deleteability[0].RulesetID;
            foreach (var abilities in deleteability)
            {
                var contentid = abilities.AbilityProperties[0].ContentId;
                var deleteabilities = _context.Abilities.Where(p => p.ContentId == contentid).ToList();
                foreach (var ability in deleteabilities)
                {
                    _context.Abilities.Remove(ability);
                    _context.SaveChanges();
                }
                var deletecontentid = _context.RuleSetItemsContents.Where(p => p.ContentId == contentid).FirstOrDefault();
                _context.RuleSetItemsContents.Remove(deletecontentid);
                _context.SaveChanges();

            }


            _serviceResponseModel.Result = deleteability;
            return _serviceResponseModel;
        }
        #endregion
        #region For Ruleset Tiles
        public RuleSetViewModel GetTilesMetadataForRuleset()
        {
            RuleSetViewModel _ruleSetViewModel = new RuleSetViewModel();
            var _dataQueryTileTypes = _context.TileTypes.ToList();

            //Setting Tile View Model and Tile Types in Item Lavel
            for (var i = 0; i < _dataQueryTileTypes.Count(); i++)
            {
                _ruleSetViewModel.RuleSetMetaData.TileTypes.Add(new ViewModels.TileTypes()
                {
                    TileId = _dataQueryTileTypes[i].TileTypeId,
                    TileType = _dataQueryTileTypes[i].TileTypeName,
                    Value = Utility.GetTileTypeClassMetaData(_dataQueryTileTypes[i].TileTypeId)
                });
            }
            _ruleSetViewModel.RuleSetMetaData.Tile.TabId = 0;
            _ruleSetViewModel.RuleSetMetaData.Tile.Styles = new Style();
            return _ruleSetViewModel;
        }

        public ServiceResponseModel SaveOrUpdateRulesetTiles(RulesetContentForTiles _rulesetContentTiles, string userId)
        {
            int ContentId = 0;
            if (_rulesetContentTiles.ItemProperties != null && _rulesetContentTiles.ItemProperties.Count() > 0)
            {
                //if(_rulesetContentTiles.ItemProperties.Count() > 0)
                //{
                ContentId = Convert.ToInt32(_rulesetContentTiles.ItemProperties[0].ContentId);
                foreach (var itemtile in _rulesetContentTiles.ItemProperties)
                {

                    if (itemtile.tile.Value != null)
                    {

                        itemtile.tile.TileLocationId = 2;
                        Item _item = new Item();
                        if (itemtile.tile.TabId == 0)
                        {
                            itemtile.tile.UserId = userId;
                            //Adding Last Item Properties for Tiles
                            _item.ContentId = ContentId;
                            _item.ContentTypeId = null;
                            _item.value = "";
                            _item.IsStatic = false;
                            _context.Items.Add(_item);
                            _context.SaveChanges();
                            itemtile.tile.TabId = Convert.ToInt32(itemtile.Id != 0 ? itemtile.Id : _item.ItemId);
                            //Saving Tiles
                            new TileService().AddOrUpdateTile(itemtile.tile, userId);
                        }
                        else
                        {
                            if (_context.Tiles.Where(p => p.TileContentId == itemtile.Id).ToList().Count > 0)
                            {
                                if (itemtile.tile.Value != null)
                                {
                                    //Adding or Updating Tiles
                                    itemtile.tile.TileLocationId = 2;
                                    itemtile.tile.UserId = userId;
                                    _context.SaveChanges();
                                    new TileService().AddOrUpdateTile(itemtile.tile, userId);
                                }
                            }
                        }
                    }
                }
                //}
                _serviceResponseModel.Result = GetItemByContentId(ContentId);

            }
            else if (_rulesetContentTiles.SpellProperties != null && _rulesetContentTiles.SpellProperties.Count() > 0)
            {

                //if(_rulesetContentTiles.SpellProperties.Count() > 0)
                //{
                ContentId = Convert.ToInt32(_rulesetContentTiles.SpellProperties[0].ContentId);
                foreach (var spelltile in _rulesetContentTiles.SpellProperties)
                {
                    if (spelltile.tile.Value != null)
                    {

                        spelltile.tile.TileLocationId = 3;
                        Spell _spell = new Spell();
                        if (spelltile.tile.TabId == 0)
                        {
                            spelltile.tile.UserId = userId;
                            //Adding Last Item Properties for Tiles
                            _spell.ContentId = ContentId;
                            _spell.ContentTypeId = null;
                            _spell.value = "";
                            _spell.IsStatic = false;
                            _context.Spells.Add(_spell);
                            _context.SaveChanges();
                            spelltile.tile.TabId = Convert.ToInt32(spelltile.Id != 0 ? spelltile.Id : _spell.SpellId);
                            //Saving Tiles
                            new TileService().AddOrUpdateTile(spelltile.tile, userId);
                        }
                        else
                        {
                            if (_context.Tiles.Where(p => p.TileContentId == spelltile.Id).ToList().Count > 0)
                            {
                                if (spelltile.tile.Value != null)
                                {
                                    //Adding or Updating Tiles
                                    spelltile.tile.TileLocationId = 3;
                                    spelltile.tile.UserId = userId;
                                    _context.SaveChanges();
                                    new TileService().AddOrUpdateTile(spelltile.tile, userId);
                                }
                            }
                        }
                    }
                }
                //}
                _serviceResponseModel.Result = GetSpellByContentId(ContentId);
            }
            else if (_rulesetContentTiles.AbilityProperties != null && _rulesetContentTiles.AbilityProperties.Count() > 0)
            {
                ContentId = Convert.ToInt32(_rulesetContentTiles.AbilityProperties[0].ContentId);
                //if(_rulesetContentTiles.AbilityProperties.Count() > 0)
                //{
                foreach (var abilitytile in _rulesetContentTiles.AbilityProperties)
                {
                    if (abilitytile.tile.Value != null)
                    {

                        abilitytile.tile.TileLocationId = 4;
                        Ability _ability = new Ability();
                        if (abilitytile.tile.TabId == 0)
                        {
                            abilitytile.tile.UserId = userId;
                            //Adding Last Item Properties for Tiles
                            _ability.ContentId = ContentId;
                            _ability.ContentTypeId = null;
                            _ability.value = "";
                            _ability.IsStatic = false;
                            _context.Abilities.Add(_ability);
                            _context.SaveChanges();
                            abilitytile.tile.TabId = Convert.ToInt32(abilitytile.Id != 0 ? abilitytile.Id : _ability.AbilityId);
                            //Saving Tiles
                            new TileService().AddOrUpdateTile(abilitytile.tile, userId);
                        }
                        else
                        {
                            if (_context.Tiles.Where(p => p.TileContentId == abilitytile.Id).ToList().Count > 0)
                            {
                                if (abilitytile.tile.Value != null)
                                {
                                    //Adding or Updating Tiles
                                    abilitytile.tile.TileLocationId = 4;
                                    abilitytile.tile.UserId = userId;
                                    _context.SaveChanges();
                                    new TileService().AddOrUpdateTile(abilitytile.tile, userId);
                                }
                            }
                        }
                    }
                }
                // }

                _serviceResponseModel.Result = GetAbilityByContentID(ContentId);
            }


            return _serviceResponseModel;
        }
    }
    #endregion
}


